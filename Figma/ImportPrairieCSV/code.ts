async function loadFonts() {

  await figma.loadFontAsync({ family: "Inter", style: "Regular" });
  console.log("Awaiting the fonts.");
};


var lightBaseMap = new Map();
var pathList = [];
var portalList = [];
var boothList = [];

function buildMaps() {

  var csvData = loadBaseData();
  console.log(`csvData() ${csvData}`);

  var rows = csvData.split("\n");
  console.log(`buildMap() found ${rows.length} base rows`);
  for (var i=0;i<rows.length;i++)
  {
    if (i > 0)
    {
      rows[i] = rows[i].trim();
      var cols = rows[i].split(",");
      // now apply 135 degree rotation
      //var theta = -Math.PI * 135 / 180;
      var theta = 0;
      var oldX = parseFloat(cols[1]);
      var oldZ = parseFloat(cols[2]);
      var newX = oldX * Math.cos(theta) - oldZ * Math.sin(theta);
      var newZ = oldZ * Math.cos(theta) + oldX * Math.sin(theta);
      cols[1] = newX.toString();
      cols[2] = newZ.toString(); 
      lightBaseMap.set(cols[0], cols);
    }
  }

  var portalData = loadPortalData();
  console.log(`portalData() ${portalData}`);
  rows = portalData.split("\n");
  console.log(`found ${rows.length} portals`);
  for (var i=0; i<rows.length; i++)
  {
    if (i > 0)
    {
      // store them as strings.   typescript doesnt' like arrays of arrays
      rows[i] = rows[i].trim();
      portalList.push(rows[i]);
    }
  }

  var boothData = loadBoothData();
  console.log(`boothData() ${boothData}`);
  rows = boothData.split("\n");
  console.log(`found ${rows.length} booths`);
  for (var i=0; i<rows.length; i++)
  {
    if (i > 0)
    {
      // store them as strings.   typescript doesnt' like arrays of arrays
      rows[i] = rows[i].trim();
      boothList.push(rows[i]);
    }
  }

  var pathData = loadPathData();
  console.log(`pathData() ${pathData}`);
  rows = pathData.split("\n");
  console.log(`buildMap() found ${rows.length} path rows`);
  for (var i=0;i<rows.length;i++)
  {
    if (i > 0)
    {
      // store them as strings.   typescript doesnt' like arrays of arrays
      rows[i] = rows[i].trim();
      pathList.push(rows[i]);
    }
  }
}

function loadPortalData()
{
  var portalData = `PortalId,x,z,Theta
  1,1260,0,90
  2,0,1260,180
  3,-1260,0,270
  4,0,-1260,0`;
  return portalData;
}

function loadBoothData()
{
  var boothData = `BoothId,x,z,Theta
  1,1103,1103,45
  2,-1103,-1103,225`;
  return boothData;
}

function loadBaseData()
{
  var baseData = `BaseId,x,z,DistFromCtr,Theta,ChannelStart,PathId,NearestTheta5,DistFromCenterOnTheta5,DistFromTheta5
  0,257.2385,59.36797,264.0004,77.00427,169,23,75,263.8389,9.233173
  1,230.9047,127.9813,264.0004,61.00214,148,23,60,263.96,4.617286
  2,186.6765,186.6765,264.0004,45,127,23,45,264.0004,0
  3,127.9813,230.9047,264.0004,28.99786,106,23,30,263.96,-4.617291
  4,59.36797,257.2385,264.0004,12.99573,85,23,15,263.8389,-9.233181
  5,-59.36799,257.2385,264.0004,347.0043,127,7,345,263.8389,9.233148
  6,-127.9813,230.9047,264.0004,331.0021,148,7,330,263.96,4.617299
  7,-186.6765,186.6765,264.0004,315,169,7,315,264.0004,0
  8,-230.9047,127.9813,264.0004,298.9979,190,7,300,263.96,-4.617299
  9,-257.2385,59.36798,264.0004,282.9957,211,7,285,263.8389,-9.233177
  10,-257.2385,-59.36797,264.0004,257.0043,442,15,255,263.8389,9.233181
  11,-230.9047,-127.9813,264.0004,241.0021,421,15,240,263.96,4.617299
  12,-186.6765,-186.6765,264.0004,225,400,15,225,264.0004,0
  13,-127.9813,-230.9047,264.0004,208.9979,379,15,210,263.96,-4.617238
  14,-59.36795,-257.2385,264.0004,192.9957,358,15,195,263.8389,-9.233177
  15,59.36795,-257.2385,264.0004,167.0043,316,31,165,263.8389,9.233185
  16,127.9813,-230.9047,264.0004,151.0021,337,31,150,263.96,4.617218
  17,186.6765,-186.6764,264.0004,135,358,31,135,264.0004,-0.0001406791
  18,230.9048,-127.9812,264.0004,118.9978,379,31,120,263.9601,-4.617496
  19,257.2386,-59.36777,264.0004,102.9957,400,31,105,263.8389,-9.233433
  20,361.5859,59.61399,366.4672,80.63797,484,23,80,366.4445,4.080429
  21,325.9974,167.4034,366.4672,62.819,1,23,65,366.2017,-13.94651
  22,259.1315,259.1315,366.4673,45,22,23,45,366.4673,-4.315837E-05
  23,167.4034,325.9974,366.4672,27.18103,43,23,25,366.2018,13.94655
  24,59.61399,361.5859,366.4672,9.36203,64,23,10,366.4445,-4.08044
  25,-59.61402,361.5859,366.4672,350.638,106,7,350,366.4445,4.080402
  26,-167.4034,325.9974,366.4672,332.819,85,7,335,366.2018,-13.94652
  27,-259.1315,259.1315,366.4673,315,64,7,315,366.4673,-4.315837E-05
  28,-325.9974,167.4034,366.4672,297.181,43,7,295,366.2018,13.94652
  29,-361.5859,59.61407,366.4672,279.3621,22,7,280,366.4445,-4.080389
  30,-361.5859,-59.61396,366.4672,260.638,253,15,260,366.4445,4.080473
  31,-325.9975,-167.4033,366.4672,242.819,274,15,245,366.2018,-13.94644
  32,-259.1315,-259.1314,366.4672,225,295,15,225,366.4672,8.631674E-05
  33,-167.4035,-325.9973,366.4672,207.181,316,15,205,366.2017,13.94671
  34,-59.61417,-361.5859,366.4673,189.3621,337,15,190,366.4445,-4.08022
  35,59.61385,-361.5859,366.4672,170.638,295,31,170,366.4445,4.080555
  36,167.4032,-325.9976,366.4673,152.819,274,31,155,366.2018,-13.94636
  37,259.1313,-259.1316,366.4673,135,253,31,135,366.4672,0.0001525879
  38,325.9973,-167.4036,366.4672,117.1811,232,31,115,366.2017,13.94673
  39,361.5859,-59.61429,366.4673,99.36206,211,31,100,366.4445,-4.080223
  40,465.1161,59.71749,468.9341,82.68365,463,22,85,468.5509,-18.95271
  41,440.9956,159.4428,468.934,70.12244,442,22,70,468.933,1.00213
  42,395.7639,251.5354,468.9341,57.56122,421,22,60,468.5093,-19.95404
  43,331.5865,331.5865,468.9341,45,400,22,45,468.9341,-4.315837E-05
  44,251.5353,395.764,468.9341,32.43878,379,22,30,468.5094,19.954
  45,159.4428,440.9956,468.934,19.87756,358,22,20,468.933,-1.002198
  46,59.71745,465.1161,468.9341,7.316345,337,22,5,468.5509,18.95265
  47,-59.71749,465.1161,468.9341,352.6837,379,6,355,468.5509,-18.9527
  48,-159.4428,440.9956,468.934,340.1224,400,6,340,468.933,1.00214
  49,-251.5354,395.764,468.9341,327.5612,421,6,330,468.5094,-19.95397
  50,-331.5865,331.5865,468.9341,315,442,6,315,468.9341,-4.315837E-05
  51,-395.764,251.5354,468.9341,302.4388,463,6,300,468.5094,19.95397
  52,-440.9956,159.4428,468.934,289.8776,484,6,290,468.933,-1.002173
  53,-465.1161,59.71749,468.9341,277.3163,1,6,275,468.551,18.95264
  54,-465.1161,-59.71745,468.9341,262.6837,232,14,265,468.5509,-18.95264
  55,-440.9956,-159.4428,468.934,250.1224,211,14,250,468.933,1.002183
  56,-395.764,-251.5353,468.9341,237.5612,190,14,240,468.5094,-19.95398
  57,-331.5865,-331.5864,468.934,225,169,14,225,468.934,-3.051758E-05
  58,-251.5354,-395.7639,468.9341,212.4388,148,14,210,468.5093,19.9541
  59,-159.4427,-440.9956,468.934,199.8775,127,14,200,468.933,-1.002159
  60,-59.7173,-465.1161,468.9341,187.3163,106,14,185,468.551,18.95254
  61,59.71775,-465.1161,468.9341,172.6837,64,30,175,468.551,-18.95298
  62,159.4432,-440.9955,468.934,160.1224,85,30,160,468.933,1.00173
  63,251.5358,-395.7637,468.9341,147.5612,106,30,150,468.5093,-19.95454
  64,331.5869,-331.5861,468.9341,134.9999,127,30,135,468.9341,-0.000629136
  65,395.7644,-251.5347,468.9341,122.4387,148,30,120,468.5094,19.95317
  66,440.9959,-159.442,468.9341,109.8774,169,30,110,468.933,-1.003105
  67,465.1162,-59.71656,468.9341,97.31622,190,30,95,468.551,18.95164
  68,568.2662,59.77055,571.4009,83.99567,169,22,85,571.313,-10.01545
  69,546.0061,168.4528,571.4009,72.85406,190,22,75,571.0002,-21.39615
  70,503.1643,270.7853,571.4009,61.71243,211,22,60,571.1457,17.07522
  71,441.3558,362.9105,571.4009,50.5708,232,22,50,571.3725,5.692516
  72,362.9105,441.3558,571.4009,39.4292,253,22,40,571.3724,-5.692536
  73,270.7852,503.1644,571.4009,28.28757,274,22,30,571.1458,-17.07529
  74,168.4527,546.0061,571.4009,17.14594,295,22,15,571.0002,21.39602
  75,59.77045,568.2663,571.4009,6.004333,316,22,5,571.3132,10.01531
  76,-59.77063,568.2662,571.4009,353.9957,358,6,355,571.3131,-10.01552
  77,-168.4529,546.0061,571.4009,342.8541,337,6,345,571.0002,-21.39624
  78,-270.7853,503.1643,571.4009,331.7124,316,6,330,571.1458,17.07519
  79,-362.9106,441.3558,571.4009,320.5708,295,6,320,571.3726,5.692371
  80,-441.3559,362.9103,571.4008,309.4292,274,6,310,571.3725,-5.692696
  81,-503.1644,270.7851,571.4009,298.2875,253,6,300,571.1457,-17.07545
  82,-546.0061,168.4527,571.4009,287.1459,232,6,285,571.0002,21.39596
  83,-568.2663,59.77035,571.4009,276.0043,211,6,275,571.3132,10.01516
  84,-568.2662,-59.77072,571.4009,263.9957,442,14,265,571.3131,-10.01558
  85,-546.0061,-168.453,571.4009,252.854,463,14,255,571.0002,-21.3963
  86,-503.1642,-270.7854,571.4009,241.7124,484,14,240,571.1457,17.07502
  87,-441.3557,-362.9106,571.4009,230.5708,1,14,230,571.3724,5.692255
  88,-362.9102,-441.356,571.4009,219.4291,22,14,220,571.3725,-5.692825
  89,-270.7849,-503.1646,571.4009,208.2875,43,14,210,571.1458,-17.07559
  90,-168.4524,-546.0062,571.4009,197.1459,64,14,195,571.0001,21.3958
  91,-59.77013,-568.2663,571.4009,186.0043,85,14,185,571.3133,10.01504
  92,59.77095,-568.2662,571.4009,173.9956,43,30,175,571.3131,-10.01586
  93,168.4532,-546.0059,571.4009,162.854,22,30,165,571.0001,-21.39661
  94,270.7856,-503.1642,571.4009,151.7124,1,30,150,571.1458,17.07476
  95,362.9108,-441.3556,571.4009,140.5708,484,30,140,571.3726,5.692024
  96,441.3562,-362.9102,571.4009,129.4291,463,30,130,571.3726,-5.693087
  97,503.1646,-270.7848,571.4009,118.2875,442,30,120,571.1457,-17.07586
  98,546.0063,-168.4523,571.4009,107.1459,421,30,105,571.0004,21.3955
  99,568.2663,-59.77004,571.4009,96.00427,400,30,95,571.3132,10.01476
  100,671.2089,59.80131,673.8677,84.90869,463,21,85,673.8668,-1.074043
  101,653.9648,162.5659,673.8677,76.0401,484,21,75,673.7567,12.23197
  102,621.0838,261.4434,673.8677,67.17148,1,21,65,673.3838,25.53321
  103,573.3521,354.0695,673.8677,58.30289,22,21,60,673.5721,-19.95714
  104,511.9109,438.2294,673.8677,49.4343,43,21,50,673.8348,-6.65324
  105,438.2294,511.9109,673.8678,40.5657,64,21,40,673.8349,6.653216
  106,354.0693,573.3521,673.8677,31.69708,85,21,30,673.5721,19.95703
  107,261.4433,621.0839,673.8677,22.82849,106,21,25,673.3838,-25.53329
  108,162.5658,653.9648,673.8677,13.9599,127,21,15,673.7567,-12.23206
  109,59.80119,671.2089,673.8677,5.091309,148,21,5,673.8668,1.073872
  110,-59.80141,671.2089,673.8677,354.9087,190,5,355,673.8668,-1.074115
  111,-162.566,653.9648,673.8677,346.0401,169,5,345,673.7567,12.23187
  112,-261.4435,621.0838,673.8677,337.1715,148,5,335,673.3839,25.53316
  113,-354.0695,573.3521,673.8678,328.3029,127,5,330,673.5722,-19.95714
  114,-438.2294,511.9109,673.8677,319.4343,106,5,320,673.835,-6.653255
  115,-511.9109,438.2294,673.8677,310.5657,85,5,310,673.835,6.653255
  116,-573.3521,354.0695,673.8678,301.6971,64,5,300,673.5722,19.95714
  117,-621.0838,261.4435,673.8677,292.8285,43,5,295,673.3839,-25.53316
  118,-653.9648,162.5661,673.8677,283.9599,22,5,285,673.7567,-12.23185
  119,-671.2089,59.80156,673.8677,275.0913,1,5,275,673.8668,1.074198
  120,-671.2089,-59.80103,673.8677,264.9087,232,13,265,673.8668,-1.073712
  121,-653.9651,-162.5656,673.8678,256.0401,253,13,255,673.7568,12.23236
  122,-621.084,-261.443,673.8678,247.1715,274,13,245,673.3839,25.53367
  123,-573.3523,-354.069,673.8677,238.3029,295,13,240,673.5723,-19.95665
  124,-511.9112,-438.2289,673.8677,229.4343,316,13,230,673.8348,-6.652697
  125,-438.2298,-511.9105,673.8677,220.5657,337,13,220,673.8348,6.653884
  126,-354.07,-573.3517,673.8678,211.6971,358,13,210,673.5722,19.95782
  127,-261.4439,-621.0836,673.8677,202.8286,379,13,205,673.3839,-25.53255
  128,-162.5666,-653.9648,673.8678,193.96,400,13,195,673.7568,-12.23125
  129,-59.80209,-671.2089,673.8677,185.0914,421,13,185,673.8669,1.074835
  130,59.80051,-671.2092,673.8678,174.9088,379,29,175,673.867,-1.073216
  131,162.565,-653.9651,673.8677,166.0402,358,29,165,673.7567,12.23283
  132,261.4425,-621.0842,673.8678,157.1716,337,29,155,673.3838,25.53411
  133,354.0687,-573.3526,673.8678,148.303,316,29,150,673.5723,-19.95624
  134,438.2286,-511.9116,673.8678,139.4344,295,29,140,673.835,-6.652239
  135,511.9102,-438.2302,673.8677,130.5658,274,29,130,673.8349,6.65417
  136,573.3514,-354.0705,673.8677,121.6972,253,29,120,673.572,19.95817
  137,621.0834,-261.4444,673.8678,112.8286,232,29,115,673.3839,-25.53222
  138,653.9645,-162.5671,673.8677,103.96,211,29,105,673.7567,-12.23088
  139,671.2089,-59.80262,673.8677,95.09143,190,29,95,673.8669,1.075159
  140,774.0263,59.82072,776.3345,85.58069,232,20,85,776.2946,7.867739
  141,757.8281,168.4986,776.3345,77.46454,253,20,75,775.6165,33.38316
  142,726.4492,273.8011,776.3346,69.34839,274,20,70,776.2844,-8.828622
  143,680.5177,373.6188,776.3346,61.23227,295,20,60,776.1549,16.69548
  144,620.954,465.9521,776.3345,53.11612,316,20,55,775.915,-25.52103
  145,548.9513,548.9514,776.3345,45,337,20,45,776.3344,-0.0001220703
  146,465.9521,620.9542,776.3346,36.88385,358,20,35,775.915,25.52089
  147,373.6187,680.5177,776.3345,28.76773,379,20,30,776.155,-16.69552
  148,273.801,726.4492,776.3346,20.65158,400,20,20,776.2844,8.828536
  149,168.4985,757.8282,776.3345,12.53546,421,20,15,775.6165,-33.38336
  150,59.82056,774.0264,776.3346,4.419312,442,20,5,776.2947,-7.867975
  151,-59.8209,774.0263,776.3345,355.5807,484,4,355,776.2946,7.867583
  152,-168.4988,757.8281,776.3345,347.4645,463,4,345,775.6165,33.38301
  153,-273.8013,726.4489,776.3345,339.3484,442,4,340,776.2841,-8.828909
  154,-373.619,680.5177,776.3346,331.2323,421,4,330,776.1551,16.69542
  155,-465.9522,620.954,776.3345,323.1161,400,4,325,775.915,-25.52112
  156,-548.9515,548.9512,776.3345,315,379,4,315,776.3344,-0.0001930101
  157,-620.9542,465.9519,776.3345,306.8839,358,4,305,775.9149,25.52081
  158,-680.5178,373.6186,776.3345,298.7677,337,4,300,776.155,-16.69575
  159,-726.4492,273.8008,776.3346,290.6516,316,4,290,776.2844,8.828314
  160,-757.8283,168.4983,776.3346,282.5355,295,4,285,775.6166,-33.38357
  161,-774.0264,59.82042,776.3346,274.4193,274,4,275,776.2947,-7.868166
  162,-774.0263,-59.82093,776.3345,265.5806,1,12,265,776.2946,7.867591
  163,-757.8281,-168.4988,776.3345,257.4645,22,12,255,775.6166,33.38301
  164,-726.4489,-273.8013,776.3345,249.3484,43,12,250,776.2842,-8.8289
  165,-680.5175,-373.619,776.3345,241.2322,64,12,240,776.1549,16.69514
  166,-620.9539,-465.9523,776.3345,233.1161,85,12,235,775.9149,-25.5213
  167,-548.9512,-548.9517,776.3346,225,106,12,225,776.3345,-0.0004315837
  168,-465.9518,-620.9543,776.3345,216.8838,127,12,215,775.915,25.52075
  169,-373.6187,-680.5177,776.3345,208.7677,148,12,210,776.155,-16.69552
  170,-273.8011,-726.4492,776.3346,200.6516,169,12,200,776.2845,8.828692
  171,-168.4987,-757.8281,776.3345,192.5355,190,12,195,775.6165,-33.38301
  172,-59.82104,-774.0263,776.3345,184.4193,211,12,185,776.2947,-7.867399
  173,59.82032,-774.0264,776.3345,175.5807,169,28,175,776.2947,7.868155
  174,168.4981,-757.8283,776.3345,167.4646,148,28,165,775.6165,33.38375
  175,273.8004,-726.4492,776.3345,159.3484,127,28,160,776.2841,-8.827944
  176,373.618,-680.5181,776.3345,151.2323,106,28,150,776.1551,16.69625
  177,465.9513,-620.9547,776.3345,143.1162,85,28,145,775.9149,-25.52008
  178,548.9506,-548.9523,776.3345,135.0001,64,28,135,776.3347,0.0010867
  179,620.9532,-465.9532,776.3345,126.884,43,28,125,775.915,25.52223
  180,680.517,-373.6201,776.3346,118.7679,22,28,120,776.1552,-16.69412
  181,726.4485,-273.8027,776.3346,110.6517,1,28,110,776.2845,8.830199
  182,757.8278,-168.5004,776.3345,102.5356,484,28,105,775.6165,-33.38151
  183,774.0262,-59.82277,776.3346,94.41946,463,28,95,776.2947,-7.865933
  184,876.7621,59.83376,878.8014,86.09595,463,19,85,878.6406,16.80877
  185,863.369,163.9683,878.8013,79.24664,484,19,80,878.7253,-11.55481
  186,837.6526,265.7625,878.8013,72.39731,1,19,70,878.0321,36.75907
  187,799.98,363.7632,878.8013,65.54797,22,19,65,878.761,8.404766
  188,750.8887,456.5717,878.8013,58.69864,43,19,60,878.5746,-19.95834
  189,691.0796,542.8634,878.8013,51.84933,64,19,50,878.3436,28.35982
  190,621.4064,621.4064,878.8013,45,85,19,45,878.8013,0
  191,542.8633,691.0796,878.8013,38.15067,106,19,40,878.3435,-28.36
  192,456.5717,750.8887,878.8013,31.30136,127,19,30,878.5746,19.95837
  193,363.7632,799.98,878.8013,24.45203,148,19,25,878.7612,-8.404687
  194,265.7624,837.6526,878.8013,17.60269,169,19,20,878.0321,-36.75912
  195,163.9683,863.369,878.8013,10.75336,190,19,10,878.7252,11.55475
  196,59.83372,876.7621,878.8014,3.904053,211,19,5,878.6406,-16.80887
  197,-59.8338,876.7621,878.8014,356.0959,253,3,355,878.6406,16.80876
  198,-163.9684,863.369,878.8013,349.2466,232,3,350,878.7253,-11.55483
  199,-265.7625,837.6526,878.8013,342.3973,211,3,340,878.0321,36.75904
  200,-363.7632,799.98,878.8013,335.548,190,3,335,878.7611,8.404794
  201,-456.5717,750.8887,878.8013,328.6987,169,3,330,878.5746,-19.95829
  202,-542.8634,691.0796,878.8013,321.8493,148,3,320,878.3436,28.35991
  203,-621.4064,621.4064,878.8013,315,127,3,315,878.8013,0
  204,-691.0796,542.8633,878.8013,308.1507,106,3,310,878.3435,-28.36
  205,-750.8887,456.5717,878.8013,301.3013,85,3,300,878.5746,19.95829
  206,-799.98,363.7631,878.8013,294.452,64,3,295,878.761,-8.404904
  207,-837.6527,265.7624,878.8013,287.6027,43,3,290,878.0322,-36.75918
  208,-863.369,163.9682,878.8013,280.7534,22,3,280,878.7252,11.55461
  209,-876.7621,59.83368,878.8014,273.9041,1,3,275,878.6406,-16.80898
  210,-876.7621,-59.83384,878.8014,266.0959,232,11,265,878.6406,16.80876
  211,-863.369,-163.9684,878.8013,259.2466,253,11,260,878.7252,-11.55484
  212,-837.6526,-265.7625,878.8013,252.3973,274,11,250,878.0322,36.75902
  213,-799.98,-363.7632,878.8013,245.548,295,11,245,878.761,8.404711
  214,-750.8887,-456.5718,878.8013,238.6986,316,11,240,878.5746,-19.95848
  215,-691.0795,-542.8634,878.8013,231.8493,337,11,230,878.3435,28.35978
  216,-621.4063,-621.4065,878.8013,225,358,11,225,878.8013,-0.0002589502
  217,-542.8634,-691.0796,878.8013,218.1507,379,11,220,878.3435,-28.35982
  218,-456.5719,-750.8887,878.8014,211.3014,400,11,210,878.5746,19.95861
  219,-363.7636,-799.9799,878.8013,204.4521,421,11,205,878.7611,-8.404276
  220,-265.7631,-837.6526,878.8014,197.6027,442,11,200,878.0323,-36.75839
  221,-163.9691,-863.3689,878.8013,190.7534,463,11,190,878.7253,11.55566
  222,-59.8348,-876.762,878.8014,183.9041,484,11,185,878.6407,-16.8077
  223,59.83272,-876.7621,878.8013,176.096,442,27,175,878.6405,16.8098
  224,163.9671,-863.3693,878.8013,169.2467,421,27,170,878.7253,-11.55358
  225,265.761,-837.6531,878.8013,162.3974,400,27,160,878.032,36.76052
  226,363.7617,-799.9807,878.8013,155.5481,379,27,155,878.7611,8.406323
  227,456.5702,-750.8897,878.8013,148.6988,358,27,150,878.5746,-19.95662
  228,542.8618,-691.0809,878.8013,141.8495,337,27,140,878.3434,28.36189
  229,621.4048,-621.408,878.8013,135.0002,316,27,135,878.8013,0.002071602
  230,691.0782,-542.8652,878.8013,128.1508,295,27,130,878.3436,-28.35774
  231,750.8875,-456.5739,878.8013,121.3015,274,27,120,878.5747,19.96072
  232,799.9789,-363.7658,878.8013,114.4522,253,27,115,878.7612,-8.402065
  233,837.6517,-265.7653,878.8013,107.6029,232,27,110,878.0322,-36.75626
  234,863.3685,-163.9715,878.8013,100.7536,211,27,100,878.7253,11.55775
  235,876.7618,-59.83715,878.8013,93.90427,190,27,95,878.6406,-16.80562
  236,979.4416,59.84292,981.2681,86.50363,169,18,85,980.9302,25.74875
  237,966.7106,168.3972,981.2681,80.11847,190,18,80,981.2661,2.028726
  238,941.9862,274.8622,981.2681,73.73328,211,18,75,981.0284,-21.69251
  239,905.5749,377.9171,981.2681,67.34811,232,18,65,980.4442,40.20329
  240,857.9285,476.2833,981.2681,60.96295,253,18,60,981.1296,16.49082
  241,799.6382,568.7406,981.2681,54.57776,274,18,55,981.2415,-7.231377
  242,731.4272,654.1418,981.2682,48.19257,295,18,50,980.7801,-30.94946
  243,654.1416,731.4272,981.2681,41.8074,316,18,40,980.7799,30.94912
  244,568.7405,799.6384,981.2682,35.42224,337,18,35,981.2416,7.231242
  245,476.2832,857.9285,981.2681,29.03705,358,18,30,981.1295,-16.49088
  246,377.9169,905.575,981.2682,22.65189,379,18,25,980.4443,-40.20349
  247,274.862,941.9862,981.2681,16.26672,400,18,15,981.0283,21.69227
  248,168.397,966.7108,981.2682,9.881531,421,18,10,981.2662,-2.028947
  249,59.84273,979.4416,981.2681,3.496368,442,18,5,980.9302,-25.74901
  250,-59.84316,979.4416,981.2681,356.5036,484,2,355,980.9302,25.74855
  251,-168.3974,966.7106,981.2681,350.1184,463,2,350,981.2661,2.028486
  252,-274.8624,941.9861,981.2681,343.7333,442,2,345,981.0283,-21.69278
  253,-377.9174,905.5748,981.2682,337.3481,421,2,335,980.4443,40.20311
  254,-476.2836,857.9283,981.2681,330.9629,400,2,330,981.1296,16.49055
  255,-568.7408,799.6381,981.2681,324.5778,379,2,325,981.2415,-7.231682
  256,-654.142,731.4269,981.2681,318.1926,358,2,320,980.7799,-30.94959
  257,-731.4275,654.1415,981.2681,311.8074,337,2,310,980.7801,30.9489
  258,-799.6385,568.7402,981.2681,305.4222,316,2,305,981.2415,7.230937
  259,-857.9286,476.283,981.2681,299.037,295,2,300,981.1295,-16.4912
  260,-905.575,377.9167,981.2681,292.6519,274,2,295,980.4442,-40.20376
  261,-941.9863,274.8617,981.2681,286.2667,253,2,285,981.0283,21.69196
  262,-966.7108,168.3967,981.2681,279.8815,232,2,280,981.2661,-2.029318
  263,-979.4416,59.84245,981.2681,273.4963,211,2,275,980.9302,-25.74936
  264,-979.4416,-59.84332,981.2681,266.5036,442,10,265,980.9302,25.74843
  265,-966.7106,-168.3976,981.2681,260.1184,463,10,260,981.2661,2.028355
  266,-941.986,-274.8626,981.2681,253.7332,484,10,255,981.0283,-21.69292
  267,-905.5747,-377.9175,981.2682,247.3481,1,10,245,980.4442,40.20286
  268,-857.9282,-476.2837,981.2681,240.9629,22,10,240,981.1295,16.4903
  269,-799.6379,-568.741,981.2681,234.5777,43,10,235,981.2416,-7.231987
  270,-731.4269,-654.1422,981.2682,228.1926,64,10,230,980.78,-30.9499
  271,-654.1413,-731.4276,981.2681,221.8074,85,10,220,980.78,30.9489
  272,-568.7401,-799.6385,981.2681,215.4222,106,10,215,981.2415,7.230937
  273,-476.283,-857.9286,981.2681,209.037,127,10,210,981.1295,-16.49098
  274,-377.9169,-905.5749,981.2681,202.6519,148,10,205,980.4442,-40.20335
  275,-274.8623,-941.9862,981.2682,196.2667,169,10,195,981.0285,21.6927
  276,-168.3975,-966.7106,981.2681,189.8816,190,10,190,981.2661,-2.028335
  277,-59.84345,-979.4415,981.268,183.4964,211,10,185,980.9302,-25.7482
  278,59.84254,-979.4416,981.2681,176.5037,169,26,175,980.9302,25.74912
  279,168.3966,-966.7108,981.2681,170.1185,148,26,170,981.2661,2.029273
  280,274.8614,-941.9863,981.2681,163.7333,127,26,165,981.0283,-21.69171
  281,377.9161,-905.5753,981.2681,157.3481,106,26,155,980.4442,40.2042
  282,476.2822,-857.9292,981.2682,150.963,85,26,150,981.1296,16.492
  283,568.7394,-799.639,981.2681,144.5779,64,26,145,981.2415,-7.230022
  284,654.1405,-731.4282,981.2681,138.1927,43,26,140,980.7799,-30.94778
  285,731.426,-654.1431,981.2681,131.8075,22,26,130,980.7799,30.95098
  286,799.637,-568.7423,981.2681,125.4224,1,26,125,981.2416,7.233342
  287,857.9272,-476.2853,981.2681,119.0372,484,26,120,981.1295,-16.4886
  288,905.5739,-377.9194,981.2681,112.652,463,26,115,980.4443,-40.20095
  289,941.9854,-274.8648,981.2681,106.2669,442,26,105,981.0283,21.69506
  290,966.7101,-168.4001,981.2681,99.88171,421,26,100,981.2661,-2.026007
  291,979.4415,-59.8461,981.2682,93.49655,400,26,95,980.9305,-25.74587
  292,1082.081,59.84962,1083.735,86.83423,337,17,85,1083.18,34.6877
  293,1071.14,164.7434,1083.735,81.25632,358,17,80,1083.474,23.76096
  294,1050.055,268.077,1083.735,75.67841,379,17,75,1083.659,12.83184
  295,1019.026,368.8718,1083.735,70.10052,400,17,70,1083.733,1.901407
  296,978.3474,466.1736,1083.735,64.52264,421,17,65,1083.697,-9.029231
  297,928.4033,559.0604,1083.735,58.94473,442,17,60,1083.551,-19.95886
  298,869.6674,646.6531,1083.735,53.36685,463,17,55,1083.295,-30.88656
  299,802.6954,728.1218,1083.735,47.78894,484,17,50,1082.928,-41.81108
  300,728.1218,802.6954,1083.735,42.21106,1,17,40,1082.928,41.81104
  301,646.653,869.6674,1083.735,36.63315,22,17,35,1083.295,30.88646
  302,559.0604,928.4033,1083.735,31.05527,43,17,30,1083.551,19.95894
  303,466.1735,978.3474,1083.735,25.47736,64,17,25,1083.697,9.0292
  304,368.8718,1019.026,1083.735,19.89948,85,17,20,1083.733,-1.901436
  305,268.0769,1050.055,1083.735,14.32159,106,17,15,1083.659,-12.8319
  306,164.7434,1071.14,1083.735,8.743683,127,17,10,1083.474,-23.76101
  307,59.84964,1082.081,1083.735,3.165802,148,17,5,1083.18,-34.68774
  308,-59.84961,1082.081,1083.735,356.8342,190,1,355,1083.18,34.68774
  309,-164.7433,1071.14,1083.735,351.2563,169,1,350,1083.474,23.76102
  310,-268.0769,1050.055,1083.735,345.6784,148,1,345,1083.659,12.8319
  311,-368.8718,1019.026,1083.735,340.1005,127,1,340,1083.733,1.901444
  312,-466.1735,978.3474,1083.735,334.5226,106,1,335,1083.697,-9.029065
  313,-559.0605,928.4033,1083.735,328.9447,85,1,330,1083.551,-19.95887
  314,-646.6533,869.6671,1083.735,323.3668,64,1,325,1083.295,-30.88682
  315,-728.1221,802.6951,1083.735,317.7889,43,1,320,1082.928,-41.81142
  316,-802.6956,728.1215,1083.735,312.211,22,1,310,1082.928,41.81064
  317,-869.6675,646.6526,1083.735,306.6331,1,1,305,1083.295,30.88607
  318,-928.4037,559.0599,1083.735,301.0552,484,1,300,1083.551,19.95812
  319,-978.3477,466.1728,1083.735,295.4773,463,1,295,1083.697,9.028299
  320,-1019.027,368.871,1083.735,289.8994,442,1,290,1083.733,-1.902357
  321,-1050.056,268.0759,1083.735,284.3215,421,1,285,1083.659,-12.83305
  322,-1071.14,164.7422,1083.735,278.7436,400,1,280,1083.474,-23.76228
  323,-1082.081,59.8483,1083.735,273.1657,379,1,275,1083.179,-34.68917
  324,-1082.081,-59.85081,1083.735,266.8341,106,9,265,1083.18,34.68658
  325,-1071.14,-164.7447,1083.735,261.2562,127,9,260,1083.475,23.7597
  326,-1050.055,-268.0783,1083.735,255.6783,148,9,255,1083.659,12.83048
  327,-1019.026,-368.8733,1083.735,250.1004,169,9,250,1083.733,1.899908
  328,-978.3467,-466.175,1083.735,244.5225,190,9,245,1083.697,-9.03089
  329,-928.4024,-559.0621,1083.735,238.9446,211,9,240,1083.551,-19.96083
  330,-869.6661,-646.6547,1083.735,233.3667,232,9,235,1083.295,-30.88856
  331,-802.694,-728.1235,1083.735,227.7888,253,9,230,1082.928,-41.81324
  332,-728.1204,-802.6968,1083.735,222.2109,274,9,220,1082.928,41.80925
  333,-646.6513,-869.6686,1083.735,216.633,295,9,215,1083.295,30.8845
  334,-559.0587,-928.4044,1083.735,211.0551,316,9,210,1083.551,19.95696
  335,-466.1716,-978.3483,1083.735,205.4773,337,9,205,1083.697,9.027206
  336,-368.8701,-1019.027,1083.735,199.8994,358,9,200,1083.733,-1.903259
  337,-268.0752,-1050.056,1083.735,194.3215,379,9,195,1083.659,-12.83359
  338,-164.7417,-1071.14,1083.735,188.7436,400,9,190,1083.475,-23.76258
  339,-59.84813,-1082.081,1083.735,183.1657,421,9,185,1083.18,-34.68916
  340,59.85125,-1082.081,1083.735,176.8341,379,25,175,1083.18,34.68605
  341,164.7448,-1071.14,1083.735,171.2562,358,25,170,1083.474,23.75943
  342,268.0782,-1050.055,1083.735,165.6783,337,25,165,1083.659,12.83048
  343,368.873,-1019.026,1083.735,160.1005,316,25,160,1083.733,1.900143
  344,466.1745,-978.3469,1083.735,154.5226,295,25,155,1083.697,-9.030399
  345,559.0612,-928.4028,1083.735,148.9447,274,25,150,1083.551,-19.95991
  346,646.6537,-869.6667,1083.735,143.3668,253,25,145,1083.295,-30.88753
  347,728.1225,-802.6948,1083.735,137.7889,232,25,140,1082.928,-41.81203
  348,802.6957,-728.1215,1083.735,132.211,211,25,130,1082.928,41.81042
  349,869.6675,-646.6527,1083.735,126.6331,190,25,125,1083.295,30.88595
  350,928.4035,-559.0602,1083.735,121.0552,169,25,120,1083.551,19.95837
  351,978.3475,-466.1734,1083.735,115.4774,148,25,115,1083.697,9.028848
  352,1019.026,-368.8718,1083.735,109.8995,127,25,110,1083.733,-1.901694
  353,1050.055,-268.0771,1083.735,104.3216,106,25,105,1083.659,-12.83204
  354,1071.14,-164.7436,1083.735,98.74371,85,25,100,1083.475,-23.761
  355,1082.081,-59.85001,1083.735,93.1658,64,25,95,1083.179,-34.68762
  356,1184.691,59.85466,1186.202,87.10767,463,16,85,1185.399,43.62569
  357,1175.097,161.9329,1186.202,82.15384,484,16,80,1185.363,44.58059
  358,1156.724,262.8014,1186.202,77.19998,1,16,75,1185.327,45.53546
  359,1129.709,361.7066,1186.202,72.24615,22,16,70,1185.29,46.4903
  360,1094.255,457.9095,1186.202,67.2923,43,16,65,1185.253,47.44516
  361,1050.625,550.6914,1186.202,62.33844,64,16,60,1185.214,48.39989
  362,999.1467,639.3592,1186.202,57.38461,85,16,55,1185.174,49.35464
  363,940.2039,723.2504,1186.202,52.43079,106,16,50,1185.134,50.3094
  364,874.2368,801.7384,1186.202,47.47693,127,16,45,1185.093,51.26408
  365,801.7384,874.2368,1186.202,42.52307,148,16,45,1185.093,-51.26408
  366,723.2504,940.2039,1186.202,37.56924,169,16,40,1185.134,-50.30945
  367,639.3592,999.1469,1186.202,32.61539,190,16,35,1185.175,-49.35474
  368,550.6913,1050.625,1186.202,27.66153,211,16,30,1185.214,-48.39995
  369,457.9093,1094.255,1186.202,22.7077,232,16,25,1185.253,-47.44532
  370,361.7064,1129.709,1186.202,17.75385,253,16,20,1185.29,-46.49057
  371,262.8011,1156.724,1186.202,12.79999,274,16,15,1185.328,-45.53578
  372,161.9326,1175.097,1186.202,7.846161,295,16,10,1185.364,-44.58102
  373,59.85427,1184.691,1186.202,2.892303,316,16,5,1185.399,-43.62616
  374,-59.85508,1184.691,1186.202,357.1077,358,0,355,1185.399,43.6253
  375,-161.9334,1175.097,1186.202,352.1538,337,0,350,1185.364,44.58015
  376,-262.8019,1156.724,1186.202,347.2,316,0,345,1185.328,45.53495
  377,-361.7072,1129.709,1186.202,342.2461,295,0,340,1185.29,46.48959
  378,-457.9101,1094.255,1186.202,337.2923,274,0,335,1185.253,47.44456
  379,-550.692,1050.625,1186.202,332.3384,253,0,330,1185.214,48.39928
  380,-639.3597,999.1465,1186.202,327.3846,232,0,325,1185.175,49.35413
  381,-723.2508,940.2036,1186.202,322.4307,211,0,320,1185.134,50.30898
  382,-801.7388,874.2363,1186.202,317.4769,190,0,315,1185.093,51.26352
  383,-874.2371,801.7382,1186.202,312.5231,169,0,315,1185.093,-51.26447
  384,-940.204,723.2501,1186.202,307.5692,148,0,310,1185.134,-50.3098
  385,-999.1469,639.3589,1186.202,302.6154,127,0,305,1185.174,-49.35494
  386,-1050.625,550.6912,1186.202,297.6616,106,0,300,1185.214,-48.40016
  387,-1094.255,457.9094,1186.202,292.7077,85,0,295,1185.253,-47.44529
  388,-1129.709,361.7066,1186.202,287.7538,64,0,290,1185.29,-46.49041
  389,-1156.724,262.8015,1186.202,282.8,43,0,285,1185.327,-45.53546
  390,-1175.097,161.9331,1186.202,277.8462,22,0,280,1185.364,-44.58054
  391,-1184.691,59.85493,1186.202,272.8923,1,0,275,1185.399,-43.62559
  392,-1184.691,-59.85429,1186.202,267.1077,232,8,265,1185.399,43.62614
  393,-1175.097,-161.9325,1186.202,262.1539,253,8,260,1185.364,44.58112
  394,-1156.724,-262.8009,1186.202,257.2,274,8,255,1185.327,45.53605
  395,-1129.709,-361.7059,1186.202,252.2462,295,8,250,1185.29,46.49099
  396,-1094.255,-457.9088,1186.202,247.2923,316,8,245,1185.252,47.44579
  397,-1050.626,-550.6907,1186.202,242.3385,337,8,240,1185.214,48.40066
  398,-999.1472,-639.3585,1186.202,237.3846,358,8,235,1185.174,49.35547
  399,-940.2045,-723.2498,1186.202,232.4308,379,8,230,1185.134,50.31027
  400,-874.2375,-801.7378,1186.202,227.477,400,8,225,1185.094,51.2649
  401,-801.7392,-874.2359,1186.202,222.5231,421,8,225,1185.093,-51.263
  402,-723.2514,-940.2031,1186.202,217.5693,442,8,220,1185.135,-50.30802
  403,-639.3601,-999.1462,1186.202,212.6154,463,8,215,1185.175,-49.35345
  404,-550.6921,-1050.625,1186.202,207.6616,484,8,210,1185.214,-48.39895
  405,-457.91,-1094.255,1186.202,202.7077,1,8,205,1185.253,-47.44442
  406,-361.7069,-1129.709,1186.202,197.7539,22,8,200,1185.291,-46.48993
  407,-262.8016,-1156.724,1186.202,192.8,43,8,195,1185.327,-45.53519
  408,-161.9329,-1175.097,1186.202,187.8462,64,8,190,1185.364,-44.58056
  409,-59.85445,-1184.691,1186.202,182.8923,85,8,185,1185.399,-43.62587
  410,59.85505,-1184.691,1186.202,177.1077,43,24,175,1185.399,43.6253
  411,161.9335,-1175.097,1186.202,172.1538,22,24,170,1185.364,44.57995
  412,262.8022,-1156.724,1186.202,167.2,1,24,165,1185.328,45.53469
  413,361.7075,-1129.709,1186.202,162.2461,484,24,160,1185.29,46.48924
  414,457.9106,-1094.254,1186.202,157.2922,463,24,155,1185.253,47.4439
  415,550.6926,-1050.625,1186.202,152.3384,442,24,150,1185.214,48.39835
  416,639.3605,-999.1459,1186.202,147.3845,421,24,145,1185.175,49.35293
  417,723.2518,-940.2028,1186.202,142.4307,400,24,140,1185.134,50.30759
  418,801.7399,-874.2355,1186.202,137.4768,379,24,135,1185.094,51.26196
  419,874.2383,-801.7368,1186.202,132.523,358,24,135,1185.093,-51.26645
  420,940.2053,-723.2485,1186.202,127.5691,337,24,130,1185.134,-50.31209
  421,999.1482,-639.357,1186.202,122.6153,316,24,125,1185.174,-49.35747
  422,1050.627,-550.689,1186.202,117.6614,295,24,120,1185.214,-48.40289
  423,1094.256,-457.9067,1186.202,112.7076,274,24,115,1185.253,-47.44828
  424,1129.71,-361.7035,1186.202,107.7537,253,24,110,1185.29,-46.49385
  425,1156.724,-262.7981,1186.202,102.7998,232,24,105,1185.327,-45.53916
  426,1175.097,-161.9294,1186.202,97.84598,211,24,100,1185.364,-44.58454
  427,1184.691,-59.85088,1186.202,92.89215,190,24,95,1185.399,-43.62983`;
  return baseData;
}

function loadPathData()
{
  var pathData = `PathId,Host,Universe,ChannelStart,Fixture0,Fixture1,DistanceFt
  0,192.168.0.220,1,1,391,390,8.544001
  0,192.168.0.220,1,1,390,389,8.543998
  0,192.168.0.220,1,1,389,388,8.543998
  0,192.168.0.220,1,1,388,387,8.543996
  0,192.168.0.220,1,1,387,386,8.544003
  0,192.168.0.220,1,1,386,385,8.543999
  0,192.168.0.220,1,1,385,384,8.543996
  0,192.168.0.220,1,1,384,383,8.544004
  0,192.168.0.220,1,1,383,382,8.543991
  0,192.168.0.220,1,1,382,381,8.544015
  0,192.168.0.220,1,1,381,380,8.543994
  0,192.168.0.220,1,1,380,379,8.543998
  0,192.168.0.220,1,1,379,378,8.54401
  0,192.168.0.220,1,1,378,377,8.544002
  0,192.168.0.220,1,1,377,376,8.544019
  0,192.168.0.220,1,1,376,375,8.544009
  0,192.168.0.220,1,1,375,374,8.544011
  1,192.168.0.220,2,379,323,322,8.788572
  1,192.168.0.220,2,379,322,321,8.788569
  1,192.168.0.220,2,379,321,320,8.788577
  1,192.168.0.220,2,379,320,319,8.788568
  1,192.168.0.220,2,379,319,318,8.788566
  1,192.168.0.220,2,379,318,317,8.788581
  1,192.168.0.220,2,379,317,316,8.788566
  1,192.168.0.220,2,379,316,315,8.788571
  1,192.168.0.220,2,379,315,314,8.788565
  1,192.168.0.220,2,379,314,313,8.78858
  1,192.168.0.220,2,379,313,312,8.788567
  1,192.168.0.220,2,379,312,311,8.788561
  1,192.168.0.220,2,379,311,310,8.788564
  1,192.168.0.220,2,379,310,309,8.78856
  1,192.168.0.220,2,379,309,308,8.788561
  2,192.168.0.220,3,211,263,262,9.108179
  2,192.168.0.220,3,211,262,261,9.108183
  2,192.168.0.220,3,211,261,260,9.108181
  2,192.168.0.220,3,211,260,259,9.108181
  2,192.168.0.220,3,211,259,258,9.108173
  2,192.168.0.220,3,211,258,257,9.108187
  2,192.168.0.220,3,211,257,256,9.10818
  2,192.168.0.220,3,211,256,255,9.108185
  2,192.168.0.220,3,211,255,254,9.108178
  2,192.168.0.220,3,211,254,253,9.108181
  2,192.168.0.220,3,211,253,252,9.10818
  2,192.168.0.220,3,211,252,251,9.108183
  2,192.168.0.220,3,211,251,250,9.10818
  3,192.168.0.220,4,1,209,208,8.749353
  3,192.168.0.220,4,1,208,207,8.749354
  3,192.168.0.220,4,1,207,206,8.749347
  3,192.168.0.220,4,1,206,205,8.749359
  3,192.168.0.220,4,1,205,204,8.749349
  3,192.168.0.220,4,1,204,203,8.749351
  3,192.168.0.220,4,1,203,202,8.749346
  3,192.168.0.220,4,1,202,201,8.749354
  3,192.168.0.220,4,1,201,200,8.749347
  3,192.168.0.220,4,1,200,199,8.749352
  3,192.168.0.220,4,1,199,198,8.749352
  3,192.168.0.220,4,1,198,197,8.749352
  4,192.168.0.221,1,274,161,160,9.156531
  4,192.168.0.221,1,274,160,159,9.156529
  4,192.168.0.221,1,274,159,158,9.156537
  4,192.168.0.221,1,274,158,157,9.156529
  4,192.168.0.221,1,274,157,156,9.15653
  4,192.168.0.221,1,274,156,155,9.156532
  4,192.168.0.221,1,274,155,154,9.156533
  4,192.168.0.221,1,274,154,153,9.156518
  4,192.168.0.221,1,274,153,152,9.156536
  4,192.168.0.221,1,274,152,151,9.156529
  5,192.168.0.221,2,1,119,118,8.683434
  5,192.168.0.221,2,1,118,117,8.683434
  5,192.168.0.221,2,1,117,116,8.683437
  5,192.168.0.221,2,1,116,115,8.683437
  5,192.168.0.221,2,1,115,114,8.683433
  5,192.168.0.221,2,1,114,113,8.683437
  5,192.168.0.221,2,1,113,112,8.683437
  5,192.168.0.221,2,1,112,111,8.683438
  5,192.168.0.221,2,1,111,110,8.683441
  6,192.168.0.221,3,211,83,82,9.244874
  6,192.168.0.221,3,211,82,81,9.244866
  6,192.168.0.221,3,211,81,80,9.24487
  6,192.168.0.221,3,211,80,79,9.24487
  6,192.168.0.221,3,211,79,78,9.244871
  6,192.168.0.221,3,211,78,77,9.24487
  6,192.168.0.221,3,211,77,76,9.24487
  6,192.168.0.221,3,211,76,47,8.595836
  6,192.168.0.221,3,211,47,48,8.550068
  6,192.168.0.221,3,211,48,49,8.550067
  6,192.168.0.221,3,211,49,50,8.550067
  6,192.168.0.221,3,211,50,51,8.550067
  6,192.168.0.221,3,211,51,52,8.550067
  6,192.168.0.221,3,211,52,53,8.550068
  7,192.168.0.221,4,22,29,28,9.459371
  7,192.168.0.221,4,22,28,27,9.459373
  7,192.168.0.221,4,22,27,26,9.459373
  7,192.168.0.221,4,22,26,25,9.459373
  7,192.168.0.221,4,22,25,5,8.695642
  7,192.168.0.221,4,22,5,6,6.124434
  7,192.168.0.221,4,22,6,7,6.124435
  7,192.168.0.221,4,22,7,8,6.124435
  7,192.168.0.221,4,22,8,9,6.124434
  8,192.168.0.222,1,232,392,393,8.543999
  8,192.168.0.222,1,232,393,394,8.543998
  8,192.168.0.222,1,232,394,395,8.543998
  8,192.168.0.222,1,232,395,396,8.544005
  8,192.168.0.222,1,232,396,397,8.543997
  8,192.168.0.222,1,232,397,398,8.543998
  8,192.168.0.222,1,232,398,399,8.543999
  8,192.168.0.222,1,232,399,400,8.544004
  8,192.168.0.222,1,232,400,401,8.543991
  8,192.168.0.222,1,232,401,402,8.544003
  8,192.168.0.222,1,232,402,403,8.544017
  8,192.168.0.222,1,232,403,404,8.544027
  8,192.168.0.222,1,232,404,405,8.544024
  8,192.168.0.222,1,232,405,406,8.54403
  8,192.168.0.222,1,232,406,407,8.544015
  8,192.168.0.222,1,232,407,408,8.544024
  8,192.168.0.222,1,232,408,409,8.544022
  9,192.168.0.222,2,106,324,325,8.788571
  9,192.168.0.222,2,106,325,326,8.788569
  9,192.168.0.222,2,106,326,327,8.788572
  9,192.168.0.222,2,106,327,328,8.788574
  9,192.168.0.222,2,106,328,329,8.788575
  9,192.168.0.222,2,106,329,330,8.788565
  9,192.168.0.222,2,106,330,331,8.788573
  9,192.168.0.222,2,106,331,332,8.788563
  9,192.168.0.222,2,106,332,333,8.788577
  9,192.168.0.222,2,106,333,334,8.788547
  9,192.168.0.222,2,106,334,335,8.78856
  9,192.168.0.222,2,106,335,336,8.788548
  9,192.168.0.222,2,106,336,337,8.78855
  9,192.168.0.222,2,106,337,338,8.78855
  9,192.168.0.222,2,106,338,339,8.788547
  10,192.168.0.222,3,442,264,265,9.108182
  10,192.168.0.222,3,442,265,266,9.108183
  10,192.168.0.222,3,442,266,267,9.108175
  10,192.168.0.222,3,442,267,268,9.108184
  10,192.168.0.222,3,442,268,269,9.108184
  10,192.168.0.222,3,442,269,270,9.108179
  10,192.168.0.222,3,442,270,271,9.10818
  10,192.168.0.222,3,442,271,272,9.108177
  10,192.168.0.222,3,442,272,273,9.108163
  10,192.168.0.222,3,442,273,274,9.108165
  10,192.168.0.222,3,442,274,275,9.108157
  10,192.168.0.222,3,442,275,276,9.108162
  10,192.168.0.222,3,442,276,277,9.108162
  11,192.168.0.222,4,232,210,211,8.749352
  11,192.168.0.222,4,232,211,212,8.749352
  11,192.168.0.222,4,232,212,213,8.749349
  11,192.168.0.222,4,232,213,214,8.749355
  11,192.168.0.222,4,232,214,215,8.749352
  11,192.168.0.222,4,232,215,216,8.749355
  11,192.168.0.222,4,232,216,217,8.74933
  11,192.168.0.222,4,232,217,218,8.749342
  11,192.168.0.222,4,232,218,219,8.749331
  11,192.168.0.222,4,232,219,220,8.749335
  11,192.168.0.222,4,232,220,221,8.749334
  11,192.168.0.222,4,232,221,222,8.749335
  12,192.168.0.223,1,1,162,163,9.156529
  12,192.168.0.223,1,1,163,164,9.156533
  12,192.168.0.223,1,1,164,165,9.156531
  12,192.168.0.223,1,1,165,166,9.156526
  12,192.168.0.223,1,1,166,167,9.156538
  12,192.168.0.223,1,1,167,168,9.156531
  12,192.168.0.223,1,1,168,169,9.156511
  12,192.168.0.223,1,1,169,170,9.156521
  12,192.168.0.223,1,1,170,171,9.156515
  12,192.168.0.223,1,1,171,172,9.156515
  13,192.168.0.223,2,232,120,121,8.683434
  13,192.168.0.223,2,232,121,122,8.683434
  13,192.168.0.223,2,232,122,123,8.683436
  13,192.168.0.223,2,232,123,124,8.683435
  13,192.168.0.223,2,232,124,125,8.683438
  13,192.168.0.223,2,232,125,126,8.683431
  13,192.168.0.223,2,232,126,127,8.683442
  13,192.168.0.223,2,232,127,128,8.683434
  13,192.168.0.223,2,232,128,129,8.683434
  14,192.168.0.223,3,442,84,85,9.244868
  14,192.168.0.223,3,442,85,86,9.244873
  14,192.168.0.223,3,442,86,87,9.24487
  14,192.168.0.223,3,442,87,88,9.244882
  14,192.168.0.223,3,442,88,89,9.244872
  14,192.168.0.223,3,442,89,90,9.244868
  14,192.168.0.223,3,442,90,91,9.24487
  14,192.168.0.223,3,442,91,60,8.595841
  14,192.168.0.223,3,442,60,59,8.550079
  14,192.168.0.223,3,442,59,58,8.550074
  14,192.168.0.223,3,442,58,57,8.550067
  14,192.168.0.223,3,442,57,56,8.550067
  14,192.168.0.223,3,442,56,55,8.550067
  14,192.168.0.223,3,442,55,54,8.550069
  15,192.168.0.223,4,253,30,31,9.459369
  15,192.168.0.223,4,253,31,32,9.459373
  15,192.168.0.223,4,253,32,33,9.45937
  15,192.168.0.223,4,253,33,34,9.459373
  15,192.168.0.223,4,253,34,14,8.695638
  15,192.168.0.223,4,253,14,13,6.12444
  15,192.168.0.223,4,253,13,12,6.124435
  15,192.168.0.223,4,253,12,11,6.124435
  15,192.168.0.223,4,253,11,10,6.124434
  16,192.168.0.224,1,463,356,357,8.544007
  16,192.168.0.224,1,463,357,358,8.544005
  16,192.168.0.224,1,463,358,359,8.544006
  16,192.168.0.224,1,463,359,360,8.544008
  16,192.168.0.224,1,463,360,361,8.544005
  16,192.168.0.224,1,463,361,362,8.544004
  16,192.168.0.224,1,463,362,363,8.544002
  16,192.168.0.224,1,463,363,364,8.544007
  16,192.168.0.224,1,463,364,365,8.544009
  16,192.168.0.224,1,463,365,366,8.544007
  16,192.168.0.224,1,463,366,367,8.544008
  16,192.168.0.224,1,463,367,368,8.54401
  16,192.168.0.224,1,463,368,369,8.544016
  16,192.168.0.224,1,463,369,370,8.544008
  16,192.168.0.224,1,463,370,371,8.544012
  16,192.168.0.224,1,463,371,372,8.544011
  16,192.168.0.224,1,463,372,373,8.54401
  17,192.168.0.224,2,337,292,293,8.788563
  17,192.168.0.224,2,337,293,294,8.788561
  17,192.168.0.224,2,337,294,295,8.78856
  17,192.168.0.224,2,337,295,296,8.788568
  17,192.168.0.224,2,337,296,297,8.788555
  17,192.168.0.224,2,337,297,298,8.788558
  17,192.168.0.224,2,337,298,299,8.78856
  17,192.168.0.224,2,337,299,300,8.788571
  17,192.168.0.224,2,337,300,301,8.788568
  17,192.168.0.224,2,337,301,302,8.788548
  17,192.168.0.224,2,337,302,303,8.788564
  17,192.168.0.224,2,337,303,304,8.788559
  17,192.168.0.224,2,337,304,305,8.788562
  17,192.168.0.224,2,337,305,306,8.78856
  17,192.168.0.224,2,337,306,307,8.788561
  18,192.168.0.224,3,169,236,237,9.10818
  18,192.168.0.224,3,169,237,238,9.108181
  18,192.168.0.224,3,169,238,239,9.108179
  18,192.168.0.224,3,169,239,240,9.108175
  18,192.168.0.224,3,169,240,241,9.108187
  18,192.168.0.224,3,169,241,242,9.108184
  18,192.168.0.224,3,169,242,243,9.10818
  18,192.168.0.224,3,169,243,244,9.10818
  18,192.168.0.224,3,169,244,245,9.10818
  18,192.168.0.224,3,169,245,246,9.108187
  18,192.168.0.224,3,169,246,247,9.108178
  18,192.168.0.224,3,169,247,248,9.10818
  18,192.168.0.224,3,169,248,249,9.10818
  19,192.168.0.224,4,463,184,185,8.749352
  19,192.168.0.224,4,463,185,186,8.749352
  19,192.168.0.224,4,463,186,187,8.749352
  19,192.168.0.224,4,463,187,188,8.749351
  19,192.168.0.224,4,463,188,189,8.749354
  19,192.168.0.224,4,463,189,190,8.749346
  19,192.168.0.224,4,463,190,191,8.749351
  19,192.168.0.224,4,463,191,192,8.749349
  19,192.168.0.224,4,463,192,193,8.749347
  19,192.168.0.224,4,463,193,194,8.749356
  19,192.168.0.224,4,463,194,195,8.749352
  19,192.168.0.224,4,463,195,196,8.749354
  20,192.168.0.225,1,232,140,141,9.156532
  20,192.168.0.225,1,232,141,142,9.156524
  20,192.168.0.225,1,232,142,143,9.156535
  20,192.168.0.225,1,232,143,144,9.15653
  20,192.168.0.225,1,232,144,145,9.156533
  20,192.168.0.225,1,232,145,146,9.156532
  20,192.168.0.225,1,232,146,147,9.156529
  20,192.168.0.225,1,232,147,148,9.156531
  20,192.168.0.225,1,232,148,149,9.156531
  20,192.168.0.225,1,232,149,150,9.156532
  21,192.168.0.225,2,463,100,101,8.683439
  21,192.168.0.225,2,463,101,102,8.683442
  21,192.168.0.225,2,463,102,103,8.68344
  21,192.168.0.225,2,463,103,104,8.683434
  21,192.168.0.225,2,463,104,105,8.683446
  21,192.168.0.225,2,463,105,106,8.683445
  21,192.168.0.225,2,463,106,107,8.683436
  21,192.168.0.225,2,463,107,108,8.683438
  21,192.168.0.225,2,463,108,109,8.683443
  22,192.168.0.225,3,169,68,69,9.244868
  22,192.168.0.225,3,169,69,70,9.244873
  22,192.168.0.225,3,169,70,71,9.244864
  22,192.168.0.225,3,169,71,72,9.244873
  22,192.168.0.225,3,169,72,73,9.244874
  22,192.168.0.225,3,169,73,74,9.244872
  22,192.168.0.225,3,169,74,75,9.244868
  22,192.168.0.225,3,169,75,46,8.595845
  22,192.168.0.225,3,169,46,45,8.550067
  22,192.168.0.225,3,169,45,44,8.550068
  22,192.168.0.225,3,169,44,43,8.550069
  22,192.168.0.225,3,169,43,42,8.550066
  22,192.168.0.225,3,169,42,41,8.550067
  22,192.168.0.225,3,169,41,40,8.55007
  23,192.168.0.225,4,484,20,21,9.459373
  23,192.168.0.225,4,484,21,22,9.459374
  23,192.168.0.225,4,484,22,23,9.459373
  23,192.168.0.225,4,484,23,24,9.459374
  23,192.168.0.225,4,484,24,4,8.695638
  23,192.168.0.225,4,484,4,3,6.124434
  23,192.168.0.225,4,484,3,2,6.124437
  23,192.168.0.225,4,484,2,1,6.124435
  23,192.168.0.225,4,484,1,0,6.124436
  24,192.168.0.226,1,190,427,426,8.544022
  24,192.168.0.226,1,190,426,425,8.544024
  24,192.168.0.226,1,190,425,424,8.544018
  24,192.168.0.226,1,190,424,423,8.544028
  24,192.168.0.226,1,190,423,422,8.544028
  24,192.168.0.226,1,190,422,421,8.544017
  24,192.168.0.226,1,190,421,420,8.544017
  24,192.168.0.226,1,190,420,419,8.544028
  24,192.168.0.226,1,190,419,418,8.544031
  24,192.168.0.226,1,190,418,417,8.544022
  24,192.168.0.226,1,190,417,416,8.544015
  24,192.168.0.226,1,190,416,415,8.544024
  24,192.168.0.226,1,190,415,414,8.544024
  24,192.168.0.226,1,190,414,413,8.54402
  24,192.168.0.226,1,190,413,412,8.544026
  24,192.168.0.226,1,190,412,411,8.544019
  24,192.168.0.226,1,190,411,410,8.544024
  25,192.168.0.226,2,64,355,354,8.788548
  25,192.168.0.226,2,64,354,353,8.788549
  25,192.168.0.226,2,64,353,352,8.78855
  25,192.168.0.226,2,64,352,351,8.788552
  25,192.168.0.226,2,64,351,350,8.788544
  25,192.168.0.226,2,64,350,349,8.788551
  25,192.168.0.226,2,64,349,348,8.788557
  25,192.168.0.226,2,64,348,347,8.788536
  25,192.168.0.226,2,64,347,346,8.78856
  25,192.168.0.226,2,64,346,345,8.788551
  25,192.168.0.226,2,64,345,344,8.788544
  25,192.168.0.226,2,64,344,343,8.788549
  25,192.168.0.226,2,64,343,342,8.788553
  25,192.168.0.226,2,64,342,341,8.788548
  25,192.168.0.226,2,64,341,340,8.788549
  26,192.168.0.226,3,400,291,290,9.108163
  26,192.168.0.226,3,400,290,289,9.108164
  26,192.168.0.226,3,400,289,288,9.108159
  26,192.168.0.226,3,400,288,287,9.108164
  26,192.168.0.226,3,400,287,286,9.108157
  26,192.168.0.226,3,400,286,285,9.108159
  26,192.168.0.226,3,400,285,284,9.108158
  26,192.168.0.226,3,400,284,283,9.108167
  26,192.168.0.226,3,400,283,282,9.108167
  26,192.168.0.226,3,400,282,281,9.108156
  26,192.168.0.226,3,400,281,280,9.108161
  26,192.168.0.226,3,400,280,279,9.10816
  26,192.168.0.226,3,400,279,278,9.108162
  27,192.168.0.226,4,190,235,234,8.749334
  27,192.168.0.226,4,190,234,233,8.749334
  27,192.168.0.226,4,190,233,232,8.749338
  27,192.168.0.226,4,190,232,231,8.749329
  27,192.168.0.226,4,190,231,230,8.749338
  27,192.168.0.226,4,190,230,229,8.749338
  27,192.168.0.226,4,190,229,228,8.74933
  27,192.168.0.226,4,190,228,227,8.749334
  27,192.168.0.226,4,190,227,226,8.749336
  27,192.168.0.226,4,190,226,225,8.749336
  27,192.168.0.226,4,190,225,224,8.749334
  27,192.168.0.226,4,190,224,223,8.749334
  28,192.168.0.227,1,463,183,182,9.156516
  28,192.168.0.227,1,463,182,181,9.156514
  28,192.168.0.227,1,463,181,180,9.156516
  28,192.168.0.227,1,463,180,179,9.15652
  28,192.168.0.227,1,463,179,178,9.156516
  28,192.168.0.227,1,463,178,177,9.156514
  28,192.168.0.227,1,463,177,176,9.156513
  28,192.168.0.227,1,463,176,175,9.156516
  28,192.168.0.227,1,463,175,174,9.156518
  28,192.168.0.227,1,463,174,173,9.156516
  29,192.168.0.227,2,190,139,138,8.683435
  29,192.168.0.227,2,190,138,137,8.683429
  29,192.168.0.227,2,190,137,136,8.683445
  29,192.168.0.227,2,190,136,135,8.683431
  29,192.168.0.227,2,190,135,134,8.683438
  29,192.168.0.227,2,190,134,133,8.683431
  29,192.168.0.227,2,190,133,132,8.683438
  29,192.168.0.227,2,190,132,131,8.683434
  29,192.168.0.227,2,190,131,130,8.683436
  30,192.168.0.227,3,400,99,98,9.24487
  30,192.168.0.227,3,400,98,97,9.244869
  30,192.168.0.227,3,400,97,96,9.244873
  30,192.168.0.227,3,400,96,95,9.244873
  30,192.168.0.227,3,400,95,94,9.244869
  30,192.168.0.227,3,400,94,93,9.244867
  30,192.168.0.227,3,400,93,92,9.244873
  30,192.168.0.227,3,400,92,61,8.595836
  30,192.168.0.227,3,400,61,62,8.55008
  30,192.168.0.227,3,400,62,63,8.550074
  30,192.168.0.227,3,400,63,64,8.550074
  30,192.168.0.227,3,400,64,65,8.550083
  30,192.168.0.227,3,400,65,66,8.550076
  30,192.168.0.227,3,400,66,67,8.550076
  31,192.168.0.227,4,211,39,38,9.459373
  31,192.168.0.227,4,211,38,37,9.45937
  31,192.168.0.227,4,211,37,36,9.459373
  31,192.168.0.227,4,211,36,35,9.459369
  31,192.168.0.227,4,211,35,15,8.695638
  31,192.168.0.227,4,211,15,16,6.124441
  31,192.168.0.227,4,211,16,17,6.12444
  31,192.168.0.227,4,211,17,18,6.12444
  31,192.168.0.227,4,211,18,19,6.12444`;
  return pathData;
}

async function importCSV() {

  const nodes: SceneNode[] = [];
  const lines: SceneNode[] = [];
  const portals: SceneNode[] = [];
  const booths: SceneNode[] = [];
  const centers: SceneNode[] = [];
  const pageNode = figma.currentPage;

  // make sure we are on the right page
  if (pageNode.name != "Assets")
  {
    console.error(`need to be on the Assets page to run`);
    return;
  }

  // import the CSV data
  buildMaps();
  
  console.log(`finding node 'Wiring Plan'`);
  const planNode = pageNode.findOne(node => node.type === "FRAME" && node.name === "Base Layout") as FrameNode;
  if (planNode == null)
  {
    console.log(`planNode is null !`);
    return;
  }

  console.log(`finding node 'Map'`);
  const mapNode = planNode.findOne(node => node.type === "FRAME" && node.name === "Map") as FrameNode;

  if (mapNode == null)
  {
    console.log(`mapNode is null !`);
    return;
  }

  // first get rid of old lights & wiring path data
  console.log(`finding and deleting node 'Lights'`);
  const lightsGroup = mapNode.findOne(node => node.type === "GROUP" && node.name === "Lights") as FrameNode;
  if (lightsGroup != null)
  {
    lightsGroup.remove();
  }

  console.log(`finding and deleting node 'Wiring Paths'`);
  const pathsGroup = mapNode.findOne(node => node.type === "GROUP" && node.name === "Wiring Paths") as FrameNode;
  if (pathsGroup != null)
  {
    pathsGroup.remove();
  }

  console.log(`finding and deleting node 'Portals'`);
  const portalsGroup = mapNode.findOne(node => node.type === "GROUP" && node.name === "Portals") as FrameNode;
  if (portalsGroup != null)
  {
    portalsGroup.remove();
  }

  console.log(`finding and deleting node 'Booths'`);
  const boothsGroup = mapNode.findOne(node => node.type === "GROUP" && node.name === "Booths") as FrameNode;
  if (boothsGroup != null)
  {
    boothsGroup.remove();
  }

  console.log(`finding and deleting node 'Centers'`);
  const centersGroup = mapNode.findOne(node => node.type === "GROUP" && node.name === "Center Structure") as FrameNode;
  if (centersGroup != null)
  {
    centersGroup.remove();
  }


  // now we draw the wiring path lines

  var testLoopMax = 500;
  for (let path of pathList) {

    var cols = path.split(",");
    console.log(`path = ${path} cols.length = ${cols.length}`);

    const line = figma.createLine();
    var startNodeId = cols[4];
    var endNodeId = cols[5];

    console.log(`startNodeId = ${startNodeId} endNodeId = ${endNodeId}`);

    console.log(`(lightBaseMap.get(startNodeId) = ${lightBaseMap.get(startNodeId)} lightBaseMap.get(endNodeId) = ${lightBaseMap.get(endNodeId)}`);

    var startX = parseFloat(lightBaseMap.get(startNodeId)[1]);
    var startZ = -parseFloat(lightBaseMap.get(startNodeId)[2]);
    var endX = parseFloat(lightBaseMap.get(endNodeId)[1]);
    var endZ = -parseFloat(lightBaseMap.get(endNodeId)[2]);

    console.log(`processing path from node ${cols[4]} to ${cols[5]}`);

    var length = Math.sqrt((endX - startX)*(endX - startX) + (endZ - startZ)*(endZ - startZ));
    var rot = -Math.atan2(endZ - startZ, endX - startX) * 180 / Math.PI;

    line.resize(length,0);
    line.x = startX;
    line.y = startZ;
    line.rotation = rot;

    // add the length of the line
    var lineLength = figma.createText();
    lineLength.fontSize = 8;
    lineLength.characters = parseFloat(cols[6]).toFixed(2) + " (ft)";
    lineLength.x = ((startX + endX) / 2) + 10;
    lineLength.y = (startZ + endZ) / 2;

    // for now just put node in the main page; group later
    pageNode.appendChild(lineLength);
    lines.push(lineLength);

    // for now just put node in the main page; group later
    pageNode.appendChild(line);
    lines.push(line);

    testLoopMax -=1;
    if (testLoopMax == 0)
      break;
  }

  console.log(`done processing paths`);

  // and now we group the new lines together
  figma.currentPage.selection = lines;
  figma.viewport.scrollAndZoomIntoView(lines);
  console.log(`figma.group()`);
  const newLines = figma.group(lines,mapNode);
  newLines.name = "Wiring Paths";

  // now add new lights and group together
  console.log(`finding node 'Light Base'`);
  const base = pageNode.findOne(node => node.type === "COMPONENT" && node.name === "Light Base") as ComponentNode;
  var testLoopMax = 500;
  for (let key of lightBaseMap.keys()) {
    const light = base.createInstance();
    console.log(`processing lightbase ${key}`);
    console.log(`    ${lightBaseMap.get(key)}`);
    console.log(`    ${lightBaseMap.get(key)[1]}`);
    console.log(`    ${lightBaseMap.get(key)[2]}`);

    light.x = parseFloat(lightBaseMap.get(key)[1]);
    light.y = -parseFloat(lightBaseMap.get(key)[2]);  // need to invert y because in unity, y axis runs bottom-to-top, and in figma, it runs top-to-bottom
    const id = light.findOne(node => node.type === "TEXT" && node.name === "#ID") as TextNode;
    id.characters = key;

    const univ = light.findOne(node => node.type === "TEXT" && node.name === "#Universe") as TextNode;
    univ.characters = `P${lightBaseMap.get(key)[6]}`;

    var chanStart = parseInt(lightBaseMap.get(key)[5]);
    var chanEnd = chanStart+20;

    const range = light.findOne(node => node.type === "TEXT" && node.name === "#Range") as TextNode;
    range.characters = `${chanStart}-${chanEnd}`;


    const angle = light.findOne(node => node.type === "TEXT" && node.name === "#A") as TextNode;
    angle.characters = `A=${parseFloat(lightBaseMap.get(key)[7]).toFixed(1)}°`;

    const radius1 = light.findOne(node => node.type === "TEXT" && node.name === "#R1") as TextNode;
    var R1I = Math.round(lightBaseMap.get(key)[8]);
    var R1F = Math.floor(R1I/12);
    R1I = R1I - (R1F*12);
    radius1.characters = `R1=${R1F}'-${R1I}"`;

    const radius2 = light.findOne(node => node.type === "TEXT" && node.name === "#R2") as TextNode;
    var R2I = Math.round(lightBaseMap.get(key)[9]);
    radius2.characters = `R2=${R2I}"`;

    light.name = `Light ${key}`;

    // for now just put light in the main page; group later
    pageNode.appendChild(light);
    nodes.push(light);

    testLoopMax -=1;
    if (testLoopMax == 0)
      break;
  }

  console.log(`done adding lights`);

  // and now we group the new lights together
  figma.currentPage.selection = nodes;
  figma.viewport.scrollAndZoomIntoView(nodes);
  const newLights = figma.group(nodes,mapNode);
  newLights.name = "Lights";

  // now we add the portals
  console.log(`finding node 'Portal Base'`);
  const portalBase = pageNode.findOne(node => node.type === "COMPONENT" && node.name === "Portal Base") as ComponentNode;
  for (let portal of portalList) {
    var cols = portal.split(",");
    console.log(`portal = ${portal} cols.length = ${cols.length}`);

    const portalInstance = portalBase.createInstance();
    var portalId = parseInt(cols[0]);
    var portalX = parseFloat(cols[1]);
    var portalZ = parseFloat(cols[2]);
    var portalA = parseFloat(cols[3]);

    console.log(`processing portal ${portalId} (${portalX},${portalZ}) angle ${portalA}`);

    portalInstance.x = portalX;
    portalInstance.y = -portalZ;
    portalInstance.rotation = portalA;

    const id = portalInstance.findOne(node => node.type === "TEXT" && node.name === "#ID") as TextNode;
    id.characters = `Portal ${portalId}`;
    portalInstance.name = `Portal ${portalId}`;

    // for now just put node in the main page; group later
    pageNode.appendChild(portalInstance);
    portals.push(portalInstance);
  }

  // and now we group the new portals together
  figma.currentPage.selection = portals;
  const newPortals = figma.group(portals,mapNode);
  newPortals.name = "Portals";
  console.log(`done processing portals`);

  // now we add the booths
  console.log(`finding node 'Booth Base'`);
  const boothBase = pageNode.findOne(node => node.type === "COMPONENT" && node.name === "Booth Base") as ComponentNode;
  for (let booth of boothList) {
    var cols = booth.split(",");
    console.log(`booth = ${booth} cols.length = ${cols.length}`);

    const boothInstance = boothBase.createInstance();
    var boothId = parseInt(cols[0]);
    var boothX = parseFloat(cols[1]);
    var boothZ = parseFloat(cols[2]);
    var boothA = parseFloat(cols[3]);

    console.log(`processing booth ${boothId} (${boothX},${boothZ}) angle ${boothA}`);

    boothInstance.x = boothX;
    boothInstance.y = -boothZ;
    boothInstance.rotation = boothA;

    const id = boothInstance.findOne(node => node.type === "TEXT" && node.name === "#ID") as TextNode;
    id.characters = `Booth ${boothId}`;
    boothInstance.name = `Booth ${boothId}`;

    // for now just put node in the main page; group later
    pageNode.appendChild(boothInstance);
    booths.push(boothInstance);
  }

  // and now we group the new booths together
  figma.currentPage.selection = booths;
  const newBooths = figma.group(booths,mapNode);
  newBooths.name = "Booths";
  console.log(`done processing booths`);

  console.log(`adding center structure`);
  const centerBase = pageNode.findOne(node => node.type === "COMPONENT" && node.name === "Center Structure") as ComponentNode;
  const centerInstance = centerBase.createInstance();
  centerInstance.x = 0;
  centerInstance.y = 0;

  // for now just put node in the main page; group later
  pageNode.appendChild(centerInstance);
  centers.push(centerInstance);
  const newCent = figma.group(centers,mapNode);
  newCent.name = "Center Structure";
  console.log(`done adding center structure`);
}


async function exportTags() 
{

  const pageNode = figma.currentPage;

  // make sure we are on the right page
  if (pageNode.name != "Landmarks")
  {
    console.error(`need to be on the Landmarks page to run`);
    return;
  }

  var tagNode = pageNode.findOne(node => node.type === "FRAME" && node.name === "Arms / direction A") as FrameNode;
  console.log(`found tagNode '${tagNode.name}'`);
  tagNode = tagNode.findOne(node => node.type === "FRAME" && node.name === "Map") as FrameNode;
  console.log(`found tagNode '${tagNode.name}'`);
  tagNode = tagNode.findOne(node => node.type === "GROUP" && node.name === "Lights") as FrameNode;
  console.log(`found tagNode '${tagNode.name}'`);

  for (let child of tagNode.children)
  {
    if (child.name.startsWith("CWArm"))
    {
      //console.log(`found child '${child.name}'`);
      // find the child lights
      var childGroup = child as FrameNode;
      var csvLightNumbers = "";
      for (let light of childGroup.children)
      {
        if (csvLightNumbers != "")
        {
          csvLightNumbers += ",";
        }
        csvLightNumbers += light.name.substring(6);
      }
      //var groupNum = child.name.substring(6);
      console.log(`${child.name},${csvLightNumbers}`);
    }
  }

  var tagNode = pageNode.findOne(node => node.type === "FRAME" && node.name === "Portal Placemen / Aisles") as FrameNode;
  console.log(`found tagNode '${tagNode.name}'`);
  tagNode = tagNode.findOne(node => node.type === "FRAME" && node.name === "Map") as FrameNode;
  console.log(`found tagNode '${tagNode.name}'`);
  tagNode = tagNode.findOne(node => node.type === "GROUP" && node.name === "Lights") as FrameNode;
  console.log(`found tagNode '${tagNode.name}'`);

  for (let child of tagNode.children)
  {
    if (child.name.startsWith("Portal"))
    {
      //console.log(`found child '${child.name}'`);
      // find the child lights
      var childGroup = child as FrameNode;
      var csvLightNumbers = "";
      for (let light of childGroup.children)
      {
        if (csvLightNumbers != "")
        {
          csvLightNumbers += ",";
        }
        csvLightNumbers += light.name.substring(6);
      }
      //var groupNum = child.name.substring(6);
      console.log(`${child.name},${csvLightNumbers}`);
    }
  }

  var tagNode = pageNode.findOne(node => node.type === "FRAME" && node.name === "Arms / direction B") as FrameNode;
  console.log(`found tagNode '${tagNode.name}'`);
  tagNode = tagNode.findOne(node => node.type === "FRAME" && node.name === "Map") as FrameNode;
  console.log(`found tagNode '${tagNode.name}'`);
  tagNode = tagNode.findOne(node => node.type === "GROUP" && node.name === "Lights") as FrameNode;
  console.log(`found tagNode '${tagNode.name}'`);

  console.log('exporting direction B!');
  for (let child of tagNode.children)
  {
    if (child.name.startsWith("Arm"))
    {
      //console.log(`found child '${child.name}'`);
      // find the child lights
      var childGroup = child as FrameNode;
      if (childGroup != null)
      {
        var csvLightNumbers = "";
        for (let light of childGroup.children)
        {
          if (csvLightNumbers != "")
          {
            csvLightNumbers += ",";
          }
          csvLightNumbers += light.name.substring(6);
        }
        //var groupNum = child.name.substring(6);
        console.log(`${child.name},${csvLightNumbers}`);
      }
    }
  }
  console.log('finished exporting direction B!');

}

async function numberRadials() {

  const pageNode = figma.currentPage;
  const nodes: SceneNode[] = [];

  // make sure we are on the right page
  if (pageNode.name != "Assets")
  {
    console.error(`need to be on the Assets page to run`);
    return;
  }
  
  console.log(`finding node 'Map'`);
  const mapNode = pageNode.findOne(node => node.type === "FRAME" && node.name === "Map") as FrameNode;
  if (mapNode == null)
  {
    console.log(`mapNode is null !`);
    return;
  }

  // first get rid of old numbers
  console.log(`finding and deleting node 'Numbers'`);
  const numbers = pageNode.findOne(node => node.type === "GROUP" && node.name === "Numbers") as GroupNode;
  if (numbers != null)
  {
    numbers.remove();
  }

  // now we draw the numbers
  for (let i=0; i < 360; i+=5) {
    const text = figma.createText();
    var x = 1560 * Math.cos((i-90) * Math.PI / 180);
    var y = 1560 * Math.sin((i-90) * Math.PI / 180);
    text.x = x;
    text.y = y;
    text.fontSize = 20;
    text.characters = i.toString() + "°";
    
    // for now just put node in the main page; group later
    pageNode.appendChild(text);
    nodes.push(text);
  }

  console.log(`done drawing numbers`);

  // and now we group the new lines together
  figma.currentPage.selection = nodes;
  figma.viewport.scrollAndZoomIntoView(nodes);
  console.log(`figma.group()`);
  const numberGroup = figma.group(nodes,mapNode);
  numberGroup.name = "Numbers";
}


// This file holds the main code for the plugins. It has access to the *document*.
// You can access browser APIs such as the network by creating a UI which contains
// a full browser environment (see documentation).

(async() => {
  await loadFonts();

  console.log(`figma.command = ${figma.command}`)
  console.log(`figma.currentPage.name = '${figma.currentPage.name}'`);

  if (figma.command == "import")
  {    
    await importCSV();
  }
  else if (figma.command == "export")
  {
    await exportTags();
  }
  else if (figma.command == "radials")
  {
    await numberRadials();
  }

  // Make sure to close the plugin when you're done. Otherwise the plugin will
  // keep running, which shows the cancel button at the bottom of the screen.
  figma.closePlugin();

})();


