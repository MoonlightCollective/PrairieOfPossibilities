async function loadFonts() {

  await figma.loadFontAsync({ family: "Inter", style: "Regular" });
  console.log("Awaiting the fonts.");
};


var lightBaseMap = new Map();
var pathList = [];
var portalList = [];
var boothList = [];

function buildMaps() {

  var csvData = loadBaseData();
  console.log(`csvData() ${csvData}`);

  var rows = csvData.split("\n");
  console.log(`buildMap() found ${rows.length} base rows`);
  for (var i=0;i<rows.length;i++)
  {
    if (i > 0)
    {
      rows[i] = rows[i].trim();
      var cols = rows[i].split(",");
      // now apply 135 degree rotation
      //var theta = -Math.PI * 135 / 180;
      var theta = 0;
      var oldX = parseFloat(cols[1]);
      var oldZ = parseFloat(cols[2]);
      var newX = oldX * Math.cos(theta) - oldZ * Math.sin(theta);
      var newZ = oldZ * Math.cos(theta) + oldX * Math.sin(theta);
      cols[1] = newX.toString();
      cols[2] = newZ.toString(); 
      lightBaseMap.set(cols[0], cols);
    }
  }

  var portalData = loadPortalData();
  console.log(`portalData() ${portalData}`);
  rows = portalData.split("\n");
  console.log(`found ${rows.length} portals`);
  for (var i=0; i<rows.length; i++)
  {
    if (i > 0)
    {
      // store them as strings.   typescript doesnt' like arrays of arrays
      rows[i] = rows[i].trim();
      portalList.push(rows[i]);
    }
  }

  var boothData = loadBoothData();
  console.log(`boothData() ${boothData}`);
  rows = boothData.split("\n");
  console.log(`found ${rows.length} booths`);
  for (var i=0; i<rows.length; i++)
  {
    if (i > 0)
    {
      // store them as strings.   typescript doesnt' like arrays of arrays
      rows[i] = rows[i].trim();
      boothList.push(rows[i]);
    }
  }

  var pathData = loadPathData();
  console.log(`pathData() ${pathData}`);
  rows = pathData.split("\n");
  console.log(`buildMap() found ${rows.length} path rows`);
  for (var i=0;i<rows.length;i++)
  {
    if (i > 0)
    {
      // store them as strings.   typescript doesnt' like arrays of arrays
      rows[i] = rows[i].trim();
      pathList.push(rows[i]);
    }
  }
}

function loadPortalData()
{
  var portalData = `PortalId,x,z,Theta
  1,1440,0,90
  2,0,1440,180
  3,-1440,0,270
  4,0,-1440,0`;
  return portalData;
}

function loadBoothData()
{
  var boothData = `BoothId,x,z,Theta
  1,1272,1272,45
  2,-1272,-1272,225`;
  return boothData;
}

function loadBaseData()
{
  var baseData = `BaseId,x,z,DistFromCtr,Theta,ChannelStart,PathId,NearestTheta5,DistFromCenterOnTheta5,DistFromTheta5
  0,294.0441,59.48325,300.0003,78.56378,189,23,80,299.9061,-7.519339
  1,264.3464,141.849,300.0003,61.78189,168,23,60,299.8552,9.32839
  2,212.1322,212.1323,300.0003,45,147,23,45,300.0002,-4.825253E-05
  3,141.8489,264.3465,300.0003,28.21811,126,23,30,299.8552,-9.328431
  4,59.48319,294.0441,300.0003,11.43622,105,23,10,299.906,7.519273
  5,-59.48329,294.0441,300.0003,348.5638,105,7,350,299.9061,-7.519376
  6,-141.849,264.3464,300.0003,331.7819,126,7,330,299.8553,9.328348
  7,-212.1323,212.1322,300.0003,315,147,7,315,300.0002,-6.823938E-05
  8,-264.3465,141.8489,300.0003,298.2181,168,7,300,299.8553,-9.328485
  9,-294.0441,59.48315,300.0003,281.4362,189,7,280,299.906,7.519206
  10,-294.0441,-59.48333,300.0003,258.5637,189,15,260,299.9061,-7.519413
  11,-264.3464,-141.8491,300.0003,241.7819,168,15,240,299.8553,9.32828
  12,-212.1322,-212.1323,300.0003,225,147,15,225,300.0003,-0.0001406791
  13,-141.8489,-264.3465,300.0003,208.2181,126,15,210,299.8552,-9.328446
  14,-59.48317,-294.0441,300.0003,191.4362,105,15,190,299.906,7.519277
  15,59.48331,-294.0441,300.0003,168.5638,105,31,170,299.9061,-7.519413
  16,141.8491,-264.3464,300.0003,151.7819,126,31,150,299.8552,9.328282
  17,212.1323,-212.1322,300.0003,135,147,31,135,300.0003,-0.0001294751
  18,264.3465,-141.8489,300.0003,118.2181,168,31,120,299.8553,-9.328608
  19,294.0441,-59.48312,300.0003,101.4362,189,31,100,299.9061,7.519135
  20,416.2658,59.67791,420.5219,81.84137,0,23,80,420.3047,13.51252
  21,376.0794,188.1567,420.5219,63.42068,21,23,65,420.3622,-11.58983
  22,297.3539,297.3539,420.5219,45,42,23,45,420.522,-8.631674E-05
  23,188.1567,376.0794,420.5219,26.57932,63,23,25,420.3622,11.58984
  24,59.67791,416.2658,420.5219,8.15863,84,23,10,420.3047,-13.51255
  25,-59.67794,416.2658,420.5219,351.8414,84,7,350,420.3047,13.5125
  26,-188.1567,376.0794,420.5219,333.4207,63,7,335,420.3622,-11.58983
  27,-297.3539,297.3539,420.5219,315,42,7,315,420.522,-8.631674E-05
  28,-376.0794,188.1567,420.5219,296.5793,21,7,295,420.3622,11.58983
  29,-416.2658,59.67794,420.5219,278.1586,0,7,280,420.3047,-13.51255
  30,-416.2658,-59.67791,420.5219,261.8414,0,15,260,420.3047,13.51254
  31,-376.0794,-188.1567,420.5219,243.4207,21,15,245,420.3622,-11.58983
  32,-297.3539,-297.3539,420.5219,225,42,15,225,420.5219,-3.051758E-05
  33,-188.1566,-376.0794,420.5219,206.5793,63,15,205,420.3621,11.58979
  34,-59.67786,-416.2658,420.5219,188.1586,84,15,190,420.3047,-13.51255
  35,59.67787,-416.2658,420.5219,171.8414,84,31,170,420.3047,13.51255
  36,188.1566,-376.0794,420.5219,153.4207,63,31,155,420.3621,-11.58979
  37,297.3538,-297.3539,420.5219,135,42,31,135,420.5219,-3.051758E-05
  38,376.0794,-188.1568,420.5219,116.5793,21,31,115,420.3622,11.58981
  39,416.2658,-59.678,420.5219,98.15863,0,31,100,420.3047,-13.51256
  40,537.7333,59.75789,541.0435,83.65878,294,22,85,540.8953,-12.66396
  41,510.8633,178.1762,541.0435,70.77252,273,22,70,540.9943,7.294702
  42,458.2608,287.6196,541.0435,57.88626,252,22,60,540.6754,-19.95549
  43,382.5755,382.5755,541.0435,45,231,22,45,541.0435,0
  44,287.6196,458.2609,541.0435,32.11374,210,22,30,540.6754,19.9555
  45,178.1762,510.8633,541.0435,19.22748,189,22,20,540.9943,-7.294667
  46,59.75792,537.7333,541.0435,6.341217,168,22,5,540.8954,12.66395
  47,-59.75784,537.7333,541.0435,353.6588,168,6,355,540.8953,-12.66388
  48,-178.1761,510.8633,541.0435,340.7725,189,6,340,540.9943,7.294734
  49,-287.6195,458.2609,541.0435,327.8863,210,6,330,540.6754,-19.95533
  50,-382.5754,382.5756,541.0435,315,231,6,315,541.0435,0.0001294751
  51,-458.2608,287.6198,541.0435,302.1138,252,6,300,540.6754,19.95562
  52,-510.8633,178.1763,541.0435,289.2275,273,6,290,540.9943,-7.294577
  53,-537.7332,59.75808,541.0435,276.3412,294,6,275,540.8953,12.66408
  54,-537.7333,-59.75766,541.0435,263.6588,294,14,265,540.8953,-12.66369
  55,-510.8634,-178.176,541.0435,250.7725,273,14,250,540.9944,7.294942
  56,-458.261,-287.6194,541.0435,237.8863,252,14,240,540.6754,-19.95519
  57,-382.5757,-382.5753,541.0435,225,231,14,225,541.0435,0.0002157919
  58,-287.6199,-458.2607,541.0435,212.1138,210,14,210,540.6754,19.95588
  59,-178.1764,-510.8633,541.0435,199.2275,189,14,200,540.9943,-7.294437
  60,-59.758,-537.7333,541.0435,186.3412,168,14,185,540.8954,12.66407
  61,59.75776,-537.7333,541.0435,173.6588,168,30,175,540.8953,-12.66383
  62,178.1761,-510.8633,541.0435,160.7725,189,30,160,540.9943,7.294706
  63,287.6197,-458.2608,541.0435,147.8863,210,30,150,540.6753,-19.95563
  64,382.5757,-382.5754,541.0435,135,231,30,135,541.0435,-0.0002383499
  65,458.261,-287.6194,541.0435,122.1137,252,30,120,540.6754,19.95508
  66,510.8634,-178.1758,541.0435,109.2274,273,30,110,540.9943,-7.295191
  67,537.7333,-59.75739,541.0435,96.34116,294,30,95,540.8953,12.6633
  68,658.8571,59.79833,661.5652,84.814,0,22,85,661.5617,-2.147605
  69,634.1198,188.5746,661.5651,73.43857,21,22,75,661.3194,-18.02679
  70,584.4693,309.9421,661.5652,62.06314,42,22,60,661.1363,23.81693
  71,511.8558,419.1325,661.5652,50.68771,63,22,50,661.5175,7.940474
  72,419.1324,511.8558,661.5651,39.31229,84,22,40,661.5175,-7.940567
  73,309.942,584.4693,661.5651,27.93686,105,22,30,661.1363,-23.81695
  74,188.5746,634.1198,661.5651,16.56143,126,22,15,661.3194,18.02673
  75,59.79824,658.8571,661.5651,5.185974,147,22,5,661.5617,2.147476
  76,-59.79846,658.8571,661.5652,354.814,147,6,355,661.5617,-2.147715
  77,-188.5748,634.1198,661.5651,343.4386,126,6,345,661.3195,-18.02696
  78,-309.9423,584.4692,661.5652,332.0631,105,6,330,661.1363,23.81673
  79,-419.1327,511.8556,661.5651,320.6877,84,6,320,661.5175,7.940219
  80,-511.8561,419.1321,661.5651,309.3123,63,6,310,661.5175,-7.940911
  81,-584.4695,309.9417,661.5651,297.9368,42,6,300,661.1363,-23.81739
  82,-634.12,188.5741,661.5651,286.5614,21,6,285,661.3195,18.02623
  83,-658.8571,59.79782,661.5651,275.186,0,6,275,661.5616,2.147011
  84,-658.8571,-59.79888,661.5652,264.814,0,14,265,661.5618,-2.148104
  85,-634.1197,-188.5752,661.5651,253.4385,21,14,255,661.3195,-18.02736
  86,-584.4689,-309.9427,661.5651,242.0631,42,14,240,661.1362,23.81622
  87,-511.8554,-419.133,661.5651,230.6877,63,14,230,661.5175,7.939786
  88,-419.1318,-511.8563,661.5651,219.3122,84,14,220,661.5175,-7.941173
  89,-309.9413,-584.4697,661.5652,207.9368,105,14,210,661.1364,-23.81766
  90,-188.5737,-634.1201,661.565,196.5613,126,14,195,661.3193,18.02596
  91,-59.7974,-658.8571,661.5651,185.1859,147,14,185,661.5616,2.146686
  92,59.7993,-658.8569,661.5651,174.8139,147,30,175,661.5616,-2.148591
  93,188.5756,-634.1196,661.5651,163.4385,126,30,165,661.3194,-18.0278
  94,309.943,-584.4687,661.5651,152.063,105,30,150,661.1362,23.81575
  95,419.1334,-511.8551,661.5651,140.6876,84,30,140,661.5175,7.939259
  96,511.8566,-419.1315,661.5651,129.3122,63,30,130,661.5175,-7.941864
  97,584.4699,-309.941,661.5652,117.9367,42,30,120,661.1364,-23.81832
  98,634.1202,-188.5733,661.5651,106.5613,21,30,105,661.3194,18.0253
  99,658.8571,-59.79698,661.5651,95.18588,0,30,95,661.5616,2.146063
  100,779.7955,59.82157,782.0868,85.61319,0,21,85,782.042,8.369725
  101,760.7572,181.4059,782.0867,76.58801,21,21,75,781.7864,21.67379
  102,722.882,298.4985,782.0868,67.56287,42,21,70,781.3793,-33.25666
  103,667.1075,408.2,782.0868,58.53772,63,21,60,781.8321,-19.95782
  104,594.8148,507.7942,782.0868,49.51257,84,21,50,782.0585,-6.653354
  105,507.7941,594.8149,782.0867,40.48743,105,21,40,782.0585,6.653166
  106,408.1999,667.1075,782.0867,31.46228,126,21,30,781.832,19.95777
  107,298.4984,722.882,782.0868,22.43713,147,21,20,781.3794,33.25655
  108,181.4058,760.7573,782.0868,13.41196,168,21,15,781.7864,-21.67399
  109,59.82141,779.7955,782.0868,4.38681,189,21,5,782.042,-8.369942
  110,-59.82176,779.7955,782.0868,355.6132,189,5,355,782.042,8.369558
  111,-181.4061,760.7572,782.0868,346.588,168,5,345,781.7865,21.67363
  112,-298.4987,722.8819,782.0868,337.5629,147,5,340,781.3793,-33.25691
  113,-408.2003,667.1073,782.0867,328.5377,126,5,330,781.832,-19.95807
  114,-507.7944,594.8146,782.0867,319.5126,105,5,320,782.0584,-6.65358
  115,-594.8151,507.7939,782.0867,310.4874,84,5,310,782.0584,6.652955
  116,-667.1076,408.1998,782.0867,301.4622,63,5,300,781.832,19.95749
  117,-722.882,298.4982,782.0867,292.4371,42,5,290,781.3792,33.25628
  118,-760.7573,181.4056,782.0867,283.412,21,5,285,781.7863,-21.67421
  119,-779.7955,59.82119,782.0868,274.3868,0,5,275,782.0419,-8.370221
  120,-779.7954,-59.82188,782.0866,265.6132,0,13,265,782.0419,8.369459
  121,-760.7572,-181.4063,782.0868,256.588,21,13,255,781.7864,21.6735
  122,-722.8817,-298.4989,782.0867,247.5628,42,13,250,781.3792,-33.25708
  123,-667.1072,-408.2003,782.0866,238.5377,63,13,240,781.832,-19.95823
  124,-594.8146,-507.7944,782.0867,229.5125,84,13,230,782.0584,-6.653713
  125,-507.7938,-594.8151,782.0867,220.4874,105,13,220,782.0585,6.652947
  126,-408.1998,-667.1075,782.0867,211.4622,126,13,210,781.832,19.95769
  127,-298.4984,-722.882,782.0868,202.4371,147,13,200,781.3793,33.25661
  128,-181.406,-760.7572,782.0867,193.412,168,13,195,781.7864,-21.67365
  129,-59.8218,-779.7955,782.0868,184.3868,189,13,185,782.042,-8.369467
  130,59.82145,-779.7955,782.0868,175.6132,189,29,175,782.042,8.369839
  131,181.4057,-760.7573,782.0867,166.588,168,29,165,781.7864,21.67405
  132,298.4981,-722.882,782.0867,157.5629,147,29,160,781.3793,-33.2563
  133,408.1995,-667.1077,782.0867,148.5378,126,29,150,781.832,-19.9573
  134,507.7935,-594.8153,782.0867,139.5126,105,29,140,782.0585,-6.652642
  135,594.8143,-507.7949,782.0867,130.4875,84,29,130,782.0584,6.65408
  136,667.1069,-408.201,782.0867,121.4623,63,29,120,781.832,19.95878
  137,722.8814,-298.4997,782.0867,112.4372,42,29,110,781.3793,33.25778
  138,760.7569,-181.4073,782.0868,103.4121,21,29,105,781.7865,-21.67258
  139,779.7953,-59.82317,782.0867,94.38693,0,29,95,782.0419,-8.368342
  140,900.6229,59.83615,902.6083,86.19894,0,20,85,902.4109,18.886
  141,882.7501,188.2923,902.6083,77.95914,21,20,80,902.0358,-32.14377
  142,846.6521,312.8609,902.6083,69.71936,42,20,70,902.5976,-4.421082
  143,793.0741,430.9702,902.6083,61.47958,63,20,60,902.3074,23.30588
  144,723.1219,540.1817,902.6082,53.23978,84,20,55,902.1824,-27.72516
  145,638.2405,638.2405,902.6083,45,105,20,45,902.6083,0
  146,540.1817,723.122,902.6083,36.76022,126,20,35,902.1824,27.72518
  147,430.9702,793.0739,902.6082,28.52045,147,20,30,902.3073,-23.30574
  148,312.8609,846.6521,902.6083,20.28064,168,20,20,902.5975,4.421041
  149,188.2922,882.7501,902.6083,12.04083,189,20,10,902.0358,32.14367
  150,59.83602,900.6229,902.6083,3.801056,210,20,5,902.4109,-18.88618
  151,-59.83632,900.6229,902.6083,356.1989,210,4,355,902.4109,18.88585
  152,-188.2925,882.7501,902.6083,347.9591,189,4,350,902.0358,-32.14396
  153,-312.8612,846.652,902.6083,339.7194,168,4,340,902.5974,-4.421348
  154,-430.9705,793.0739,902.6083,331.4796,147,4,330,902.3074,23.30557
  155,-540.182,723.1219,902.6083,323.2398,126,4,325,902.1826,-27.72547
  156,-638.2408,638.2402,902.6083,315,105,4,315,902.6083,-0.0004315837
  157,-723.1223,540.1813,902.6083,306.7602,84,4,305,902.1824,27.72465
  158,-793.0742,430.9697,902.6082,298.5204,63,4,300,902.3073,-23.30645
  159,-846.6523,312.8604,902.6083,290.2806,42,4,290,902.5975,4.420375
  160,-882.7502,188.2917,902.6083,282.0408,21,4,280,902.0358,32.14301
  161,-900.6229,59.83545,902.6083,273.801,0,4,275,902.4108,-18.88682
  162,-900.6227,-59.83689,902.6083,266.1989,0,12,265,902.4108,18.88531
  163,-882.7499,-188.2931,902.6083,257.9591,21,12,260,902.0357,-32.14451
  164,-846.6518,-312.8617,902.6083,249.7193,42,12,250,902.5975,-4.421862
  165,-793.0736,-430.9711,902.6083,241.4795,63,12,240,902.3073,23.3049
  166,-723.1216,-540.1824,902.6083,233.2397,84,12,235,902.1824,-27.72602
  167,-638.2397,-638.2412,902.6083,224.9999,105,12,225,902.6083,-0.001122118
  168,-540.181,-723.1226,902.6083,216.7602,126,12,215,902.1825,27.72443
  169,-430.9696,-793.0745,902.6083,208.5204,147,12,210,902.3074,-23.30653
  170,-312.8604,-846.6522,902.6082,200.2806,168,12,200,902.5974,4.420626
  171,-188.2919,-882.7502,902.6083,192.0408,189,12,190,902.0358,32.14341
  172,-59.83594,-900.6229,902.6083,183.8011,210,12,185,902.4108,-18.88618
  173,59.8364,-900.6229,902.6083,176.1989,210,28,175,902.4109,18.88575
  174,188.2924,-882.7501,902.6083,167.9591,189,28,170,902.0357,-32.14388
  175,312.8609,-846.6521,902.6083,159.7194,168,28,160,902.5975,-4.421004
  176,430.97,-793.0742,902.6083,151.4796,147,28,150,902.3074,23.30599
  177,540.1813,-723.1223,902.6083,143.2398,126,28,145,902.1824,-27.72484
  178,638.24,-638.2408,902.6083,135,105,28,135,902.6082,0.0004766998
  179,723.1216,-540.1823,902.6083,126.7603,84,28,125,902.1824,27.72573
  180,793.0736,-430.971,902.6083,118.5205,63,28,120,902.3073,-23.30512
  181,846.6517,-312.8619,902.6083,110.2807,42,28,110,902.5975,4.42189
  182,882.7498,-188.2935,902.6083,102.0409,21,28,100,902.0357,32.14473
  183,900.6227,-59.83751,902.6083,93.80115,0,28,95,902.4109,-18.88488
  184,1021.378,59.84587,1023.13,86.6467,0,19,85,1022.708,29.40082
  185,1006.66,182.84,1023.13,79.70557,21,19,80,1023.116,-5.257567
  186,977.186,303.154,1023.13,72.76447,42,19,75,1022.351,-39.90988
  187,933.3882,419.0243,1023.13,65.82333,63,19,65,1023.024,14.70195
  188,875.9084,528.7524,1023.13,58.88223,84,19,60,1022.935,-19.95881
  189,805.5896,630.7299,1023.13,51.9411,105,19,50,1022.543,34.65586
  190,723.462,723.462,1023.13,45,126,19,45,1023.13,0
  191,630.7299,805.5896,1023.13,38.0589,147,19,40,1022.543,-34.6559
  192,528.7524,875.9084,1023.13,31.11777,168,19,30,1022.935,19.95886
  193,419.0244,933.3881,1023.13,24.17667,189,19,25,1023.024,-14.70179
  194,303.1541,977.186,1023.13,17.23553,210,19,15,1022.351,39.91004
  195,182.8402,1006.66,1023.13,10.29443,231,19,10,1023.116,5.257713
  196,59.84613,1021.378,1023.13,3.353333,252,19,5,1022.708,-29.40063
  197,-59.84548,1021.378,1023.13,356.6467,252,3,355,1022.707,29.40124
  198,-182.8395,1006.66,1023.13,349.7056,231,3,350,1023.116,-5.257091
  199,-303.1535,977.1862,1023.13,342.7645,210,3,345,1022.351,-39.90943
  200,-419.0237,933.3885,1023.13,335.8234,189,3,335,1023.024,14.70261
  201,-528.7519,875.9088,1023.13,328.8823,168,3,330,1022.935,-19.9581
  202,-630.7294,805.59,1023.13,321.9412,147,3,320,1022.543,34.65646
  203,-723.4616,723.4626,1023.13,315.0001,126,3,315,1023.13,0.000745029
  204,-805.5891,630.7305,1023.13,308.0589,105,3,310,1022.543,-34.65503
  205,-875.9081,528.7531,1023.13,301.1178,84,3,300,1022.935,19.95946
  206,-933.3878,419.0251,1023.13,294.1767,63,3,295,1023.024,-14.70108
  207,-977.1857,303.1549,1023.13,287.2356,42,3,285,1022.351,39.91078
  208,-1006.66,182.841,1023.13,280.2945,21,3,280,1023.116,5.258436
  209,-1021.378,59.84694,1023.13,273.3534,0,3,275,1022.708,-29.3999
  210,-1021.378,-59.84492,1023.13,266.6467,0,11,265,1022.707,29.40185
  211,-1006.66,-182.839,1023.13,259.7056,21,11,260,1023.116,-5.256539
  212,-977.1863,-303.153,1023.13,252.7645,42,11,255,1022.351,-39.90879
  213,-933.3886,-419.0232,1023.13,245.8234,63,11,245,1023.024,14.70304
  214,-875.9091,-528.7514,1023.13,238.8823,84,11,240,1022.935,-19.95761
  215,-805.5903,-630.7291,1023.13,231.9412,105,11,230,1022.543,34.65694
  216,-723.463,-723.4612,1023.13,225.0001,126,11,225,1023.13,0.001172447
  217,-630.731,-805.5887,1023.13,218.059,147,11,220,1022.543,-34.6543
  218,-528.7536,-875.9078,1023.13,211.1178,168,11,210,1022.935,19.96025
  219,-419.0256,-933.3876,1023.13,204.1767,189,11,205,1023.024,-14.70037
  220,-303.1554,-977.1855,1023.13,197.2356,210,11,195,1022.351,39.91152
  221,-182.8415,-1006.66,1023.13,190.2945,231,11,190,1023.116,5.259182
  222,-59.8475,-1021.378,1023.13,183.3534,252,11,185,1022.708,-29.39917
  223,59.84412,-1021.378,1023.13,176.6468,252,27,175,1022.707,29.40258
  224,182.8382,-1006.66,1023.13,169.7057,231,27,170,1023.116,-5.255771
  225,303.1522,-977.1865,1023.13,162.7646,210,27,165,1022.351,-39.9081
  226,419.0225,-933.389,1023.13,155.8235,189,27,155,1023.024,14.70381
  227,528.7507,-875.9095,1023.13,148.8823,168,27,150,1022.935,-19.95684
  228,630.7283,-805.5909,1023.13,141.9412,147,27,140,1022.543,34.65781
  229,723.4606,-723.4636,1023.13,135.0001,126,27,135,1023.13,0.001946438
  230,805.5883,-630.7316,1023.13,128.059,105,27,130,1022.543,-34.65395
  231,875.9074,-528.7543,1023.13,121.1179,84,27,120,1022.935,19.96078
  232,933.3873,-419.0263,1023.13,114.1768,63,27,115,1023.024,-14.69988
  233,977.1852,-303.1562,1023.13,107.2357,42,27,105,1022.351,39.91201
  234,1006.66,-182.8423,1023.13,100.2946,21,27,100,1023.116,5.259629
  235,1021.378,-59.84831,1023.13,93.35345,0,27,95,1022.708,-29.39868
  236,1142.084,59.8527,1143.651,87.00006,0,18,85,1142.955,39.91425
  237,1128.094,187.9986,1143.651,80.53851,21,18,80,1143.601,10.74896
  238,1099.771,313.756,1143.651,74.07697,42,18,75,1143.503,-18.42332
  239,1057.476,435.5271,1143.651,67.61542,63,18,70,1142.661,-47.58369
  240,1001.746,551.765,1143.652,61.15387,84,18,60,1143.42,23.03029
  241,933.2884,660.9928,1143.651,54.69232,105,18,55,1143.635,-6.141379
  242,852.974,761.8229,1143.651,48.23077,126,18,50,1143.106,-35.30909
  243,761.8228,852.9741,1143.651,41.76923,147,18,40,1143.106,35.30892
  244,660.9927,933.2886,1143.651,35.30768,168,18,35,1143.635,6.141194
  245,551.7648,1001.746,1143.651,28.84613,189,18,30,1143.42,-23.03038
  246,435.527,1057.476,1143.651,22.38458,210,18,20,1142.661,47.58343
  247,313.7557,1099.771,1143.652,15.92303,231,18,15,1143.503,18.42306
  248,187.9983,1128.094,1143.651,9.461487,252,18,10,1143.601,-10.74924
  249,59.85248,1142.084,1143.651,2.999939,273,18,5,1142.955,-39.91454
  250,-59.85286,1142.084,1143.651,357.0001,273,2,355,1142.955,39.91412
  251,-187.9987,1128.094,1143.651,350.5385,252,2,350,1143.601,10.74884
  252,-313.7561,1099.771,1143.651,344.077,231,2,345,1143.503,-18.4235
  253,-435.5273,1057.476,1143.651,337.6154,210,2,340,1142.661,-47.58384
  254,-551.7651,1001.745,1143.651,331.1539,189,2,330,1143.42,23.03016
  255,-660.993,933.2883,1143.651,324.6923,168,2,325,1143.635,-6.141614
  256,-761.8231,852.9739,1143.651,318.2308,147,2,320,1143.106,-35.30922
  257,-852.9742,761.8227,1143.651,311.7692,126,2,310,1143.106,35.30875
  258,-933.2886,660.9926,1143.651,305.3077,105,2,305,1143.635,6.141124
  259,-1001.746,551.7646,1143.651,298.8461,84,2,300,1143.42,-23.03073
  260,-1057.476,435.5268,1143.651,292.3846,63,2,290,1142.661,47.58323
  261,-1099.771,313.7556,1143.651,285.923,42,2,285,1143.503,18.42279
  262,-1128.094,187.9982,1143.651,279.4615,21,2,280,1143.601,-10.74949
  263,-1142.084,59.85229,1143.651,272.9999,0,2,275,1142.955,-39.91481
  264,-1142.084,-59.85304,1143.651,267.0001,0,10,265,1142.955,39.91399
  265,-1128.094,-187.9989,1143.651,260.5385,21,10,260,1143.601,10.74868
  266,-1099.771,-313.7563,1143.651,254.077,42,10,255,1143.503,-18.42365
  267,-1057.476,-435.5275,1143.651,247.6154,63,10,250,1142.661,-47.58397
  268,-1001.745,-551.7653,1143.651,241.1538,84,10,240,1143.419,23.02981
  269,-933.2882,-660.9931,1143.651,234.6923,105,10,235,1143.635,-6.141784
  270,-852.9737,-761.8232,1143.651,228.2307,126,10,230,1143.106,-35.30956
  271,-761.8225,-852.9744,1143.651,221.7692,147,10,220,1143.106,35.30869
  272,-660.9924,-933.2888,1143.651,215.3076,168,10,215,1143.635,6.140954
  273,-551.7645,-1001.746,1143.651,208.8461,189,10,210,1143.42,-23.03068
  274,-435.5266,-1057.476,1143.651,202.3846,210,10,200,1142.661,47.58313
  275,-313.7554,-1099.771,1143.651,195.923,231,10,195,1143.503,18.42285
  276,-187.998,-1128.094,1143.651,189.4615,252,10,190,1143.601,-10.74949
  277,-59.85211,-1142.084,1143.651,182.9999,273,10,185,1142.955,-39.91481
  278,59.85323,-1142.084,1143.651,177.0001,273,26,175,1142.955,39.91373
  279,187.9991,-1128.094,1143.651,170.5385,252,26,170,1143.601,10.74844
  280,313.7564,-1099.771,1143.651,164.0769,231,26,165,1143.503,-18.42385
  281,435.5276,-1057.476,1143.652,157.6154,210,26,160,1142.661,-47.58422
  282,551.7655,-1001.745,1143.651,151.1538,189,26,150,1143.42,23.02959
  283,660.9933,-933.288,1143.651,144.6923,168,26,145,1143.635,-6.142124
  284,761.8234,-852.9736,1143.651,138.2307,147,26,140,1143.106,-35.30978
  285,852.9745,-761.8224,1143.651,131.7692,126,26,130,1143.106,35.30818
  286,933.2888,-660.9923,1143.651,125.3076,105,26,125,1143.635,6.140564
  287,1001.746,-551.7643,1143.651,118.8461,84,26,120,1143.42,-23.03122
  288,1057.476,-435.5264,1143.652,112.3845,63,26,110,1142.661,47.58258
  289,1099.771,-313.7552,1143.651,105.923,42,26,105,1143.503,18.42228
  290,1128.094,-187.9978,1143.651,99.46146,21,26,100,1143.601,-10.74998
  291,1142.084,-59.85192,1143.651,92.99988,0,26,95,1142.955,-39.91535
  292,1262.755,59.85767,1264.173,87.28607,0,17,85,1263.167,50.42648
  293,1250.766,183.628,1264.173,81.64795,21,17,80,1263.65,36.35492
  294,1226.674,305.6216,1264.173,76.0098,42,17,75,1263.977,22.27877
  295,1190.714,424.6582,1264.173,70.37164,63,17,70,1264.146,8.199865
  296,1143.233,539.586,1264.173,64.73349,84,17,65,1264.159,-5.880006
  297,1084.69,649.293,1264.173,59.09537,105,17,60,1264.016,-19.95924
  298,1015.652,752.7177,1264.173,53.45721,126,17,55,1263.715,-34.036
  299,936.7878,848.8593,1264.173,47.81909,147,17,50,1263.257,-48.10838
  300,848.8593,936.7879,1264.173,42.18091,168,17,40,1263.257,48.10828
  301,752.7176,1015.652,1264.173,36.54279,189,17,35,1263.715,34.03587
  302,649.293,1084.69,1264.173,30.90463,210,17,30,1264.016,19.9593
  303,539.586,1143.233,1264.173,25.26651,231,17,25,1264.16,5.880058
  304,424.6582,1190.714,1264.173,19.62836,252,17,20,1264.146,-8.199923
  305,305.6216,1226.674,1264.173,13.9902,273,17,15,1263.977,-22.27883
  306,183.628,1250.766,1264.173,8.352081,294,17,10,1263.65,-36.35498
  307,59.85761,1262.755,1264.173,2.713928,315,17,5,1263.167,-50.42662
  308,-59.85773,1262.755,1264.173,357.2861,315,1,355,1263.167,50.42646
  309,-183.6281,1250.766,1264.173,351.6479,294,1,350,1263.65,36.35485
  310,-305.6217,1226.674,1264.173,346.0098,273,1,345,1263.977,22.27868
  311,-424.6583,1190.714,1264.173,340.3716,252,1,340,1264.146,8.199837
  312,-539.5861,1143.233,1264.173,334.7335,231,1,335,1264.159,-5.880062
  313,-649.293,1084.69,1264.173,329.0953,210,1,330,1264.016,-19.95919
  314,-752.7178,1015.652,1264.173,323.4572,189,1,325,1263.715,-34.03603
  315,-848.8593,936.7878,1264.173,317.8191,168,1,320,1263.257,-48.10837
  316,-936.788,848.8592,1264.173,312.1809,147,1,310,1263.257,48.10814
  317,-1015.652,752.7176,1264.173,306.5428,126,1,305,1263.715,34.03587
  318,-1084.69,649.2927,1264.173,300.9046,105,1,300,1264.015,19.95897
  319,-1143.233,539.5858,1264.173,295.2665,84,1,295,1264.16,5.879678
  320,-1190.714,424.658,1264.173,289.6284,63,1,290,1264.147,-8.200238
  321,-1226.674,305.6214,1264.173,283.9902,42,1,285,1263.977,-22.27909
  322,-1250.766,183.6277,1264.173,278.3521,21,1,280,1263.65,-36.35531
  323,-1262.755,59.85741,1264.173,272.7139,0,1,275,1263.167,-50.42691
  324,-1262.755,-59.85793,1264.173,267.2861,0,9,265,1263.167,50.4263
  325,-1250.766,-183.6283,1264.173,261.6479,21,9,260,1263.65,36.35466
  326,-1226.674,-305.6219,1264.173,256.0098,42,9,255,1263.977,22.2785
  327,-1190.714,-424.6585,1264.173,250.3716,63,9,250,1264.146,8.199594
  328,-1143.232,-539.5862,1264.173,244.7335,84,9,245,1264.159,-5.880279
  329,-1084.69,-649.2932,1264.173,239.0954,105,9,240,1264.016,-19.95957
  330,-1015.652,-752.718,1264.173,233.4572,126,9,235,1263.715,-34.03627
  331,-936.7876,-848.8596,1264.173,227.819,147,9,230,1263.257,-48.10884
  332,-848.859,-936.7882,1264.173,222.1809,168,9,220,1263.257,48.10806
  333,-752.7173,-1015.653,1264.173,216.5428,189,9,215,1263.715,34.03568
  334,-649.2929,-1084.69,1264.173,210.9046,210,9,210,1264.015,19.95929
  335,-539.5862,-1143.233,1264.173,205.2665,231,9,205,1264.16,5.880334
  336,-424.6587,-1190.713,1264.173,199.6284,252,9,200,1264.146,-8.199211
  337,-305.6224,-1226.674,1264.173,193.9902,273,9,195,1263.977,-22.27791
  338,-183.629,-1250.765,1264.173,188.3521,294,9,190,1263.65,-36.35375
  339,-59.85901,-1262.755,1264.173,182.714,315,9,185,1263.167,-50.4251
  340,59.85603,-1262.755,1264.173,177.2861,315,25,175,1263.167,50.42812
  341,183.6261,-1250.766,1264.173,171.648,294,25,170,1263.65,36.35678
  342,305.6195,-1226.675,1264.173,166.0099,273,25,165,1263.977,22.28096
  343,424.6558,-1190.715,1264.173,160.3718,252,25,160,1264.146,8.202423
  344,539.5834,-1143.234,1264.173,154.7336,231,25,155,1264.159,-5.877333
  345,649.2903,-1084.692,1264.173,149.0955,210,25,150,1264.016,-19.95623
  346,752.715,-1015.654,1264.173,143.4574,189,25,145,1263.715,-34.03279
  347,848.8567,-936.7903,1264.173,137.8192,168,25,140,1263.258,-48.10491
  348,936.7852,-848.8623,1264.173,132.1811,147,25,130,1263.257,48.11209
  349,1015.65,-752.7211,1264.173,126.543,126,25,125,1263.715,34.03989
  350,1084.688,-649.2968,1264.173,120.9048,105,25,120,1264.016,19.96346
  351,1143.231,-539.5903,1264.173,115.2667,84,25,115,1264.16,5.884534
  352,1190.712,-424.663,1264.173,109.6286,63,25,110,1264.147,-8.195109
  353,1226.673,-305.6269,1264.173,103.9904,42,25,105,1263.977,-22.27368
  354,1250.765,-183.6336,1264.173,98.35233,21,25,100,1263.651,-36.34958
  355,1262.755,-59.86362,1264.173,92.7142,0,25,95,1263.167,-50.42088
  356,1383.4,59.8614,1384.695,87.52228,0,16,90,1383.4,-59.8614
  357,1372.911,180.2677,1384.695,82.51965,21,16,85,1383.398,-59.92472
  358,1351.961,299.3006,1384.695,77.51703,42,16,80,1383.395,-59.98803
  359,1320.712,416.0533,1384.695,72.5144,63,16,75,1383.392,-60.05131
  360,1279.4,529.6362,1384.695,67.51181,84,16,70,1383.389,-60.11462
  361,1228.342,639.1841,1384.695,62.50919,105,16,65,1383.386,-60.17786
  362,1167.925,743.8622,1384.695,57.50656,126,16,60,1383.384,-60.2411
  363,1098.61,842.8732,1384.695,52.50394,147,16,55,1383.381,-60.3045
  364,1020.925,935.4628,1384.695,47.50131,168,16,50,1383.378,-60.36787
  365,935.4629,1020.925,1384.695,42.49869,189,16,40,1383.378,60.36789
  366,842.8735,1098.61,1384.695,37.49606,210,16,35,1383.381,60.30472
  367,743.8624,1167.925,1384.695,32.49344,231,16,30,1383.383,60.24147
  368,639.1841,1228.342,1384.695,27.49084,252,16,25,1383.386,60.17803
  369,529.6364,1279.4,1384.695,22.48822,273,16,20,1383.389,60.1147
  370,416.0534,1320.711,1384.695,17.4856,294,16,15,1383.392,60.05143
  371,299.3008,1351.961,1384.695,12.48297,315,16,10,1383.395,59.98808
  372,180.2678,1372.911,1384.695,7.480347,336,16,5,1383.398,59.92471
  373,59.86152,1383.4,1384.695,2.477722,357,16,0,1383.4,59.86158
  374,-59.86131,1383.4,1384.695,357.5223,357,0,0,1383.4,-59.86125
  375,-180.2676,1372.911,1384.695,352.5197,336,0,355,1383.398,-59.92458
  376,-299.3005,1351.961,1384.695,347.5171,315,0,350,1383.395,-59.9879
  377,-416.0532,1320.712,1384.695,342.5144,294,0,345,1383.392,-60.05119
  378,-529.6362,1279.4,1384.695,337.5118,273,0,340,1383.389,-60.11455
  379,-639.1841,1228.342,1384.695,332.5092,252,0,335,1383.387,-60.17791
  380,-743.8624,1167.925,1384.695,327.5066,231,0,330,1383.384,-60.24115
  381,-842.8732,1098.61,1384.695,322.5039,210,0,325,1383.381,-60.3045
  382,-935.4629,1020.925,1384.695,317.5013,189,0,320,1383.378,-60.36789
  383,-1020.925,935.4629,1384.695,312.4987,168,0,310,1383.378,60.36789
  384,-1098.61,842.8732,1384.695,307.4961,147,0,305,1383.381,60.3045
  385,-1167.925,743.8624,1384.695,302.4935,126,0,300,1383.384,60.24115
  386,-1228.342,639.1841,1384.695,297.4908,105,0,295,1383.387,60.17791
  387,-1279.4,529.6363,1384.695,292.4882,84,0,290,1383.389,60.11456
  388,-1320.712,416.0533,1384.695,287.4856,63,0,285,1383.392,60.05119
  389,-1351.961,299.3007,1384.695,282.483,42,0,280,1383.395,59.98793
  390,-1372.911,180.2678,1384.695,277.4803,21,0,275,1383.398,59.92456
  391,-1383.4,59.86146,1384.695,272.4777,0,0,270,1383.4,59.86158
  392,-1383.4,-59.86137,1384.695,267.5223,0,8,270,1383.4,-59.86125
  393,-1372.911,-180.2677,1384.695,262.5197,21,8,265,1383.398,-59.92459
  394,-1351.961,-299.3006,1384.695,257.517,42,8,260,1383.395,-59.98788
  395,-1320.712,-416.0533,1384.695,252.5144,63,8,255,1383.392,-60.05122
  396,-1279.4,-529.6362,1384.695,247.5118,84,8,250,1383.389,-60.11453
  397,-1228.342,-639.1841,1384.695,242.5092,105,8,245,1383.386,-60.17786
  398,-1167.925,-743.8622,1384.695,237.5065,126,8,240,1383.384,-60.24114
  399,-1098.61,-842.8732,1384.695,232.5039,147,8,235,1383.381,-60.30455
  400,-1020.925,-935.4628,1384.695,227.5013,168,8,230,1383.378,-60.36789
  401,-935.463,-1020.925,1384.695,222.4987,189,8,220,1383.378,60.3681
  402,-842.8735,-1098.61,1384.695,217.4961,210,8,215,1383.381,60.30496
  403,-743.8624,-1167.925,1384.695,212.4934,231,8,210,1383.383,60.24152
  404,-639.1842,-1228.342,1384.695,207.4908,252,8,205,1383.386,60.17819
  405,-529.6364,-1279.4,1384.695,202.4882,273,8,200,1383.389,60.11485
  406,-416.0535,-1320.711,1384.695,197.4856,294,8,195,1383.392,60.05163
  407,-299.3008,-1351.961,1384.695,192.483,315,8,190,1383.395,59.98824
  408,-180.2679,-1372.911,1384.695,187.4803,336,8,185,1383.398,59.9249
  409,-59.86156,-1383.4,1384.695,182.4777,357,8,180,1383.4,59.86158
  410,59.86094,-1383.4,1384.694,177.5223,357,24,180,1383.4,-59.86092
  411,180.2672,-1372.911,1384.695,172.5197,336,24,175,1383.398,-59.92423
  412,299.3002,-1351.961,1384.695,167.5171,315,24,170,1383.395,-59.9876
  413,416.0528,-1320.712,1384.695,162.5144,294,24,165,1383.392,-60.05083
  414,529.6358,-1279.4,1384.695,157.5118,273,24,160,1383.389,-60.11422
  415,639.1837,-1228.342,1384.695,152.5092,252,24,155,1383.387,-60.17754
  416,743.8619,-1167.925,1384.695,147.5066,231,24,150,1383.384,-60.24081
  417,842.8729,-1098.61,1384.695,142.504,210,24,145,1383.381,-60.30416
  418,935.4624,-1020.926,1384.695,137.5013,189,24,140,1383.378,-60.3675
  419,1020.925,-935.4632,1384.695,132.4987,168,24,130,1383.378,60.36814
  420,1098.61,-842.8737,1384.695,127.4961,147,24,125,1383.381,60.30489
  421,1167.925,-743.8628,1384.695,122.4935,126,24,120,1383.384,60.24154
  422,1228.341,-639.1846,1384.695,117.4908,105,24,115,1383.386,60.17819
  423,1279.4,-529.6368,1384.695,112.4882,84,24,110,1383.389,60.11491
  424,1320.711,-416.0538,1384.695,107.4856,63,24,105,1383.392,60.05155
  425,1351.961,-299.3012,1384.695,102.483,42,24,100,1383.395,59.98823
  426,1372.91,-180.2683,1384.695,97.48035,21,24,95,1383.398,59.92488
  427,1383.4,-59.86199,1384.695,92.47772,0,24,90,1383.4,59.86223`;
  return baseData;
}

function loadPathData()
{
  var pathData = `PathId,Host,Universe,ChannelStart,Fixture0,Fixture1,DistanceFt
  0,192.168.0.200,1,0,391,390,10.07186
  0,192.168.0.200,1,0,390,389,10.07186
  0,192.168.0.200,1,0,389,388,10.07185
  0,192.168.0.200,1,0,388,387,10.07186
  0,192.168.0.200,1,0,387,386,10.07186
  0,192.168.0.200,1,0,386,385,10.07186
  0,192.168.0.200,1,0,385,384,10.07186
  0,192.168.0.200,1,0,384,383,10.07187
  0,192.168.0.200,1,0,383,382,10.07185
  0,192.168.0.200,1,0,382,381,10.07187
  0,192.168.0.200,1,0,381,380,10.07186
  0,192.168.0.200,1,0,380,379,10.07186
  0,192.168.0.200,1,0,379,378,10.07187
  0,192.168.0.200,1,0,378,377,10.07186
  0,192.168.0.200,1,0,377,376,10.07186
  0,192.168.0.200,1,0,376,375,10.07186
  0,192.168.0.200,1,0,375,374,10.07186
  1,192.168.0.220,2,0,323,322,10.36247
  1,192.168.0.220,2,0,322,321,10.36247
  1,192.168.0.220,2,0,321,320,10.36247
  1,192.168.0.220,2,0,320,319,10.36247
  1,192.168.0.220,2,0,319,318,10.36248
  1,192.168.0.220,2,0,318,317,10.36248
  1,192.168.0.220,2,0,317,316,10.36246
  1,192.168.0.220,2,0,316,315,10.36248
  1,192.168.0.220,2,0,315,314,10.36246
  1,192.168.0.220,2,0,314,313,10.36248
  1,192.168.0.220,2,0,313,312,10.36246
  1,192.168.0.220,2,0,312,311,10.36248
  1,192.168.0.220,2,0,311,310,10.36247
  1,192.168.0.220,2,0,310,309,10.36247
  1,192.168.0.220,2,0,309,308,10.36247
  2,192.168.0.220,3,0,263,262,10.74227
  2,192.168.0.220,3,0,262,261,10.74227
  2,192.168.0.220,3,0,261,260,10.74228
  2,192.168.0.220,3,0,260,259,10.74227
  2,192.168.0.220,3,0,259,258,10.74228
  2,192.168.0.220,3,0,258,257,10.74227
  2,192.168.0.220,3,0,257,256,10.74227
  2,192.168.0.220,3,0,256,255,10.74227
  2,192.168.0.220,3,0,255,254,10.74228
  2,192.168.0.220,3,0,254,253,10.74227
  2,192.168.0.220,3,0,253,252,10.74227
  2,192.168.0.220,3,0,252,251,10.74227
  2,192.168.0.220,3,0,251,250,10.74227
  3,192.168.0.220,4,0,209,208,10.32262
  3,192.168.0.220,4,0,208,207,10.32263
  3,192.168.0.220,4,0,207,206,10.32262
  3,192.168.0.220,4,0,206,205,10.32262
  3,192.168.0.220,4,0,205,204,10.32263
  3,192.168.0.220,4,0,204,203,10.32263
  3,192.168.0.220,4,0,203,202,10.32262
  3,192.168.0.220,4,0,202,201,10.32262
  3,192.168.0.220,4,0,201,200,10.32263
  3,192.168.0.220,4,0,200,199,10.32262
  3,192.168.0.220,4,0,199,198,10.32263
  3,192.168.0.220,4,0,198,197,10.32263
  4,192.168.0.221,1,0,161,160,10.8078
  4,192.168.0.221,1,0,160,159,10.80779
  4,192.168.0.221,1,0,159,158,10.8078
  4,192.168.0.221,1,0,158,157,10.8078
  4,192.168.0.221,1,0,157,156,10.80779
  4,192.168.0.221,1,0,156,155,10.80779
  4,192.168.0.221,1,0,155,154,10.80779
  4,192.168.0.221,1,0,154,153,10.80779
  4,192.168.0.221,1,0,153,152,10.80779
  4,192.168.0.221,1,0,152,151,10.8078
  5,192.168.0.221,2,0,119,118,10.25549
  5,192.168.0.221,2,0,118,117,10.25549
  5,192.168.0.221,2,0,117,116,10.25549
  5,192.168.0.221,2,0,116,115,10.25549
  5,192.168.0.221,2,0,115,114,10.25548
  5,192.168.0.221,2,0,114,113,10.25549
  5,192.168.0.221,2,0,113,112,10.25549
  5,192.168.0.221,2,0,112,111,10.25549
  5,192.168.0.221,2,0,111,110,10.25549
  6,192.168.0.221,3,0,83,82,10.92755
  6,192.168.0.221,3,0,82,81,10.92755
  6,192.168.0.221,3,0,81,80,10.92755
  6,192.168.0.221,3,0,80,79,10.92756
  6,192.168.0.221,3,0,79,78,10.92755
  6,192.168.0.221,3,0,78,77,10.92756
  6,192.168.0.221,3,0,77,76,10.92756
  6,192.168.0.221,3,0,76,47,10.09364
  6,192.168.0.221,3,0,47,48,10.11904
  6,192.168.0.221,3,0,48,49,10.11903
  6,192.168.0.221,3,0,49,50,10.11904
  6,192.168.0.221,3,0,50,51,10.11904
  6,192.168.0.221,3,0,51,52,10.11904
  6,192.168.0.221,3,0,52,53,10.11904
  7,192.168.0.221,4,0,29,28,11.21808
  7,192.168.0.221,4,0,28,27,11.21808
  7,192.168.0.221,4,0,27,26,11.21808
  7,192.168.0.221,4,0,26,25,11.21808
  7,192.168.0.221,4,0,25,5,10.18515
  7,192.168.0.221,4,0,5,6,7.296336
  7,192.168.0.221,4,0,6,7,7.296334
  7,192.168.0.221,4,0,7,8,7.296334
  7,192.168.0.221,4,0,8,9,7.296336
  8,192.168.0.222,1,0,392,393,10.07186
  8,192.168.0.222,1,0,393,394,10.07186
  8,192.168.0.222,1,0,394,395,10.07186
  8,192.168.0.222,1,0,395,396,10.07186
  8,192.168.0.222,1,0,396,397,10.07186
  8,192.168.0.222,1,0,397,398,10.07185
  8,192.168.0.222,1,0,398,399,10.07187
  8,192.168.0.222,1,0,399,400,10.07186
  8,192.168.0.222,1,0,400,401,10.07186
  8,192.168.0.222,1,0,401,402,10.07186
  8,192.168.0.222,1,0,402,403,10.07186
  8,192.168.0.222,1,0,403,404,10.07186
  8,192.168.0.222,1,0,404,405,10.07186
  8,192.168.0.222,1,0,405,406,10.07185
  8,192.168.0.222,1,0,406,407,10.07186
  8,192.168.0.222,1,0,407,408,10.07186
  8,192.168.0.222,1,0,408,409,10.07186
  9,192.168.0.222,2,0,324,325,10.36247
  9,192.168.0.222,2,0,325,326,10.36247
  9,192.168.0.222,2,0,326,327,10.36248
  9,192.168.0.222,2,0,327,328,10.36247
  9,192.168.0.222,2,0,328,329,10.36246
  9,192.168.0.222,2,0,329,330,10.36248
  9,192.168.0.222,2,0,330,331,10.36248
  9,192.168.0.222,2,0,331,332,10.36248
  9,192.168.0.222,2,0,332,333,10.36246
  9,192.168.0.222,2,0,333,334,10.36244
  9,192.168.0.222,2,0,334,335,10.36245
  9,192.168.0.222,2,0,335,336,10.36244
  9,192.168.0.222,2,0,336,337,10.36245
  9,192.168.0.222,2,0,337,338,10.36245
  9,192.168.0.222,2,0,338,339,10.36245
  10,192.168.0.222,3,0,264,265,10.74227
  10,192.168.0.222,3,0,265,266,10.74227
  10,192.168.0.222,3,0,266,267,10.74227
  10,192.168.0.222,3,0,267,268,10.74227
  10,192.168.0.222,3,0,268,269,10.74227
  10,192.168.0.222,3,0,269,270,10.74228
  10,192.168.0.222,3,0,270,271,10.74226
  10,192.168.0.222,3,0,271,272,10.74228
  10,192.168.0.222,3,0,272,273,10.74227
  10,192.168.0.222,3,0,273,274,10.74228
  10,192.168.0.222,3,0,274,275,10.74227
  10,192.168.0.222,3,0,275,276,10.74227
  10,192.168.0.222,3,0,276,277,10.74227
  11,192.168.0.222,4,0,210,211,10.32263
  11,192.168.0.222,4,0,211,212,10.32262
  11,192.168.0.222,4,0,212,213,10.32262
  11,192.168.0.222,4,0,213,214,10.32263
  11,192.168.0.222,4,0,214,215,10.32263
  11,192.168.0.222,4,0,215,216,10.32262
  11,192.168.0.222,4,0,216,217,10.32262
  11,192.168.0.222,4,0,217,218,10.32263
  11,192.168.0.222,4,0,218,219,10.32263
  11,192.168.0.222,4,0,219,220,10.32262
  11,192.168.0.222,4,0,220,221,10.32263
  11,192.168.0.222,4,0,221,222,10.32262
  12,192.168.0.223,1,0,162,163,10.80779
  12,192.168.0.223,1,0,163,164,10.80779
  12,192.168.0.223,1,0,164,165,10.8078
  12,192.168.0.223,1,0,165,166,10.80779
  12,192.168.0.223,1,0,166,167,10.80781
  12,192.168.0.223,1,0,167,168,10.80777
  12,192.168.0.223,1,0,168,169,10.80778
  12,192.168.0.223,1,0,169,170,10.80777
  12,192.168.0.223,1,0,170,171,10.80778
  12,192.168.0.223,1,0,171,172,10.80778
  13,192.168.0.223,2,0,120,121,10.25549
  13,192.168.0.223,2,0,121,122,10.25549
  13,192.168.0.223,2,0,122,123,10.25548
  13,192.168.0.223,2,0,123,124,10.25549
  13,192.168.0.223,2,0,124,125,10.25549
  13,192.168.0.223,2,0,125,126,10.25547
  13,192.168.0.223,2,0,126,127,10.25548
  13,192.168.0.223,2,0,127,128,10.25547
  13,192.168.0.223,2,0,128,129,10.25547
  14,192.168.0.223,3,0,84,85,10.92756
  14,192.168.0.223,3,0,85,86,10.92755
  14,192.168.0.223,3,0,86,87,10.92755
  14,192.168.0.223,3,0,87,88,10.92756
  14,192.168.0.223,3,0,88,89,10.92756
  14,192.168.0.223,3,0,89,90,10.92755
  14,192.168.0.223,3,0,90,91,10.92756
  14,192.168.0.223,3,0,91,60,10.09365
  14,192.168.0.223,3,0,60,59,10.11905
  14,192.168.0.223,3,0,59,58,10.11905
  14,192.168.0.223,3,0,58,57,10.11904
  14,192.168.0.223,3,0,57,56,10.11904
  14,192.168.0.223,3,0,56,55,10.11904
  14,192.168.0.223,3,0,55,54,10.11904
  15,192.168.0.223,4,0,30,31,11.21808
  15,192.168.0.223,4,0,31,32,11.21808
  15,192.168.0.223,4,0,32,33,11.21809
  15,192.168.0.223,4,0,33,34,11.21808
  15,192.168.0.223,4,0,34,14,10.18515
  15,192.168.0.223,4,0,14,13,7.296334
  15,192.168.0.223,4,0,13,12,7.296329
  15,192.168.0.223,4,0,12,11,7.296335
  15,192.168.0.223,4,0,11,10,7.296336
  16,192.168.0.224,1,0,356,357,10.07186
  16,192.168.0.224,1,0,357,358,10.07186
  16,192.168.0.224,1,0,358,359,10.07186
  16,192.168.0.224,1,0,359,360,10.07186
  16,192.168.0.224,1,0,360,361,10.07186
  16,192.168.0.224,1,0,361,362,10.07185
  16,192.168.0.224,1,0,362,363,10.07187
  16,192.168.0.224,1,0,363,364,10.07186
  16,192.168.0.224,1,0,364,365,10.07186
  16,192.168.0.224,1,0,365,366,10.07185
  16,192.168.0.224,1,0,366,367,10.07187
  16,192.168.0.224,1,0,367,368,10.07187
  16,192.168.0.224,1,0,368,369,10.07185
  16,192.168.0.224,1,0,369,370,10.07186
  16,192.168.0.224,1,0,370,371,10.07186
  16,192.168.0.224,1,0,371,372,10.07187
  16,192.168.0.224,1,0,372,373,10.07185
  17,192.168.0.224,2,0,292,293,10.36247
  17,192.168.0.224,2,0,293,294,10.36247
  17,192.168.0.224,2,0,294,295,10.36247
  17,192.168.0.224,2,0,295,296,10.36247
  17,192.168.0.224,2,0,296,297,10.36247
  17,192.168.0.224,2,0,297,298,10.36248
  17,192.168.0.224,2,0,298,299,10.36246
  17,192.168.0.224,2,0,299,300,10.36247
  17,192.168.0.224,2,0,300,301,10.36247
  17,192.168.0.224,2,0,301,302,10.36246
  17,192.168.0.224,2,0,302,303,10.36247
  17,192.168.0.224,2,0,303,304,10.36247
  17,192.168.0.224,2,0,304,305,10.36247
  17,192.168.0.224,2,0,305,306,10.36247
  17,192.168.0.224,2,0,306,307,10.36247
  18,192.168.0.224,3,0,236,237,10.74227
  18,192.168.0.224,3,0,237,238,10.74227
  18,192.168.0.224,3,0,238,239,10.74228
  18,192.168.0.224,3,0,239,240,10.74227
  18,192.168.0.224,3,0,240,241,10.74227
  18,192.168.0.224,3,0,241,242,10.74227
  18,192.168.0.224,3,0,242,243,10.74227
  18,192.168.0.224,3,0,243,244,10.74228
  18,192.168.0.224,3,0,244,245,10.74227
  18,192.168.0.224,3,0,245,246,10.74227
  18,192.168.0.224,3,0,246,247,10.74228
  18,192.168.0.224,3,0,247,248,10.74227
  18,192.168.0.224,3,0,248,249,10.74227
  19,192.168.0.224,4,0,184,185,10.32263
  19,192.168.0.224,4,0,185,186,10.32263
  19,192.168.0.224,4,0,186,187,10.32263
  19,192.168.0.224,4,0,187,188,10.32263
  19,192.168.0.224,4,0,188,189,10.32262
  19,192.168.0.224,4,0,189,190,10.32263
  19,192.168.0.224,4,0,190,191,10.32263
  19,192.168.0.224,4,0,191,192,10.32262
  19,192.168.0.224,4,0,192,193,10.32263
  19,192.168.0.224,4,0,193,194,10.32262
  19,192.168.0.224,4,0,194,195,10.32263
  19,192.168.0.224,4,0,195,196,10.32262
  20,192.168.0.225,1,0,140,141,10.80779
  20,192.168.0.225,1,0,141,142,10.80779
  20,192.168.0.225,1,0,142,143,10.80779
  20,192.168.0.225,1,0,143,144,10.8078
  20,192.168.0.225,1,0,144,145,10.80778
  20,192.168.0.225,1,0,145,146,10.80779
  20,192.168.0.225,1,0,146,147,10.80779
  20,192.168.0.225,1,0,147,148,10.8078
  20,192.168.0.225,1,0,148,149,10.80779
  20,192.168.0.225,1,0,149,150,10.8078
  21,192.168.0.225,2,0,100,101,10.25549
  21,192.168.0.225,2,0,101,102,10.25548
  21,192.168.0.225,2,0,102,103,10.25548
  21,192.168.0.225,2,0,103,104,10.25549
  21,192.168.0.225,2,0,104,105,10.25549
  21,192.168.0.225,2,0,105,106,10.25549
  21,192.168.0.225,2,0,106,107,10.25549
  21,192.168.0.225,2,0,107,108,10.25549
  21,192.168.0.225,2,0,108,109,10.25549
  22,192.168.0.225,3,0,68,69,10.92755
  22,192.168.0.225,3,0,69,70,10.92755
  22,192.168.0.225,3,0,70,71,10.92755
  22,192.168.0.225,3,0,71,72,10.92755
  22,192.168.0.225,3,0,72,73,10.92755
  22,192.168.0.225,3,0,73,74,10.92755
  22,192.168.0.225,3,0,74,75,10.92756
  22,192.168.0.225,3,0,75,46,10.09364
  22,192.168.0.225,3,0,46,45,10.11904
  22,192.168.0.225,3,0,45,44,10.11904
  22,192.168.0.225,3,0,44,43,10.11904
  22,192.168.0.225,3,0,43,42,10.11904
  22,192.168.0.225,3,0,42,41,10.11904
  22,192.168.0.225,3,0,41,40,10.11904
  23,192.168.0.225,4,0,20,21,11.21808
  23,192.168.0.225,4,0,21,22,11.21808
  23,192.168.0.225,4,0,22,23,11.21808
  23,192.168.0.225,4,0,23,24,11.21808
  23,192.168.0.225,4,0,24,4,10.18515
  23,192.168.0.225,4,0,4,3,7.296334
  23,192.168.0.225,4,0,3,2,7.296334
  23,192.168.0.225,4,0,2,1,7.296337
  23,192.168.0.225,4,0,1,0,7.296335
  24,192.168.0.226,1,0,427,426,10.07186
  24,192.168.0.226,1,0,426,425,10.07186
  24,192.168.0.226,1,0,425,424,10.07186
  24,192.168.0.226,1,0,424,423,10.07186
  24,192.168.0.226,1,0,423,422,10.07186
  24,192.168.0.226,1,0,422,421,10.07186
  24,192.168.0.226,1,0,421,420,10.07186
  24,192.168.0.226,1,0,420,419,10.07186
  24,192.168.0.226,1,0,419,418,10.07186
  24,192.168.0.226,1,0,418,417,10.07186
  24,192.168.0.226,1,0,417,416,10.07186
  24,192.168.0.226,1,0,416,415,10.07186
  24,192.168.0.226,1,0,415,414,10.07186
  24,192.168.0.226,1,0,414,413,10.07186
  24,192.168.0.226,1,0,413,412,10.07186
  24,192.168.0.226,1,0,412,411,10.07186
  24,192.168.0.226,1,0,411,410,10.07186
  25,192.168.0.226,2,0,355,354,10.36244
  25,192.168.0.226,2,0,354,353,10.36245
  25,192.168.0.226,2,0,353,352,10.36244
  25,192.168.0.226,2,0,352,351,10.36244
  25,192.168.0.226,2,0,351,350,10.36245
  25,192.168.0.226,2,0,350,349,10.36245
  25,192.168.0.226,2,0,349,348,10.36245
  25,192.168.0.226,2,0,348,347,10.36243
  25,192.168.0.226,2,0,347,346,10.36244
  25,192.168.0.226,2,0,346,345,10.36246
  25,192.168.0.226,2,0,345,344,10.36244
  25,192.168.0.226,2,0,344,343,10.36245
  25,192.168.0.226,2,0,343,342,10.36244
  25,192.168.0.226,2,0,342,341,10.36244
  25,192.168.0.226,2,0,341,340,10.36245
  26,192.168.0.226,3,0,291,290,10.74227
  26,192.168.0.226,3,0,290,289,10.74227
  26,192.168.0.226,3,0,289,288,10.74227
  26,192.168.0.226,3,0,288,287,10.74228
  26,192.168.0.226,3,0,287,286,10.74228
  26,192.168.0.226,3,0,286,285,10.74227
  26,192.168.0.226,3,0,285,284,10.74226
  26,192.168.0.226,3,0,284,283,10.74227
  26,192.168.0.226,3,0,283,282,10.74228
  26,192.168.0.226,3,0,282,281,10.74227
  26,192.168.0.226,3,0,281,280,10.74228
  26,192.168.0.226,3,0,280,279,10.74227
  26,192.168.0.226,3,0,279,278,10.74227
  27,192.168.0.226,4,0,235,234,10.32262
  27,192.168.0.226,4,0,234,233,10.32263
  27,192.168.0.226,4,0,233,232,10.32262
  27,192.168.0.226,4,0,232,231,10.32263
  27,192.168.0.226,4,0,231,230,10.32262
  27,192.168.0.226,4,0,230,229,10.32263
  27,192.168.0.226,4,0,229,228,10.32263
  27,192.168.0.226,4,0,228,227,10.32262
  27,192.168.0.226,4,0,227,226,10.32263
  27,192.168.0.226,4,0,226,225,10.32262
  27,192.168.0.226,4,0,225,224,10.32263
  27,192.168.0.226,4,0,224,223,10.32262
  28,192.168.0.227,1,0,183,182,10.80778
  28,192.168.0.227,1,0,182,181,10.80778
  28,192.168.0.227,1,0,181,180,10.80778
  28,192.168.0.227,1,0,180,179,10.80778
  28,192.168.0.227,1,0,179,178,10.80778
  28,192.168.0.227,1,0,178,177,10.80778
  28,192.168.0.227,1,0,177,176,10.80777
  28,192.168.0.227,1,0,176,175,10.80778
  28,192.168.0.227,1,0,175,174,10.80778
  28,192.168.0.227,1,0,174,173,10.80778
  29,192.168.0.227,2,0,139,138,10.25547
  29,192.168.0.227,2,0,138,137,10.25547
  29,192.168.0.227,2,0,137,136,10.25547
  29,192.168.0.227,2,0,136,135,10.25547
  29,192.168.0.227,2,0,135,134,10.25547
  29,192.168.0.227,2,0,134,133,10.25547
  29,192.168.0.227,2,0,133,132,10.25547
  29,192.168.0.227,2,0,132,131,10.25547
  29,192.168.0.227,2,0,131,130,10.25547
  30,192.168.0.227,3,0,99,98,10.92756
  30,192.168.0.227,3,0,98,97,10.92755
  30,192.168.0.227,3,0,97,96,10.92755
  30,192.168.0.227,3,0,96,95,10.92755
  30,192.168.0.227,3,0,95,94,10.92755
  30,192.168.0.227,3,0,94,93,10.92756
  30,192.168.0.227,3,0,93,92,10.92755
  30,192.168.0.227,3,0,92,61,10.09363
  30,192.168.0.227,3,0,61,62,10.11905
  30,192.168.0.227,3,0,62,63,10.11905
  30,192.168.0.227,3,0,63,64,10.11905
  30,192.168.0.227,3,0,64,65,10.11905
  30,192.168.0.227,3,0,65,66,10.11904
  30,192.168.0.227,3,0,66,67,10.11905
  31,192.168.0.227,4,0,39,38,11.21808
  31,192.168.0.227,4,0,38,37,11.21808
  31,192.168.0.227,4,0,37,36,11.21807
  31,192.168.0.227,4,0,36,35,11.21808
  31,192.168.0.227,4,0,35,15,10.18515
  31,192.168.0.227,4,0,15,16,7.296336
  31,192.168.0.227,4,0,16,17,7.296333
  31,192.168.0.227,4,0,17,18,7.296339
  31,192.168.0.227,4,0,18,19,7.296334`;
  return pathData;
}

async function importCSV() {

  const nodes: SceneNode[] = [];
  const lines: SceneNode[] = [];
  const portals: SceneNode[] = [];
  const booths: SceneNode[] = [];
  const pageNode = figma.currentPage;

  // make sure we are on the right page
  if (pageNode.name != "Assets")
  {
    console.error(`need to be on the Assets page to run`);
    return;
  }

  // import the CSV data
  buildMaps();
  
  console.log(`finding node 'Wiring Plan'`);
  const planNode = pageNode.findOne(node => node.type === "FRAME" && node.name === "Base Layout") as FrameNode;
  if (planNode == null)
  {
    console.log(`planNode is null !`);
    return;
  }

  console.log(`finding node 'Map'`);
  const mapNode = planNode.findOne(node => node.type === "FRAME" && node.name === "Map") as FrameNode;

  if (mapNode == null)
  {
    console.log(`mapNode is null !`);
    return;
  }

  // first get rid of old lights & wiring path data
  console.log(`finding and deleting node 'Lights'`);
  const lightsGroup = mapNode.findOne(node => node.type === "GROUP" && node.name === "Lights") as FrameNode;
  if (lightsGroup != null)
  {
    lightsGroup.remove();
  }

  console.log(`finding and deleting node 'Wiring Paths'`);
  const pathsGroup = mapNode.findOne(node => node.type === "GROUP" && node.name === "Wiring Paths") as FrameNode;
  if (pathsGroup != null)
  {
    pathsGroup.remove();
  }

  console.log(`finding and deleting node 'Portals'`);
  const portalsGroup = mapNode.findOne(node => node.type === "GROUP" && node.name === "Portals") as FrameNode;
  if (portalsGroup != null)
  {
    portalsGroup.remove();
  }

  console.log(`finding and deleting node 'Booths'`);
  const boothsGroup = mapNode.findOne(node => node.type === "GROUP" && node.name === "Booths") as FrameNode;
  if (boothsGroup != null)
  {
    boothsGroup.remove();
  }

  // now we draw the wiring path lines

  var testLoopMax = 500;
  for (let path of pathList) {

    var cols = path.split(",");
    console.log(`path = ${path} cols.length = ${cols.length}`);

    const line = figma.createLine();
    var startNodeId = cols[4];
    var endNodeId = cols[5];

    console.log(`startNodeId = ${startNodeId} endNodeId = ${endNodeId}`);

    console.log(`(lightBaseMap.get(startNodeId) = ${lightBaseMap.get(startNodeId)} lightBaseMap.get(endNodeId) = ${lightBaseMap.get(endNodeId)}`);

    var startX = parseFloat(lightBaseMap.get(startNodeId)[1]);
    var startZ = -parseFloat(lightBaseMap.get(startNodeId)[2]);
    var endX = parseFloat(lightBaseMap.get(endNodeId)[1]);
    var endZ = -parseFloat(lightBaseMap.get(endNodeId)[2]);

    console.log(`processing path from node ${cols[4]} to ${cols[5]}`);

    var length = Math.sqrt((endX - startX)*(endX - startX) + (endZ - startZ)*(endZ - startZ));
    var rot = -Math.atan2(endZ - startZ, endX - startX) * 180 / Math.PI;

    line.resize(length,0);
    line.x = startX;
    line.y = startZ;
    line.rotation = rot;

    // add the length of the line
    var lineLength = figma.createText();
    lineLength.fontSize = 8;
    lineLength.characters = parseFloat(cols[6]).toFixed(2) + " (ft)";
    lineLength.x = ((startX + endX) / 2) + 10;
    lineLength.y = (startZ + endZ) / 2;

    // for now just put node in the main page; group later
    pageNode.appendChild(lineLength);
    lines.push(lineLength);

    // for now just put node in the main page; group later
    pageNode.appendChild(line);
    lines.push(line);

    testLoopMax -=1;
    if (testLoopMax == 0)
      break;
  }

  console.log(`done processing paths`);

  // and now we group the new lines together
  figma.currentPage.selection = lines;
  figma.viewport.scrollAndZoomIntoView(lines);
  console.log(`figma.group()`);
  const newLines = figma.group(lines,mapNode);
  newLines.name = "Wiring Paths";

  // now add new lights and group together
  console.log(`finding node 'Light Base'`);
  const base = pageNode.findOne(node => node.type === "COMPONENT" && node.name === "Light Base") as ComponentNode;
  var testLoopMax = 500;
  for (let key of lightBaseMap.keys()) {
    const light = base.createInstance();
    console.log(`processing lightbase ${key}`);
    console.log(`    ${lightBaseMap.get(key)}`);
    console.log(`    ${lightBaseMap.get(key)[1]}`);
    console.log(`    ${lightBaseMap.get(key)[2]}`);

    light.x = parseFloat(lightBaseMap.get(key)[1]);
    light.y = -parseFloat(lightBaseMap.get(key)[2]);  // need to invert y because in unity, y axis runs bottom-to-top, and in figma, it runs top-to-bottom
    const id = light.findOne(node => node.type === "TEXT" && node.name === "#ID") as TextNode;
    id.characters = key;

    const univ = light.findOne(node => node.type === "TEXT" && node.name === "#Universe") as TextNode;
    univ.characters = `P${lightBaseMap.get(key)[6]}`;

    var chanStart = parseInt(lightBaseMap.get(key)[5]);
    var chanEnd = chanStart+20;

    const range = light.findOne(node => node.type === "TEXT" && node.name === "#Range") as TextNode;
    range.characters = `${chanStart}-${chanEnd}`;


    const angle = light.findOne(node => node.type === "TEXT" && node.name === "#A") as TextNode;
    angle.characters = `A=${parseFloat(lightBaseMap.get(key)[7]).toFixed(1)}°`;

    const radius1 = light.findOne(node => node.type === "TEXT" && node.name === "#R1") as TextNode;
    var R1I = Math.round(lightBaseMap.get(key)[8]);
    var R1F = Math.floor(R1I/12);
    R1I = R1I - (R1F*12);
    radius1.characters = `R1=${R1F}'-${R1I}"`;

    const radius2 = light.findOne(node => node.type === "TEXT" && node.name === "#R2") as TextNode;
    var R2I = Math.round(lightBaseMap.get(key)[9]);
    radius2.characters = `R2=${R2I}"`;

    light.name = `Light ${key}`;

    // for now just put light in the main page; group later
    pageNode.appendChild(light);
    nodes.push(light);

    testLoopMax -=1;
    if (testLoopMax == 0)
      break;
  }

  console.log(`done adding lights`);

  // and now we group the new lights together
  figma.currentPage.selection = nodes;
  figma.viewport.scrollAndZoomIntoView(nodes);
  const newLights = figma.group(nodes,mapNode);
  newLights.name = "Lights";

  // now we add the portals
  console.log(`finding node 'Portal Base'`);
  const portalBase = pageNode.findOne(node => node.type === "COMPONENT" && node.name === "Portal Base") as ComponentNode;
  for (let portal of portalList) {
    var cols = portal.split(",");
    console.log(`portal = ${portal} cols.length = ${cols.length}`);

    const portalInstance = portalBase.createInstance();
    var portalId = parseInt(cols[0]);
    var portalX = parseFloat(cols[1]);
    var portalZ = parseFloat(cols[2]);
    var portalA = parseFloat(cols[3]);

    console.log(`processing portal ${portalId} (${portalX},${portalZ}) angle ${portalA}`);

    portalInstance.x = portalX;
    portalInstance.y = -portalZ;
    portalInstance.rotation = portalA;

    const id = portalInstance.findOne(node => node.type === "TEXT" && node.name === "#ID") as TextNode;
    id.characters = `Portal ${portalId}`;
    portalInstance.name = `Portal ${portalId}`;

    // for now just put node in the main page; group later
    pageNode.appendChild(portalInstance);
    portals.push(portalInstance);
  }

  console.log(`done processing portals`);

  // and now we group the new portals together
  figma.currentPage.selection = portals;
  const newPortals = figma.group(portals,mapNode);
  newPortals.name = "Portals";

  // now we add the booths
  console.log(`finding node 'Booth Base'`);
  const boothBase = pageNode.findOne(node => node.type === "COMPONENT" && node.name === "Booth Base") as ComponentNode;
  for (let booth of boothList) {
    var cols = booth.split(",");
    console.log(`booth = ${booth} cols.length = ${cols.length}`);

    const boothInstance = boothBase.createInstance();
    var boothId = parseInt(cols[0]);
    var boothX = parseFloat(cols[1]);
    var boothZ = parseFloat(cols[2]);
    var boothA = parseFloat(cols[3]);

    console.log(`processing booth ${boothId} (${boothX},${boothZ}) angle ${boothA}`);

    boothInstance.x = boothX;
    boothInstance.y = -boothZ;
    boothInstance.rotation = boothA;

    const id = boothInstance.findOne(node => node.type === "TEXT" && node.name === "#ID") as TextNode;
    id.characters = `Booth ${boothId}`;
    boothInstance.name = `Booth ${boothId}`;

    // for now just put node in the main page; group later
    pageNode.appendChild(boothInstance);
    booths.push(boothInstance);
  }

  console.log(`done processing booths`);

  // and now we group the new booths together
  figma.currentPage.selection = booths;
  const newBooths = figma.group(booths,mapNode);
  newBooths.name = "Booths";
}


async function exportTags() 
{

  const pageNode = figma.currentPage;

  // make sure we are on the right page
  if (pageNode.name != "Landmarks")
  {
    console.error(`need to be on the Landmarks page to run`);
    return;
  }

  var tagNode = pageNode.findOne(node => node.type === "FRAME" && node.name === "Arms / direction A") as FrameNode;
  console.log(`found tagNode '${tagNode.name}'`);
  tagNode = tagNode.findOne(node => node.type === "FRAME" && node.name === "Map") as FrameNode;
  console.log(`found tagNode '${tagNode.name}'`);
  tagNode = tagNode.findOne(node => node.type === "GROUP" && node.name === "Lights") as FrameNode;
  console.log(`found tagNode '${tagNode.name}'`);

  for (let child of tagNode.children)
  {
    if (child.name.startsWith("CWArm"))
    {
      //console.log(`found child '${child.name}'`);
      // find the child lights
      var childGroup = child as FrameNode;
      var csvLightNumbers = "";
      for (let light of childGroup.children)
      {
        if (csvLightNumbers != "")
        {
          csvLightNumbers += ",";
        }
        csvLightNumbers += light.name.substring(6);
      }
      //var groupNum = child.name.substring(6);
      console.log(`${child.name},${csvLightNumbers}`);
    }
  }

  var tagNode = pageNode.findOne(node => node.type === "FRAME" && node.name === "Portal Placemen / Aisles") as FrameNode;
  console.log(`found tagNode '${tagNode.name}'`);
  tagNode = tagNode.findOne(node => node.type === "FRAME" && node.name === "Map") as FrameNode;
  console.log(`found tagNode '${tagNode.name}'`);
  tagNode = tagNode.findOne(node => node.type === "GROUP" && node.name === "Lights") as FrameNode;
  console.log(`found tagNode '${tagNode.name}'`);

  for (let child of tagNode.children)
  {
    if (child.name.startsWith("Portal"))
    {
      //console.log(`found child '${child.name}'`);
      // find the child lights
      var childGroup = child as FrameNode;
      var csvLightNumbers = "";
      for (let light of childGroup.children)
      {
        if (csvLightNumbers != "")
        {
          csvLightNumbers += ",";
        }
        csvLightNumbers += light.name.substring(6);
      }
      //var groupNum = child.name.substring(6);
      console.log(`${child.name},${csvLightNumbers}`);
    }
  }

  var tagNode = pageNode.findOne(node => node.type === "FRAME" && node.name === "Arms / direction B") as FrameNode;
  console.log(`found tagNode '${tagNode.name}'`);
  tagNode = tagNode.findOne(node => node.type === "FRAME" && node.name === "Map") as FrameNode;
  console.log(`found tagNode '${tagNode.name}'`);
  tagNode = tagNode.findOne(node => node.type === "GROUP" && node.name === "Lights") as FrameNode;
  console.log(`found tagNode '${tagNode.name}'`);

  console.log('exporting direction B!');
  for (let child of tagNode.children)
  {
    if (child.name.startsWith("Arm"))
    {
      //console.log(`found child '${child.name}'`);
      // find the child lights
      var childGroup = child as FrameNode;
      if (childGroup != null)
      {
        var csvLightNumbers = "";
        for (let light of childGroup.children)
        {
          if (csvLightNumbers != "")
          {
            csvLightNumbers += ",";
          }
          csvLightNumbers += light.name.substring(6);
        }
        //var groupNum = child.name.substring(6);
        console.log(`${child.name},${csvLightNumbers}`);
      }
    }
  }
  console.log('finished exporting direction B!');

}

async function numberRadials() {

  const pageNode = figma.currentPage;
  const nodes: SceneNode[] = [];

  // make sure we are on the right page
  if (pageNode.name != "Assets")
  {
    console.error(`need to be on the Assets page to run`);
    return;
  }
  
  console.log(`finding node 'Map'`);
  const mapNode = pageNode.findOne(node => node.type === "FRAME" && node.name === "Map") as FrameNode;
  if (mapNode == null)
  {
    console.log(`mapNode is null !`);
    return;
  }

  // first get rid of old numbers
  console.log(`finding and deleting node 'Numbers'`);
  const numbers = pageNode.findOne(node => node.type === "GROUP" && node.name === "Numbers") as GroupNode;
  if (numbers != null)
  {
    numbers.remove();
  }

  // now we draw the numbers
  for (let i=0; i < 360; i+=5) {
    const text = figma.createText();
    var x = 1560 * Math.cos((i-90) * Math.PI / 180);
    var y = 1560 * Math.sin((i-90) * Math.PI / 180);
    text.x = x;
    text.y = y;
    text.fontSize = 20;
    text.characters = i.toString() + "°";
    
    // for now just put node in the main page; group later
    pageNode.appendChild(text);
    nodes.push(text);
  }

  console.log(`done drawing numbers`);

  // and now we group the new lines together
  figma.currentPage.selection = nodes;
  figma.viewport.scrollAndZoomIntoView(nodes);
  console.log(`figma.group()`);
  const numberGroup = figma.group(nodes,mapNode);
  numberGroup.name = "Numbers";
}


// This file holds the main code for the plugins. It has access to the *document*.
// You can access browser APIs such as the network by creating a UI which contains
// a full browser environment (see documentation).

(async() => {
  await loadFonts();

  console.log(`figma.command = ${figma.command}`)
  console.log(`figma.currentPage.name = '${figma.currentPage.name}'`);

  if (figma.command == "import")
  {    
    await importCSV();
  }
  else if (figma.command == "export")
  {
    await exportTags();
  }
  else if (figma.command == "radials")
  {
    await numberRadials();
  }

  // Make sure to close the plugin when you're done. Otherwise the plugin will
  // keep running, which shows the cancel button at the bottom of the screen.
  figma.closePlugin();

})();


