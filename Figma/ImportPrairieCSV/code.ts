async function loadFonts() {

  await figma.loadFontAsync({ family: "Inter", style: "Regular" });
  console.log("Awaiting the fonts.");
};


var lightBaseMap = new Map();
var pathList = [];
var portalList = [];
var boothList = [];

function buildMaps() {

  var csvData = loadBaseData();
  console.log(`csvData() ${csvData}`);

  var rows = csvData.split("\n");
  console.log(`buildMap() found ${rows.length} base rows`);
  for (var i=0;i<rows.length;i++)
  {
    if (i > 0)
    {
      rows[i] = rows[i].trim();
      var cols = rows[i].split(",");
      // now apply 135 degree rotation
      //var theta = -Math.PI * 135 / 180;
      var theta = 0;
      var oldX = parseFloat(cols[1]);
      var oldZ = parseFloat(cols[2]);
      var newX = oldX * Math.cos(theta) - oldZ * Math.sin(theta);
      var newZ = oldZ * Math.cos(theta) + oldX * Math.sin(theta);
      cols[1] = newX.toString();
      cols[2] = newZ.toString(); 
      lightBaseMap.set(cols[0], cols);
    }
  }

  var portalData = loadPortalData();
  console.log(`portalData() ${portalData}`);
  rows = portalData.split("\n");
  console.log(`found ${rows.length} portals`);
  for (var i=0; i<rows.length; i++)
  {
    if (i > 0)
    {
      // store them as strings.   typescript doesnt' like arrays of arrays
      rows[i] = rows[i].trim();
      portalList.push(rows[i]);
    }
  }

  var boothData = loadBoothData();
  console.log(`boothData() ${boothData}`);
  rows = boothData.split("\n");
  console.log(`found ${rows.length} booths`);
  for (var i=0; i<rows.length; i++)
  {
    if (i > 0)
    {
      // store them as strings.   typescript doesnt' like arrays of arrays
      rows[i] = rows[i].trim();
      boothList.push(rows[i]);
    }
  }

  var pathData = loadPathData();
  console.log(`pathData() ${pathData}`);
  rows = pathData.split("\n");
  console.log(`buildMap() found ${rows.length} path rows`);
  for (var i=0;i<rows.length;i++)
  {
    if (i > 0)
    {
      // store them as strings.   typescript doesnt' like arrays of arrays
      rows[i] = rows[i].trim();
      pathList.push(rows[i]);
    }
  }
}

function loadPortalData()
{
  var portalData = `PortalId,x,z,Theta
  1,1260,0,90
  2,0,1260,180
  3,-1260,0,270
  4,0,-1260,0`;
  return portalData;
}

function loadBoothData()
{
  var boothData = `BoothId,x,z,Theta
  1,1103,1103,45
  2,-1103,-1103,225`;
  return boothData;
}

function loadBaseData()
{
  var baseData = `BaseId,x,z,DistFromCtr,Theta,ChannelStart,PathId,NearestTheta5,DistFromCenterOnTheta5,DistFromTheta5
0,1519.002,-2084.003,2578.844,143.9122,127,9,145,2578.379,-48.95913
1,1528.002,-1984.003,2504.208,142.3979,106,9,140,2502.015,104.7746
2,1381.002,-2164.003,2567.115,147.4552,43,9,145,2564.758,109.9701
3,1390.002,-2064.003,2488.416,146.0417,64,9,145,2488.005,45.23996
4,1394.002,-1969.003,2412.512,144.7025,85,9,145,2412.479,-12.52645
5,1222.002,-1186.002,1702.906,134.1435,358,8,135,1702.716,-25.45628
6,1175.002,-1096.001,1606.813,133.0077,379,8,135,1605.842,-55.86187
7,1100.002,-1002.001,1487.955,132.3307,442,8,130,1486.724,60.50982
8,1243.002,-2126.003,2462.71,149.6866,148,8,150,2462.674,-13.46999
9,1252.002,-2026.003,2381.637,148.2853,169,8,150,2380.57,-71.26417
10,1256.002,-1931.003,2303.543,146.9584,190,8,145,2302.198,78.72079
11,1260.002,-1831.003,2222.651,145.4662,211,8,145,2222.577,18.08676
12,1241.002,-1732.002,2130.708,144.3779,232,8,145,2130.583,-23.13373
13,1164.002,-1441.002,1852.4,141.0697,295,8,140,1852.077,34.58078
14,1133.002,-1342.002,1756.321,139.8268,316,8,140,1756.313,-5.3077
15,1116.002,-1243.002,1670.483,138.0816,337,8,140,1669.547,-55.92094
16,1084.001,-1148.002,1578.913,136.6424,400,8,135,1578.265,45.25475
17,1037.001,-1058.001,1481.465,135.5743,421,8,135,1481.391,14.84898
18,988.0015,-968.0014,1383.175,134.4142,463,8,135,1383.103,-14.14244
19,881.0013,-796.0011,1187.342,132.0984,1,8,130,1186.546,43.47526
20,938.0013,-878.0012,1284.808,133.1077,484,8,135,1284.108,-42.42671
21,809.0011,-718.0011,1081.669,131.5895,22,8,130,1081.253,30.00467
22,1189.002,-1538.002,1944.01,142.293,274,8,140,1942.454,77.78035
23,1209.002,-1637.002,2035.058,143.5524,253,8,145,2034.409,-51.41048
24,1239.002,-2232.003,2552.834,150.965,127,8,150,2552.473,42.99434
25,609.0009,-538.0007,812.605,131.4579,106,7,130,812.342,20.6741
26,660.0009,-625.0009,908.9705,133.4398,85,7,135,908.6334,-24.74887
27,1121.002,-2130.003,2406.981,152.2426,253,7,150,2405.137,94.18526
28,1130.001,-2030.003,2323.32,150.8975,274,7,150,2323.035,36.39123
29,1134.002,-1935.003,2242.81,149.6277,295,7,150,2242.762,-14.57329
30,1138.002,-1835.003,2159.232,148.1943,316,7,150,2158.16,-68.03722
31,1119.001,-1736.003,2065.398,147.1948,337,7,145,2063.883,79.09751
32,1042.001,-1445.002,1781.516,144.2043,400,7,145,1781.344,-24.73861
33,1011.001,-1346.002,1683.403,143.0893,421,7,145,1682.467,-56.12892
34,994.0015,-1247.002,1594.695,141.4412,442,7,140,1594.191,40.10786
35,962.0013,-1152.002,1500.851,140.1358,463,7,140,1500.847,3.556576
36,915.0013,-1062.001,1401.811,139.2524,484,7,140,1401.692,-18.2905
37,866.0012,-972.0014,1301.824,138.3007,1,7,140,1301.251,-38.60508
38,759.0012,-800.0012,1102.762,136.5065,43,7,135,1102.381,28.99121
39,816.0012,-882.0012,1201.576,137.2259,22,7,135,1200.669,46.66888
40,707.0011,-718.0011,1007.659,135.4423,64,7,135,1007.629,7.778002
41,1067.001,-1542.002,1875.17,145.3184,379,7,145,1875.141,10.41954
42,1087.001,-1641.002,1968.365,146.4795,358,7,145,1967.709,50.82049
43,1117.002,-2236.003,2499.481,153.4554,232,7,155,2498.572,-67.37151
44,1055.001,-2304.003,2534.06,155.397,211,7,155,2533.999,17.5576
45,472.0007,-518.0007,700.792,137.6603,190,6,140,700.2078,-28.60912
46,523.0007,-605.0009,799.7223,139.1578,169,6,140,799.6359,-11.75485
47,984.0014,-2110.003,2328.169,154.998,337,6,155,2328.169,-0.08256575
48,993.0015,-2010.003,2241.911,153.7093,358,6,155,2241.342,-50.50119
49,997.0013,-1915.003,2158.992,152.4973,379,6,150,2156.942,94.07262
50,1001.001,-1815.003,2072.737,151.1226,400,6,150,2072.339,40.60836
51,982.0015,-1716.002,1977.117,150.2192,421,6,150,1977.102,7.562833
52,905.0013,-1425.002,1688.093,147.5809,484,6,150,1686.589,-71.25315
53,874.0012,-1326.002,1588.131,146.6101,1,6,145,1587.504,44.62352
54,857.0013,-1227.002,1496.658,145.0676,22,6,145,1496.657,1.764829
55,825.0012,-1132.002,1400.734,143.9155,43,6,145,1400.483,-26.51221
56,778.0012,-1042.001,1300.405,143.2535,64,6,145,1299.801,-39.63395
57,729.0011,-952.0013,1199.062,142.5567,85,6,145,1197.972,-51.11738
58,622.0009,-780.0012,997.6407,141.4299,127,6,140,997.3301,24.89466
59,679.0009,-862.0012,1097.31,141.7724,106,6,140,1096.785,33.93863
60,570.0009,-698.001,901.1694,140.7643,148,6,140,901.0894,12.0203
61,930.0013,-1522.002,1783.646,148.5735,463,6,150,1783.094,-44.40394
62,950.0013,-1621.002,1878.87,149.6272,442,6,150,1878.83,-12.22436
63,980.0014,-2216.003,2423.03,156.1432,316,6,155,2422.548,48.34026
64,943.0013,-2314.004,2498.772,157.8282,295,6,160,2496.978,-94.69572
65,352.0005,-518.0007,626.2819,145.8025,274,5,145,626.2206,8.771031
66,403.0006,-605.0009,726.9357,146.3318,253,5,145,726.7393,16.8954
67,864.0012,-2110.003,2280.046,157.7319,421,5,160,2278.26,-90.23215
68,873.0013,-2010.003,2191.402,156.5233,442,5,155,2190.628,58.25591
69,877.0012,-1915.003,2106.268,155.394,463,5,155,2106.219,14.48192
70,881.0013,-1815.003,2017.523,154.1081,484,5,155,2017.278,-31.40532
71,862.0012,-1716.002,1920.341,153.3282,1,5,155,1919.524,-56.02462
72,785.0011,-1425.002,1626.917,151.1506,64,5,150,1626.589,32.67007
73,754.0011,-1326.002,1525.385,150.3763,85,5,150,1525.352,10.01681
74,737.001,-1227.002,1431.329,149.0088,106,5,150,1431.115,-24.76079
75,705.0009,-1132.002,1333.587,148.0857,127,5,150,1332.843,-44.54804
76,658.0009,-1042.001,1232.369,147.7285,148,5,150,1231.4,-48.84491
77,609.0009,-952.0013,1130.128,147.3927,169,5,145,1129.142,47.18106
78,502.0007,-780.0012,927.5811,147.2351,211,5,145,926.8753,36.17522
79,559.0009,-862.0012,1027.389,147.0369,190,5,145,1026.74,36.51675
80,450.0007,-698.001,830.4855,147.1902,232,5,145,829.8788,31.7379
81,810.0011,-1522.002,1724.121,151.9783,43,5,150,1723.093,59.51935
82,830.0011,-1621.002,1821.14,152.8862,22,5,155,1819.901,-67.17141
83,860.0012,-2216.003,2377.03,158.7894,400,5,160,2376.5,-50.21918
84,823.0012,-2314.004,2456.001,160.4215,379,5,160,2455.935,18.06759
85,238.0003,-532.0007,582.8112,155.8978,358,4,155,582.7397,9.131611
86,289.0005,-619.0009,683.1423,154.973,337,4,155,683.1423,-0.3223447
87,750.0011,-2124.003,2252.53,160.5515,1,4,160,2252.425,21.68118
88,759.0012,-2024.003,2161.636,159.444,22,4,160,2161.534,-20.97808
89,763.0011,-1929.003,2074.421,158.4191,43,4,160,2073.632,-57.22872
90,767.0012,-1829.003,1983.316,157.249,64,4,155,1981.788,77.83055
91,748.001,-1730.003,1884.785,156.6178,85,4,155,1884.034,53.21141
92,671.0009,-1439.002,1587.756,155.0005,148,4,155,1587.756,0.01491158
93,640.0009,-1340.002,1484.994,154.4703,169,4,155,1484.93,-13.72872
94,623.0009,-1241.002,1388.602,153.3427,190,4,155,1388.021,-40.1607
95,591.0009,-1146.002,1289.419,152.7195,211,4,155,1288.398,-51.30759
96,544.0008,-1056.001,1187.887,152.7447,232,4,155,1186.967,-46.74673
97,495.0007,-966.0013,1085.442,152.8684,253,4,155,1084.691,-40.37328
98,388.0005,-794.0012,883.7321,153.9568,295,4,155,883.5855,-16.0886
99,445.0006,-876.0013,982.5497,153.0698,274,4,155,981.9922,-33.09351
100,336.0005,-712.001,787.3003,154.7369,316,4,155,787.2921,-3.615304
101,696.0011,-1536.002,1686.333,155.6235,127,4,155,1686.233,18.35133
102,716.0009,-1635.002,1784.906,156.3504,106,4,155,1784.411,42.06447
103,746.001,-2230.003,2351.474,161.5034,484,4,160,2350.665,61.69422
104,709.0011,-2328.003,2433.574,163.0617,463,4,165,2432.182,-82.31086
105,-83.00013,-2175.003,2176.586,182.1854,442,0,180,2175.003,83.00015
106,-66.00009,-2077.003,2078.051,181.82,421,0,180,2077.003,66.00011
107,-48.00007,-1979.003,1979.585,181.3894,400,0,180,1979.003,48.0001
108,-59.00008,-1663.002,1664.049,182.0319,337,0,180,1663.002,59.0001
109,-84.00011,-1561.002,1563.261,183.0802,316,0,185,1562.383,-52.36978
110,-94.00014,-1440.002,1443.067,183.7348,295,0,185,1442.715,-31.86199
111,-52.00007,-1766.003,1766.768,181.6866,358,0,180,1766.003,52.00009
112,-52.00007,-1876.003,1876.723,181.5877,379,0,180,1876.003,52.00009
113,-151.0002,-1333.002,1341.527,186.4628,274,0,185,1341.09,34.24689
114,-195.0003,-1234.002,1249.314,188.9798,253,0,190,1249.116,-22.2443
115,117.0002,-649.0009,659.4628,169.7806,442,3,170,659.4579,-2.524863
116,168.0002,-736.001,754.9315,167.1419,421,3,165,754.404,28.21529
117,441.0006,-2296.003,2337.972,169.1274,85,3,170,2337.7,-35.60413
118,486.0007,-2205.003,2257.927,167.5703,106,3,170,2255.897,-95.72257
119,508.0007,-2107.003,2167.378,166.4446,127,3,165,2166.689,54.64137
120,525.0007,-2009.003,2076.468,165.3547,148,3,165,2076.428,12.85641
121,543.0007,-1911.003,1986.651,164.1378,169,3,165,1986.426,-29.89455
122,532.0007,-1595.002,1681.385,161.5543,232,3,160,1680.767,45.60565
123,507.0007,-1493.002,1576.739,161.2433,253,3,160,1576.367,34.21196
124,480.0007,-1396.002,1476.219,161.025,274,3,160,1475.983,26.40764
125,448.0007,-1293.002,1368.415,160.8898,295,3,160,1368.25,21.24974
126,404.0005,-1194.002,1260.499,161.3063,316,3,160,1260.171,28.73627
127,360.0005,-1099.002,1156.462,161.8627,337,3,160,1155.851,37.59075
128,267.0004,-911.0013,949.3223,163.6649,379,3,165,949.0646,-22.11806
129,315.0004,-1006.001,1054.165,162.6136,358,3,165,1053.251,-43.89474
130,215.0003,-829.0012,856.4275,165.4608,400,3,165,856.3998,6.88692
131,539.0007,-1698.002,1781.498,162.3889,211,3,160,1779.95,74.25589
132,539.0007,-1808.003,1886.636,163.3997,190,3,165,1885.9,-52.68923
133,307.0005,-2316.004,2336.262,172.4491,253,2,170,2334.129,99.83334
134,352.0005,-2225.003,2252.675,171.0102,274,2,170,2252.324,39.71484
135,374.0005,-2127.003,2159.634,170.0274,295,2,170,2159.634,1.031541
136,391.0006,-2029.003,2066.333,169.0925,316,2,170,2066.075,-32.7278
137,409.0006,-1931.003,1973.842,168.0411,337,2,170,1972.689,-67.47189
138,398.0005,-1615.002,1663.321,166.1559,400,2,165,1662.983,33.55431
139,373.0005,-1513.002,1558.302,166.151,421,2,165,1557.988,31.30289
140,346.0005,-1416.002,1457.662,166.2688,442,2,165,1457.305,32.27752
141,314.0005,-1313.002,1350.026,166.5505,463,2,165,1349.532,36.52878
142,270.0004,-1214.002,1243.664,167.4612,484,2,165,1242.517,53.40643
143,226.0003,-1119.001,1141.596,168.5818,1,2,170,1141.246,-28.25436
144,133.0002,-931.0013,940.4534,171.8699,43,2,170,939.9525,30.68705
145,181.0002,-1026.001,1041.845,169.9952,22,2,170,1041.844,-0.08717917
146,81.00011,-849.0012,852.8564,174.5501,64,2,175,852.8302,-6.696559
147,405.0005,-1718.002,1765.094,166.7353,379,2,165,1764.285,53.45123
148,405.0005,-1828.003,1872.33,167.5077,358,2,170,1870.559,-81.41838
149,30.00004,-2229.003,2229.205,179.2289,1,0,180,2229.003,-30.00002
150,52.00007,-2131.003,2131.637,178.6022,22,0,180,2131.003,-52.00004
151,69.0001,-2033.003,2034.173,178.0561,43,0,180,2033.003,-69.00008
152,87.00014,-1935.003,1936.958,177.4257,64,0,175,1935.222,81.9775
153,76.00011,-1619.002,1620.785,177.3124,127,0,175,1619.465,65.39442
154,51.00007,-1517.002,1517.859,178.0745,148,0,180,1517.002,-51.00005
155,41.00006,-1396.002,1396.604,178.3177,169,0,180,1396.002,-41.00004
156,83.00013,-1722.002,1724.002,177.2405,106,0,175,1722.684,67.39808
157,83.00013,-1832.003,1833.882,177.4059,85,0,175,1832.265,76.98524
158,-16.00002,-1289.002,1289.101,180.7112,190,0,180,1289.002,16.00004
159,-60.00008,-1190.002,1191.513,182.8864,211,0,185,1190.703,-43.9437
160,-104.0001,-1095.001,1099.929,185.4255,232,0,185,1099.899,8.168749
161,150.0002,-2328.003,2332.831,176.3134,463,1,175,2332.218,53.46942
162,195.0003,-2237.003,2245.486,175.0181,484,1,175,2245.486,0.7093745
163,217.0003,-2139.003,2149.982,174.2072,1,1,175,2149.776,-29.74818
164,234.0003,-2041.003,2054.373,173.4596,22,1,175,2053.631,-55.22477
165,252.0004,-1943.003,1959.276,172.6102,43,1,175,1957.572,-81.69759
166,241.0003,-1627.002,1644.755,171.5743,106,1,170,1644.134,45.18692
167,216.0003,-1525.002,1540.223,171.9383,127,1,170,1539.342,52.09499
168,189.0003,-1428.002,1440.455,172.4605,148,1,170,1439.127,61.84093
169,157.0002,-1325.002,1334.271,173.2425,169,1,175,1333.643,-40.92129
170,113.0002,-1226.002,1231.198,174.7339,190,1,175,1231.185,-5.717069
171,69.0001,-1131.002,1133.104,176.5088,211,1,175,1132.712,29.83575
172,24.00004,-1038.001,1038.279,178.6755,232,1,180,1038.001,-24.00002
173,248.0004,-1730.003,1747.688,171.8421,85,1,170,1746.785,56.17905
174,248.0004,-1840.003,1856.641,172.3238,64,1,170,1855.114,75.28038
175,3347.005,-2979.004,4480.726,131.6707,379,10,130,4478.821,130.6355
176,3463.005,-3005.004,4585.025,130.9496,358,10,130,4584.395,75.98895
177,3583.005,-3023.005,4687.908,130.1545,316,10,130,4687.891,12.64362
178,3510.005,-3061.004,4657.24,131.091,337,10,130,4656.396,88.67652
179,3756.005,-3102.005,4871.346,129.5526,274,10,130,4871.197,-38.04127
180,3622.005,-3122.004,4781.824,130.7599,295,10,130,4781.403,63.41291
181,3871.006,-3185.005,5012.877,129.447,232,10,130,5012.644,-48.38043
182,3725.005,-3190.005,4904.263,130.576,253,10,130,4904.015,49.29699
183,3939.006,-3229.005,5093.352,129.3432,190,10,130,5093.018,-58.38393
184,3852.005,-3285.004,5062.529,130.4577,211,10,130,5062.367,40.43707
185,4020.006,-3290.005,5194.668,129.2972,169,10,130,5194.277,-63.72119
186,3951.006,-3358.005,5185.233,130.3616,148,10,130,5185.13,32.72255
187,4161.006,-3643.005,5530.412,131.2025,400,11,130,5529.194,116.0601
188,4263.006,-3683.006,5633.626,130.8252,421,11,130,5633.042,81.13753
189,4280.006,-3770.005,5703.629,131.3749,442,11,130,5701.987,136.8558
190,4384.006,-3876.006,5851.746,131.4807,463,11,130,5849.792,151.2067
191,4480.006,-3916.006,5950.257,131.1569,484,11,130,5949.044,120.1407
192,4481.007,-3995.006,6003.29,131.7184,1,11,130,6000.591,180.0149
193,4577.007,-4021.006,6092.412,131.3,22,11,130,6090.843,138.2247
194,4553.007,-4109.006,6133.01,132.0657,43,11,130,6129.025,221.0633
195,4658.007,-4111.006,6212.68,131.4306,64,11,130,6210.744,155.1026
196,4634.007,-4190.006,6247.413,132.1194,85,11,130,6243.139,231.0473
197,4846.007,-4074.006,6330.98,130.0535,0,Path19,130,6330.978,5.914615
198,4731.007,-4216.006,6336.966,131.7056,106,11,130,6334.158,188.6141
199,4697.007,-4294.006,6363.989,132.4336,127,11,130,6358.25,270.2203
200,4794.007,-4320.006,6453.291,132.0228,148,11,130,6449.269,227.7867
201,4765.007,-4408.006,6491.21,132.7712,169,11,135,6486.301,-252.4392
202,4825.007,-4505.007,6601.196,133.0356,211,11,135,6597.316,-226.2752
203,4909.007,-4633.007,6750.044,133.3432,253,11,135,6747.224,-195.1629
204,4991.007,-4673.007,6837.188,133.1153,274,11,135,6833.49,-224.8613
205,5408.008,-4979.007,7350.991,132.6349,148,12,135,7344.729,-303.3505
206,5652.008,-5091.007,7606.809,132.0107,106,12,130,7602.126,266.8957
207,5861.009,-5063.007,7745.029,130.822,-1,None,130,7744.231,111.1033
208,5869.009,-5221.008,7855.202,131.6559,64,12,130,7851.921,226.9967
209,6079.009,-5346.008,8095.316,131.3291,22,12,130,8093.139,187.7664
210,6281.009,-5578.007,8400.313,131.6075,484,12,130,8397.006,235.6448
211,6502.009,-5602.009,8582.46,130.7476,442,12,130,8581.729,111.9753
212,7544.011,-5325.008,9234.058,125.2167,463,17,125,9233.991,34.92328
213,6730.009,-5626.008,8771.829,129.8942,400,12,130,8771.814,-16.19632
214,7758.011,-5433.007,9471.236,125.0039,1,17,125,9471.235,0.6451853
215,6982.01,-5540.008,8912.921,128.4309,358,12,130,8909.579,-244.0588
216,6916.01,-5727.008,8979.411,129.6275,190,18,130,8979.221,-58.38446
217,6948.009,-5833.008,9071.87,130.0142,169,18,130,9071.869,2.247284
218,8018.012,-5382.008,9656.838,123.8711,85,17,125,9654.964,-190.261
219,7923.012,-5315.008,9540.619,123.8549,64,17,125,9538.715,-190.6548
220,7797.011,-5340.009,9450.348,124.4064,22,17,125,9449.841,-97.90457
221,8055.012,-5272.007,9626.903,123.2048,106,17,125,9622.178,-301.591
222,7196.01,-5490.007,9051.118,127.3409,295,12,125,9043.565,369.6873
223,7115.01,-5603.007,9056.328,128.2201,337,12,130,9051.957,-281.2897
224,7231.011,-5810.008,9275.975,128.7813,106,18,130,9273.877,-197.2819
225,8234.012,-5281.008,9782.024,122.6747,148,17,125,9773.969,-396.8887
226,7452.011,-5597.008,9319.815,126.9092,169,21,125,9314.642,310.5016
227,7392.01,-5731.009,9353.41,127.7863,379,18,130,9346.43,-361.287
228,7455.011,-5888.008,9499.78,128.3019,64,18,130,9495.607,-281.5146
229,8617.012,-5241.007,10085.69,121.3087,190,17,120,10083.05,230.3375
230,7688.011,-5673.008,9554.503,126.4237,211,21,125,9551.554,237.3923
231,7628.011,-5807.008,9586.86,127.2811,421,18,125,9579.264,381.5738
232,7691.011,-5964.009,9732.474,127.7919,22,18,130,9725.247,-374.9923
233,8845.013,-5146.007,10233.07,120.1907,274,17,120,10233.01,34.06477
234,7934.011,-5653.007,9741.921,125.47,253,21,125,9741.594,79.90896
235,7895.012,-5807.008,9800.641,126.3355,463,18,125,9797.979,228.4283
236,7937.011,-5944.009,9916.017,126.8295,484,18,125,9910.963,316.5625
237,8141.012,-5599.009,9880.535,124.5184,295,21,125,9880.186,-83.05476
238,8109.012,-5751.007,9941.337,125.3447,400,21,125,9941.156,59.80949
239,8144.012,-5890.008,10050.73,125.8756,463,21,125,10049.56,153.5979
240,8999.013,-4973.007,10281.68,118.9258,337,17,120,10279.88,-192.7577
241,9213.014,-5128.007,10544.01,119.1005,22,20,120,10542.71,-165.5244
242,9112.014,-5220.007,10501.3,119.8071,1,20,120,10501.24,-35.35013
243,9105.014,-5362.007,10566.57,120.4941,484,20,120,10566.18,91.12592
244,9129.015,-5523.007,10669.7,121.1737,463,20,120,10667.46,218.5552
245,9192.014,-5599.009,10762.99,121.3463,442,20,120,10760.02,252.8749
246,9271.014,-5503.007,10781.22,120.6921,85,20,120,10780.44,130.2352
247,9334.015,-5382.008,10774.5,119.9678,64,20,120,10774.5,-6.053539
248,9318.015,-5240.007,10690.33,119.3513,43,20,120,10689.64,-121.0302
249,9213.014,-5267.007,10612.3,119.7563,127,20,120,10612.21,-45.14667
250,9198.014,-5414.007,10673.09,120.4813,106,20,120,10672.72,89.65923
251,8845.013,-4973.007,10147.17,119.3464,295,17,120,10146.51,-115.7576
252,8745.012,-5056.007,10101.41,120.0347,253,17,120,10101.41,6.122219
253,8624.012,-5096.007,10017.13,120.5792,211,17,120,10016.62,101.2643
254,8374.012,-5529.009,10034.64,123.4351,337,21,125,10030.9,-274.0387
255,8554.012,-5495.007,10166.92,122.7162,148,22,125,10158.84,-405.1341
256,8713.013,-5457.008,10280.83,122.0591,169,22,120,10274.2,369.3996
257,8869.012,-5414.007,10390.9,121.4016,274,22,120,10387.79,254.1599
258,8502.012,-5633.009,10198.77,123.5265,127,22,125,10195.4,-262.2645
259,8649.012,-5593.007,10299.86,122.8893,190,22,125,10292.87,-379.3479
260,8838.012,-5549.007,10435.61,122.123,253,22,120,10428.45,386.5735
261,8515.012,-5771.008,10286.4,124.1273,106,22,125,10285.2,-156.6785
262,8680.012,-5848.009,10466.22,123.9695,85,22,125,10464.53,-188.244
263,8649.012,-5717.008,10367.72,123.4648,211,22,125,10364,-277.7723
264,8807.012,-5682.009,10480.87,122.8289,232,22,125,10473.35,-397.0671
265,8845.013,-5873.007,10617.27,123.5838,64,22,125,10614.03,-262.407
266,9031.012,-5839.007,10754.22,122.8847,43,22,125,10746.89,-396.9424
267,9231.014,-5774.008,10888.1,122.026,127,19,120,10881.3,384.9288
268,9152.014,-5858.009,10866.26,122.6224,22,22,125,10856.91,-450.7815
269,9333.014,-5730.008,10951.63,121.5479,148,19,120,10947.63,295.823
270,9477.014,-5798.007,11109.94,121.4582,400,19,120,11106.34,282.7129
271,9431.014,-5629.007,10983.16,120.8314,169,19,120,10982,159.3546
272,9494.015,-5497.007,10970.57,120.0707,190,19,120,10970.56,13.53864
273,9552.015,-5633.009,11089.26,120.5287,379,19,120,11088.79,102.3194
274,9512.015,-5342.007,10909.42,119.3188,211,19,120,10908.65,-129.6952
275,9615.014,-5443.007,11048.75,119.514,358,19,120,11048.35,-93.72636
276,9494.015,-5190.008,10820,118.6637,232,19,120,10817.06,-252.3303
277,9603.015,-5265.008,10951.63,118.7345,337,19,120,10948.96,-241.8783
278,9445.015,-5061.007,10715.51,118.1841,253,19,120,10710.13,-339.5489
279,9586.014,-5102.007,10859.2,118.0234,316,19,120,10852.74,-374.5408
280,9506.014,-4879.007,10684.99,117.1694,274,19,115,10677.33,404.4652
281,9569.015,-4975.007,10785.02,117.4703,295,19,115,10775,464.8454
282,9366.014,-5866.009,11051.35,122.0592,421,19,120,11044.21,397.1037
283,8377.012,-5697.007,10130.66,124.2187,358,21,125,10129.72,-138.1423
284,8377.012,-5820.008,10200.33,124.79,1,21,125,10200.27,-37.3865
285,4846.007,-4393.006,6540.817,132.193,190,11,130,6536.026,250.2828
286,4909.007,-4545.007,6689.951,132.7951,232,11,135,6684.997,-257.3883
287,5284.008,-4931.007,7227.418,133.0208,169,12,135,7223.106,-249.6101
288,5544.007,-5034.007,7488.474,132.2397,127,12,130,7482.753,292.6526
289,5758.008,-5161.007,7732.441,131.8705,85,12,130,7728.321,252.3828
290,5976.008,-5272.007,7969.111,131.4186,43,12,130,7966.668,197.2867
291,6249.009,-5470.008,8304.884,131.197,1,12,130,8303.072,173.4825
292,6408.01,-5552.007,8478.643,130.9062,463,12,130,8477.582,134.0933
293,6607.009,-5629.007,8679.764,130.4302,421,12,130,8679.519,65.1644
294,7636.011,-5413.008,9359.985,125.332,484,17,125,9359.828,54.23951
295,6853.009,-5623.008,8864.646,129.3694,379,12,130,8864.109,-97.5566
296,6793.009,-5757.009,8904.388,130.2809,211,18,130,8904.28,43.66083
297,6653.009,-5757.009,8798.05,130.8704,232,18,130,8797.034,133.6511
298,7895.012,-5417.007,9574.716,124.4552,43,17,125,9574.283,-91.04175
299,7101.01,-5517.008,8992.314,127.8448,316,12,130,8985.953,-338.1697
300,7019.01,-5784.008,9095.122,129.4902,148,18,130,9094.762,-80.92671
301,7114.01,-5835.009,9200.896,129.3591,127,18,130,9200.319,-102.9232
302,8133.012,-5342.007,9730.516,123.2981,127,17,125,9726.223,-288.9894
303,7371.011,-5558.008,9231.645,127.0176,148,21,125,9225.922,325.014
304,7277.011,-5696.008,9241.179,128.0517,358,18,130,9235.837,-314.1791
305,7337.011,-5856.009,9387.469,128.595,85,18,130,9384.646,-230.1784
306,8515.012,-5200.007,9977.249,121.4119,169,17,120,9974.219,245.8313
307,7573.011,-5637.007,9440.675,126.6623,190,21,125,9436.702,273.8635
308,7513.011,-5771.008,9473.641,127.5291,400,18,130,9464.835,-408.4232
309,7576.011,-5928.009,9619.628,128.0421,43,18,130,9614.012,-328.6497
310,8744.013,-5210.007,10178.5,120.7881,232,17,120,10177.54,139.99
311,7811.011,-5677.009,9656.103,126.0095,232,21,125,9654.604,170.1199
312,7751.012,-5811.009,9687.415,126.8593,442,18,125,9682.314,314.3003
313,7821.012,-5948.007,9825.834,127.2536,1,18,125,9818.234,386.3725
314,8936.014,-5068.007,10273.12,119.5595,316,17,120,10272.82,-78.98566
315,8055.012,-5629.007,9826.949,124.9466,274,21,125,9826.945,-9.153597
316,8003.011,-5787.008,9876.115,125.8708,421,21,125,9874.975,150.0988
317,8058.012,-5920.009,9998.903,126.3037,442,21,125,9996.314,227.5
318,8262.012,-5575.007,9967.023,124.0105,316,21,125,9965.536,-172.1184
319,8212.012,-5727.008,10011.78,124.8917,379,21,125,10011.76,-18.92786
320,8265.012,-5866.009,10135.11,125.3648,484,21,125,10134.91,64.53555`;
  return baseData;
}

function loadPathData()
{
  var pathData = `PathId,Host,Universe,ChannelStart,Fixture0,Fixture1,DistanceFt
0,192.168.0.220,1,1,149,150,8.369922
0,192.168.0.220,1,1,150,151,8.288633
0,192.168.0.220,1,1,151,152,8.303294
0,192.168.0.220,1,1,152,157,8.589802
0,192.168.0.220,1,1,157,156,9.166675
0,192.168.0.220,1,1,156,153,8.603144
0,192.168.0.220,1,1,153,154,8.751592
0,192.168.0.220,1,1,154,155,10.11772
0,192.168.0.220,1,1,155,158,10.10296
0,192.168.0.220,1,1,158,159,9.028123
0,192.168.0.220,1,1,159,160,8.724585
0,192.168.0.220,1,1,160,114,13.84489
0,192.168.0.220,1,1,114,113,9.028124
0,192.168.0.220,1,1,113,110,10.10297
0,192.168.0.220,1,1,110,109,10.11771
0,192.168.0.220,1,1,109,108,8.751604
0,192.168.0.220,1,1,108,111,8.603131
0,192.168.0.220,1,1,111,112,9.166675
0,192.168.0.220,1,1,112,107,8.589814
0,192.168.0.220,1,1,107,106,8.303282
0,192.168.0.220,1,1,106,105,8.288657
1,192.168.0.220,2,463,161,162,8.459901
1,192.168.0.220,2,463,162,163,8.36991
1,192.168.0.220,2,463,163,164,8.288632
1,192.168.0.220,2,463,164,165,8.303294
1,192.168.0.220,2,463,165,174,8.589802
1,192.168.0.220,2,463,174,173,9.166675
1,192.168.0.220,2,463,173,166,8.603156
1,192.168.0.220,2,463,166,167,8.751592
1,192.168.0.220,2,463,167,168,8.390656
1,192.168.0.220,2,463,168,169,8.988031
1,192.168.0.220,2,463,169,170,9.028118
1,192.168.0.220,2,463,170,171,8.724574
1,192.168.0.220,2,463,171,172,8.6096
2,192.168.0.220,3,253,133,134,8.45991
2,192.168.0.220,3,253,134,135,8.369922
2,192.168.0.220,3,253,135,136,8.288633
2,192.168.0.220,3,253,136,137,8.303293
2,192.168.0.220,3,253,137,148,8.589802
2,192.168.0.220,3,253,148,147,9.166675
2,192.168.0.220,3,253,147,138,8.603144
2,192.168.0.220,3,253,138,139,8.751592
2,192.168.0.220,3,253,139,140,8.390633
2,192.168.0.220,3,253,140,141,8.988042
2,192.168.0.220,3,253,141,142,9.028135
2,192.168.0.220,3,253,142,143,8.724584
2,192.168.0.220,3,253,143,145,8.609589
2,192.168.0.220,3,253,145,144,8.869822
2,192.168.0.220,3,253,144,146,8.091498
3,192.168.0.220,4,85,117,118,8.45989
3,192.168.0.220,4,85,118,119,8.369922
3,192.168.0.220,4,85,119,120,8.288632
3,192.168.0.220,4,85,120,121,8.303282
3,192.168.0.220,4,85,121,132,8.589814
3,192.168.0.220,4,85,132,131,9.166675
3,192.168.0.220,4,85,131,122,8.603143
3,192.168.0.220,4,85,122,123,8.751592
3,192.168.0.220,4,85,123,124,8.390645
3,192.168.0.220,4,85,124,125,8.98803
3,192.168.0.220,4,85,125,126,9.028136
3,192.168.0.220,4,85,126,127,8.724578
3,192.168.0.220,4,85,127,129,8.609596
3,192.168.0.220,4,85,129,128,8.869822
3,192.168.0.220,4,85,128,130,8.091503
3,192.168.0.220,4,85,130,116,8.68349
3,192.168.0.220,4,85,116,115,8.403872
4,192.168.0.221,1,463,104,103,8.729342
4,192.168.0.221,1,463,103,87,8.839639
4,192.168.0.221,1,463,87,88,8.367006
4,192.168.0.221,1,463,88,89,7.923687
4,192.168.0.221,1,463,89,90,8.340025
4,192.168.0.221,1,463,90,91,8.40056
4,192.168.0.221,1,463,91,102,8.353733
4,192.168.0.221,1,463,102,101,8.416673
4,192.168.0.221,1,463,101,92,8.347524
4,192.168.0.221,1,463,92,93,8.645
4,192.168.0.221,1,463,93,94,8.370746
4,192.168.0.221,1,463,94,95,8.353724
4,192.168.0.221,1,463,95,96,8.461126
4,192.168.0.221,1,463,96,97,8.539539
4,192.168.0.221,1,463,97,99,8.579696
4,192.168.0.221,1,463,99,98,8.322083
4,192.168.0.221,1,463,98,100,8.091504
4,192.168.0.221,1,463,100,86,8.683479
4,192.168.0.221,1,463,86,85,8.403879
5,192.168.0.221,2,379,84,83,8.729378
5,192.168.0.221,2,379,83,67,8.839626
5,192.168.0.221,2,379,67,68,8.367006
5,192.168.0.221,2,379,68,69,7.9237
5,192.168.0.221,2,379,69,70,8.340001
5,192.168.0.221,2,379,70,71,8.400573
5,192.168.0.221,2,379,71,82,8.353733
5,192.168.0.221,2,379,82,81,8.416675
5,192.168.0.221,2,379,81,72,8.347484
5,192.168.0.221,2,379,72,73,8.645012
5,192.168.0.221,2,379,73,74,8.370766
5,192.168.0.221,2,379,74,75,8.353739
5,192.168.0.221,2,379,75,76,8.461112
5,192.168.0.221,2,379,76,77,8.539535
5,192.168.0.221,2,379,77,79,8.579703
5,192.168.0.221,2,379,79,78,8.322079
5,192.168.0.221,2,379,78,80,8.091497
5,192.168.0.221,2,379,80,66,8.683488
5,192.168.0.221,2,379,66,65,8.40388
6,192.168.0.221,3,295,64,63,8.729378
6,192.168.0.221,3,295,63,47,8.839626
6,192.168.0.221,3,295,47,48,8.367006
6,192.168.0.221,3,295,48,49,7.9237
6,192.168.0.221,3,295,49,50,8.340001
6,192.168.0.221,3,295,50,51,8.400569
6,192.168.0.221,3,295,51,62,8.353735
6,192.168.0.221,3,295,62,61,8.416675
6,192.168.0.221,3,295,61,52,8.347486
6,192.168.0.221,3,295,52,53,8.645015
6,192.168.0.221,3,295,53,54,8.370762
6,192.168.0.221,3,295,54,55,8.353739
6,192.168.0.221,3,295,55,56,8.461116
6,192.168.0.221,3,295,56,57,8.539536
6,192.168.0.221,3,295,57,59,8.579708
6,192.168.0.221,3,295,59,58,8.322073
6,192.168.0.221,3,295,58,60,8.091498
6,192.168.0.221,3,295,60,46,8.683488
6,192.168.0.221,3,295,46,45,8.403877
7,192.168.0.221,4,211,44,43,7.668487
7,192.168.0.221,4,211,43,27,8.839639
7,192.168.0.221,4,211,27,28,8.367018
7,192.168.0.221,4,211,28,29,7.923701
7,192.168.0.221,4,211,29,30,8.339988
7,192.168.0.221,4,211,30,31,8.400573
7,192.168.0.221,4,211,31,42,8.353743
7,192.168.0.221,4,211,42,41,8.416676
7,192.168.0.221,4,211,41,32,8.347484
7,192.168.0.221,4,211,32,33,8.645
7,192.168.0.221,4,211,33,34,8.370776
7,192.168.0.221,4,211,34,35,8.353735
7,192.168.0.221,4,211,35,36,8.461112
7,192.168.0.221,4,211,36,37,8.539542
7,192.168.0.221,4,211,37,39,8.579699
7,192.168.0.221,4,211,39,38,8.32208
7,192.168.0.221,4,211,38,40,8.091492
7,192.168.0.221,4,211,40,26,8.683494
7,192.168.0.221,4,211,26,25,8.403874
8,192.168.0.222,1,127,24,8,8.839639
8,192.168.0.222,1,127,8,9,8.36703
8,192.168.0.222,1,127,9,10,7.923688
8,192.168.0.222,1,127,10,11,8.339988
8,192.168.0.222,1,127,11,12,8.400594
8,192.168.0.222,1,127,12,23,8.353706
8,192.168.0.222,1,127,23,22,8.416676
8,192.168.0.222,1,127,22,13,8.347522
8,192.168.0.222,1,127,13,14,8.645
8,192.168.0.222,1,127,14,15,8.370748
8,192.168.0.222,1,127,15,5,10.02948
8,192.168.0.222,1,127,5,6,8.461116
8,192.168.0.222,1,127,6,16,8.734126
8,192.168.0.222,1,127,16,17,8.461112
8,192.168.0.222,1,127,17,7,7.024282
8,192.168.0.222,1,127,7,18,9.753938
8,192.168.0.222,1,127,18,20,8.579704
8,192.168.0.222,1,127,20,19,8.32208
8,192.168.0.222,1,127,19,21,8.84591
9,192.168.0.222,2,43,2,3,8.367043
9,192.168.0.222,2,43,3,4,7.923688
9,192.168.0.222,2,43,4,1,11.23641
9,192.168.0.222,2,43,1,0,8.367006
10,192.168.0.223,1,148,186,185,8.073047
10,192.168.0.223,1,148,185,183,8.450027
10,192.168.0.223,1,148,183,184,8.622093
10,192.168.0.223,1,148,184,181,8.482403
10,192.168.0.223,1,148,181,182,12.17384
10,192.168.0.223,1,148,182,179,7.775045
10,192.168.0.223,1,148,179,180,11.29034
10,192.168.0.223,1,148,180,177,8.867068
10,192.168.0.223,1,148,177,178,6.858186
10,192.168.0.223,1,148,178,176,6.09247
10,192.168.0.223,1,148,176,175,9.906543
11,192.168.0.223,2,400,187,188,9.13023
11,192.168.0.223,2,400,188,189,7.387092
11,192.168.0.223,2,400,189,190,12.37495
11,192.168.0.223,2,400,190,191,8.666689
11,192.168.0.223,2,400,191,192,6.583859
11,192.168.0.223,2,400,192,193,8.288212
11,192.168.0.223,2,400,193,194,7.601181
11,192.168.0.223,2,400,194,195,8.751587
11,192.168.0.223,2,400,195,196,6.880461
11,192.168.0.223,2,400,196,198,8.368665
11,192.168.0.223,2,400,198,199,7.090688
11,192.168.0.223,2,400,199,200,8.368719
11,192.168.0.223,2,400,200,201,7.721272
11,192.168.0.223,2,400,201,285,6.864774
11,192.168.0.223,2,400,285,202,9.496062
11,192.168.0.223,2,400,202,286,7.753129
11,192.168.0.223,2,400,286,203,7.33333
11,192.168.0.223,2,400,203,204,7.603
12,192.168.0.224,1,295,222,299,8.230231
12,192.168.0.224,1,295,299,223,7.260977
12,192.168.0.224,1,295,223,215,12.26386
12,192.168.0.224,1,295,215,295,12.78298
12,192.168.0.224,1,295,295,213,10.25302
12,192.168.0.224,1,295,213,293,10.25307
12,192.168.0.224,1,295,293,211,9.034598
12,192.168.0.224,1,295,211,292,8.872575
12,192.168.0.224,1,295,292,210,10.80289
12,192.168.0.224,1,295,210,291,9.386692
12,192.168.0.224,1,295,291,209,17.53489
12,192.168.0.224,1,295,209,290,10.56897
12,192.168.0.224,1,295,290,208,9.877617
12,192.168.0.224,1,295,208,289,10.51493
12,192.168.0.224,1,295,289,206,10.58567
12,192.168.0.224,1,295,206,288,10.17659
12,192.168.0.224,1,295,288,205,12.22496
12,192.168.0.224,1,295,205,287,11.08055
17,192.168.0.224,4,463,212,294,10.6092
17,192.168.0.224,4,463,294,214,10.30241
17,192.168.0.224,4,463,214,220,8.40377
17,192.168.0.224,4,463,220,298,10.38591
17,192.168.0.224,4,463,298,219,8.81441
17,192.168.0.224,4,463,219,218,9.687487
17,192.168.0.224,4,463,218,221,9.671407
17,192.168.0.224,4,463,221,302,8.733718
17,192.168.0.224,4,463,302,225,9.832612
17,192.168.0.224,4,463,225,306,24.37009
17,192.168.0.224,4,463,306,229,9.160995
17,192.168.0.224,4,463,229,253,12.0974
17,192.168.0.224,4,463,253,310,13.7932
17,192.168.0.224,4,463,310,252,12.83362
17,192.168.0.224,4,463,252,233,11.21144
17,192.168.0.224,4,463,233,251,14.41668
17,192.168.0.224,4,463,251,314,10.9627
17,192.168.0.224,4,463,314,240,9.499255
18,192.168.0.224,2,358,304,227,10.01734
18,192.168.0.224,2,358,227,308,10.62004
18,192.168.0.224,2,358,308,231,10.04189
18,192.168.0.224,2,358,231,312,10.25549
18,192.168.0.224,2,358,312,235,12.00466
18,192.168.0.224,2,358,235,236,11.94114
18,192.168.0.224,2,358,236,313,9.672395
18,192.168.0.224,2,358,313,232,10.91514
18,192.168.0.224,2,358,232,309,10.04189
18,192.168.0.224,2,358,309,228,10.62007
18,192.168.0.224,2,358,228,305,10.18846
18,192.168.0.224,2,358,305,224,9.629267
18,192.168.0.224,2,358,224,301,9.970166
18,192.168.0.224,2,358,301,300,8.985372
18,192.168.0.224,2,358,300,217,7.188932
18,192.168.0.224,2,358,217,216,9.227106
18,192.168.0.224,2,358,216,296,10.55056
18,192.168.0.224,2,358,296,297,11.66667
19,192.168.0.225,2,127,267,269,9.257191
19,192.168.0.225,2,127,269,271,11.72751
19,192.168.0.225,2,127,271,272,12.18865
19,192.168.0.225,2,127,272,274,13.00346
19,192.168.0.225,2,127,274,276,12.7551
19,192.168.0.225,2,127,276,278,11.49948
19,192.168.0.225,2,127,278,280,15.99584
19,192.168.0.225,2,127,280,281,9.568867
19,192.168.0.225,2,127,281,279,10.67774
19,192.168.0.225,2,127,279,277,13.65706
19,192.168.0.225,2,127,277,275,14.86693
19,192.168.0.225,2,127,275,273,16.68112
19,192.168.0.225,2,127,273,270,15.10374
19,192.168.0.225,2,127,270,282,10.8478
20,192.168.0.225,1,442,245,244,8.226431
20,192.168.0.225,1,442,244,243,13.56493
20,192.168.0.225,1,442,243,242,11.84769
20,192.168.0.225,1,442,242,241,11.38497
20,192.168.0.225,1,442,241,248,12.79352
20,192.168.0.225,1,442,248,247,11.9083
20,192.168.0.225,1,442,247,246,11.36815
20,192.168.0.225,1,442,246,250,9.592436
20,192.168.0.225,1,442,250,249,12.31359
21,192.168.0.224,3,148,303,226,7.491628
21,192.168.0.224,3,148,226,307,10.62002
21,192.168.0.224,3,148,307,230,10.04196
21,192.168.0.224,3,148,230,311,10.25539
21,192.168.0.224,3,148,311,234,10.44334
21,192.168.0.224,3,148,234,315,10.2798
21,192.168.0.224,3,148,315,237,7.590166
21,192.168.0.224,3,148,237,318,10.27977
21,192.168.0.224,3,148,318,254,10.08984
21,192.168.0.224,3,148,254,283,14.00212
21,192.168.0.224,3,148,283,319,13.97546
21,192.168.0.224,3,148,319,238,8.813192
21,192.168.0.224,3,148,238,316,9.328971
21,192.168.0.224,3,148,316,317,11.99371
21,192.168.0.224,3,148,317,239,7.590215
21,192.168.0.224,3,148,239,320,10.27974
21,192.168.0.224,3,148,320,284,10.0899
22,192.168.0.225,3,22,268,266,10.20709
22,192.168.0.225,3,22,266,265,15.75672
22,192.168.0.225,3,22,265,262,13.907
22,192.168.0.225,3,22,262,261,15.17358
22,192.168.0.225,3,22,261,258,11.55087
22,192.168.0.225,3,22,258,255,12.28944
22,192.168.0.225,3,22,255,256,13.62325
22,192.168.0.225,3,22,256,259,12.5255
22,192.168.0.225,3,22,259,263,10.33337
22,192.168.0.225,3,22,263,264,13.48583
22,192.168.0.225,3,22,264,260,11.38053
22,192.168.0.225,3,22,260,257,11.5428`;
  return pathData;
}

async function importCSV() {

  const nodes: SceneNode[] = [];
  const lines: SceneNode[] = [];
  const portals: SceneNode[] = [];
  const booths: SceneNode[] = [];
  const centers: SceneNode[] = [];
  const pageNode = figma.currentPage;

  // make sure we are on the right page
  if (pageNode.name != "Assets")
  {
    console.error(`need to be on the Assets page to run`);
    return;
  }

  // import the CSV data
  buildMaps();
  
  console.log(`finding node 'Wiring Plan'`);
  const planNode = pageNode.findOne(node => node.type === "FRAME" && node.name === "Base Layout") as FrameNode;
  if (planNode == null)
  {
    console.log(`planNode is null !`);
    return;
  }

  console.log(`finding node 'Map'`);
  const mapNode = planNode.findOne(node => node.type === "FRAME" && node.name === "Map") as FrameNode;

  if (mapNode == null)
  {
    console.log(`mapNode is null !`);
    return;
  }

  // first get rid of old lights & wiring path data
  console.log(`finding and deleting node 'Lights'`);
  const lightsGroup = mapNode.findOne(node => node.type === "GROUP" && node.name === "Lights") as FrameNode;
  if (lightsGroup != null)
  {
    lightsGroup.remove();
  }

  console.log(`finding and deleting node 'Wiring Paths'`);
  const pathsGroup = mapNode.findOne(node => node.type === "GROUP" && node.name === "Wiring Paths") as FrameNode;
  if (pathsGroup != null)
  {
    pathsGroup.remove();
  }

  console.log(`finding and deleting node 'Portals'`);
  const portalsGroup = mapNode.findOne(node => node.type === "GROUP" && node.name === "Portals") as FrameNode;
  if (portalsGroup != null)
  {
    portalsGroup.remove();
  }

  console.log(`finding and deleting node 'Booths'`);
  const boothsGroup = mapNode.findOne(node => node.type === "GROUP" && node.name === "Booths") as FrameNode;
  if (boothsGroup != null)
  {
    boothsGroup.remove();
  }

  console.log(`finding and deleting node 'Centers'`);
  const centersGroup = mapNode.findOne(node => node.type === "GROUP" && node.name === "Center Structure") as FrameNode;
  if (centersGroup != null)
  {
    centersGroup.remove();
  }


  // now we draw the wiring path lines

  var testLoopMax = 500;
  for (let path of pathList) {

    var cols = path.split(",");
    console.log(`path = ${path} cols.length = ${cols.length}`);

    const line = figma.createLine();
    var startNodeId = cols[4];
    var endNodeId = cols[5];

    console.log(`startNodeId = ${startNodeId} endNodeId = ${endNodeId}`);

    console.log(`(lightBaseMap.get(startNodeId) = ${lightBaseMap.get(startNodeId)} lightBaseMap.get(endNodeId) = ${lightBaseMap.get(endNodeId)}`);

    var startX = parseFloat(lightBaseMap.get(startNodeId)[1]);
    var startZ = -parseFloat(lightBaseMap.get(startNodeId)[2]);
    var endX = parseFloat(lightBaseMap.get(endNodeId)[1]);
    var endZ = -parseFloat(lightBaseMap.get(endNodeId)[2]);

    console.log(`processing path from node ${cols[4]} to ${cols[5]}`);

    var length = Math.sqrt((endX - startX)*(endX - startX) + (endZ - startZ)*(endZ - startZ));
    var rot = -Math.atan2(endZ - startZ, endX - startX) * 180 / Math.PI;

    line.resize(length,0);
    line.x = startX;
    line.y = startZ;
    line.rotation = rot;

    // add the length of the line
    var lineLength = figma.createText();
    lineLength.fontSize = 8;
    lineLength.characters = parseFloat(cols[6]).toFixed(2) + " (ft)";
    lineLength.x = ((startX + endX) / 2) + 10;
    lineLength.y = (startZ + endZ) / 2;

    // for now just put node in the main page; group later
    pageNode.appendChild(lineLength);
    lines.push(lineLength);

    // for now just put node in the main page; group later
    pageNode.appendChild(line);
    lines.push(line);

    testLoopMax -=1;
    if (testLoopMax == 0)
      break;
  }

  console.log(`done processing paths`);

  // and now we group the new lines together
  figma.currentPage.selection = lines;
  figma.viewport.scrollAndZoomIntoView(lines);
  console.log(`figma.group()`);
  const newLines = figma.group(lines,mapNode);
  newLines.name = "Wiring Paths";

  // now add new lights and group together
  console.log(`finding node 'Light Base'`);
  const base = pageNode.findOne(node => node.type === "COMPONENT" && node.name === "Light Base") as ComponentNode;
  if (base == null)
    {
      console.log(`Light Base is null !`);
      return;
    }
  
  var testLoopMax = 500;
  for (let key of lightBaseMap.keys()) {
    const light = base.createInstance();
    if (light == null)
    {
      console.log('base instance is null!');
      return;
    }

    console.log(`processing lightbase ${key}`);
    console.log(`    ${lightBaseMap.get(key)}`);
    console.log(`    ${lightBaseMap.get(key)[1]}`);
    console.log(`    ${lightBaseMap.get(key)[2]}`);

    light.x = parseFloat(lightBaseMap.get(key)[1]);
    light.y = -parseFloat(lightBaseMap.get(key)[2]);  // need to invert y because in unity, y axis runs bottom-to-top, and in figma, it runs top-to-bottom
    const id = light.findOne(node => node.type === "TEXT" && node.name === "#ID") as TextNode;
    id.characters = key;

    const univ = light.findOne(node => node.type === "TEXT" && node.name === "#Universe") as TextNode;
    univ.characters = `P${lightBaseMap.get(key)[6]}`;

    var chanStart = parseInt(lightBaseMap.get(key)[5]);
    var chanEnd = chanStart+20;

    const range = light.findOne(node => node.type === "TEXT" && node.name === "#Range") as TextNode;
    range.characters = `${chanStart}-${chanEnd}`;

    const angle = light.findOne(node => node.type === "TEXT" && node.name === "#A") as TextNode;
    if (angle != null)
      angle.characters = `A=${parseFloat(lightBaseMap.get(key)[7]).toFixed(1)}°`;

    const radius1 = light.findOne(node => node.type === "TEXT" && node.name === "#R1") as TextNode;
    if (radius1 != null)
    {
      var R1I = Math.round(lightBaseMap.get(key)[8]);
      var R1F = Math.floor(R1I/12);
      R1I = R1I - (R1F*12);
      radius1.characters = `R1=${R1F}'-${R1I}"`;  
    }

    const radius2 = light.findOne(node => node.type === "TEXT" && node.name === "#R2") as TextNode;
    if (radius2 != null)
    {
      var R2I = Math.round(lightBaseMap.get(key)[9]);
      radius2.characters = `R2=${R2I}"`;  
    }
    light.name = `Light ${key}`;

    // for now just put light in the main page; group later
    pageNode.appendChild(light);
    nodes.push(light);

    testLoopMax -=1;
    if (testLoopMax == 0)
      break;
  }

  console.log(`done adding lights`);

  // and now we group the new lights together
  figma.currentPage.selection = nodes;
  figma.viewport.scrollAndZoomIntoView(nodes);
  const newLights = figma.group(nodes,mapNode);
  newLights.name = "Lights";

  // now we add the portals
  console.log(`finding node 'Portal Base'`);
  const portalBase = pageNode.findOne(node => node.type === "COMPONENT" && node.name === "Portal Base") as ComponentNode;
  if (portalBase == null)
  {
    console.log(`Portal Base is null !`);
    return;
  }
  for (let portal of portalList) {
    var cols = portal.split(",");
    console.log(`portal = ${portal} cols.length = ${cols.length}`);

    const portalInstance = portalBase.createInstance();
    var portalId = parseInt(cols[0]);
    var portalX = parseFloat(cols[1]);
    var portalZ = parseFloat(cols[2]);
    var portalA = parseFloat(cols[3]);

    console.log(`processing portal ${portalId} (${portalX},${portalZ}) angle ${portalA}`);

    portalInstance.x = portalX;
    portalInstance.y = -portalZ;
    portalInstance.rotation = portalA;

    const id = portalInstance.findOne(node => node.type === "TEXT" && node.name === "#ID") as TextNode;
    id.characters = `Portal ${portalId}`;
    portalInstance.name = `Portal ${portalId}`;

    // for now just put node in the main page; group later
    pageNode.appendChild(portalInstance);
    portals.push(portalInstance);
  }

  // and now we group the new portals together
  figma.currentPage.selection = portals;
  const newPortals = figma.group(portals,mapNode);
  newPortals.name = "Portals";
  console.log(`done processing portals`);

  // now we add the booths
  console.log(`finding node 'Booth Base'`);
  const boothBase = pageNode.findOne(node => node.type === "COMPONENT" && node.name === "Booth Base") as ComponentNode;
  if (boothBase == null)
  {
    console.log(`Booth Base is null !`);
    return;
  }
  for (let booth of boothList) {
    var cols = booth.split(",");
    console.log(`booth = ${booth} cols.length = ${cols.length}`);

    const boothInstance = boothBase.createInstance();
    var boothId = parseInt(cols[0]);
    var boothX = parseFloat(cols[1]);
    var boothZ = parseFloat(cols[2]);
    var boothA = parseFloat(cols[3]);

    console.log(`processing booth ${boothId} (${boothX},${boothZ}) angle ${boothA}`);

    boothInstance.x = boothX;
    boothInstance.y = -boothZ;
    boothInstance.rotation = boothA;

    const id = boothInstance.findOne(node => node.type === "TEXT" && node.name === "#ID") as TextNode;
    id.characters = `Booth ${boothId}`;
    boothInstance.name = `Booth ${boothId}`;

    // for now just put node in the main page; group later
    pageNode.appendChild(boothInstance);
    booths.push(boothInstance);
  }

  // and now we group the new booths together
  figma.currentPage.selection = booths;
  const newBooths = figma.group(booths,mapNode);
  newBooths.name = "Booths";
  console.log(`done processing booths`);

  console.log(`adding center structure`);
  const centerBase = pageNode.findOne(node => node.type === "COMPONENT" && node.name === "Center Structure") as ComponentNode;
  if (centerBase == null)
  {
    console.log(`Center Structure is null !`);
    return;
  }
  const centerInstance = centerBase.createInstance();
  centerInstance.x = 0;
  centerInstance.y = 0;

  // for now just put node in the main page; group later
  pageNode.appendChild(centerInstance);
  centers.push(centerInstance);
  const newCent = figma.group(centers,mapNode);
  newCent.name = "Center Structure";
  console.log(`done adding center structure`);
}


async function exportTags() 
{

  const pageNode = figma.currentPage;

  // make sure we are on the right page
  if (pageNode.name != "Landmarks")
  {
    console.error(`need to be on the Landmarks page to run`);
    return;
  }

  var tagNode = pageNode.findOne(node => node.type === "FRAME" && node.name === "Arms / direction A") as FrameNode;
  console.log(`found tagNode '${tagNode.name}'`);
  tagNode = tagNode.findOne(node => node.type === "FRAME" && node.name === "Map") as FrameNode;
  console.log(`found tagNode '${tagNode.name}'`);
  tagNode = tagNode.findOne(node => node.type === "GROUP" && node.name === "Lights") as FrameNode;
  console.log(`found tagNode '${tagNode.name}'`);

  for (let child of tagNode.children)
  {
    if (child.name.startsWith("CWArm"))
    {
      //console.log(`found child '${child.name}'`);
      // find the child lights
      var childGroup = child as FrameNode;
      var csvLightNumbers = "";
      for (let light of childGroup.children)
      {
        if (csvLightNumbers != "")
        {
          csvLightNumbers += ",";
        }
        csvLightNumbers += light.name.substring(6);
      }
      //var groupNum = child.name.substring(6);
      console.log(`${child.name},${csvLightNumbers}`);
    }
  }

  var tagNode = pageNode.findOne(node => node.type === "FRAME" && node.name === "Portal Placemen / Aisles") as FrameNode;
  console.log(`found tagNode '${tagNode.name}'`);
  tagNode = tagNode.findOne(node => node.type === "FRAME" && node.name === "Map") as FrameNode;
  console.log(`found tagNode '${tagNode.name}'`);
  tagNode = tagNode.findOne(node => node.type === "GROUP" && node.name === "Lights") as FrameNode;
  console.log(`found tagNode '${tagNode.name}'`);

  for (let child of tagNode.children)
  {
    if (child.name.startsWith("Portal"))
    {
      //console.log(`found child '${child.name}'`);
      // find the child lights
      var childGroup = child as FrameNode;
      var csvLightNumbers = "";
      for (let light of childGroup.children)
      {
        if (csvLightNumbers != "")
        {
          csvLightNumbers += ",";
        }
        csvLightNumbers += light.name.substring(6);
      }
      //var groupNum = child.name.substring(6);
      console.log(`${child.name},${csvLightNumbers}`);
    }
  }

  var tagNode = pageNode.findOne(node => node.type === "FRAME" && node.name === "Arms / direction B") as FrameNode;
  console.log(`found tagNode '${tagNode.name}'`);
  tagNode = tagNode.findOne(node => node.type === "FRAME" && node.name === "Map") as FrameNode;
  console.log(`found tagNode '${tagNode.name}'`);
  tagNode = tagNode.findOne(node => node.type === "GROUP" && node.name === "Lights") as FrameNode;
  console.log(`found tagNode '${tagNode.name}'`);

  console.log('exporting direction B!');
  for (let child of tagNode.children)
  {
    if (child.name.startsWith("Arm"))
    {
      //console.log(`found child '${child.name}'`);
      // find the child lights
      var childGroup = child as FrameNode;
      if (childGroup != null)
      {
        var csvLightNumbers = "";
        for (let light of childGroup.children)
        {
          if (csvLightNumbers != "")
          {
            csvLightNumbers += ",";
          }
          csvLightNumbers += light.name.substring(6);
        }
        //var groupNum = child.name.substring(6);
        console.log(`${child.name},${csvLightNumbers}`);
      }
    }
  }
  console.log('finished exporting direction B!');

}

async function numberRadials() {

  const pageNode = figma.currentPage;
  const nodes: SceneNode[] = [];

  // make sure we are on the right page
  if (pageNode.name != "Assets")
  {
    console.error(`need to be on the Assets page to run`);
    return;
  }
  
  console.log(`finding node 'Map'`);
  const mapNode = pageNode.findOne(node => node.type === "FRAME" && node.name === "Map") as FrameNode;
  if (mapNode == null)
  {
    console.log(`mapNode is null !`);
    return;
  }

  // first get rid of old numbers
  console.log(`finding and deleting node 'Numbers'`);
  const numbers = pageNode.findOne(node => node.type === "GROUP" && node.name === "Numbers") as GroupNode;
  if (numbers != null)
  {
    numbers.remove();
  }

  // now we draw the numbers
  for (let i=0; i < 360; i+=5) {
    const text = figma.createText();
    var x = 1560 * Math.cos((i-90) * Math.PI / 180);
    var y = 1560 * Math.sin((i-90) * Math.PI / 180);
    text.x = x;
    text.y = y;
    text.fontSize = 20;
    text.characters = i.toString() + "°";
    
    // for now just put node in the main page; group later
    pageNode.appendChild(text);
    nodes.push(text);
  }

  console.log(`done drawing numbers`);

  // and now we group the new lines together
  figma.currentPage.selection = nodes;
  figma.viewport.scrollAndZoomIntoView(nodes);
  console.log(`figma.group()`);
  const numberGroup = figma.group(nodes,mapNode);
  numberGroup.name = "Numbers";
}


// This file holds the main code for the plugins. It has access to the *document*.
// You can access browser APIs such as the network by creating a UI which contains
// a full browser environment (see documentation).

(async() => {
  await loadFonts();

  console.log(`figma.command = ${figma.command}`)
  console.log(`figma.currentPage.name = '${figma.currentPage.name}'`);

  if (figma.command == "import")
  {    
    await importCSV();
  }
  else if (figma.command == "export")
  {
    await exportTags();
  }
  else if (figma.command == "radials")
  {
    await numberRadials();
  }

  // Make sure to close the plugin when you're done. Otherwise the plugin will
  // keep running, which shows the cancel button at the bottom of the screen.
  figma.closePlugin();

})();


