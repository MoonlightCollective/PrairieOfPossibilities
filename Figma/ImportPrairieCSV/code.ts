async function loadFonts() {

  await figma.loadFontAsync({ family: "Inter", style: "Regular" });
  console.log("Awaiting the fonts.");
};


var lightBaseMap = new Map();
var pathList = [];
var portalList = [];
var boothList = [];

function buildMaps() {

  var csvData = loadBaseData();
  console.log(`csvData() ${csvData}`);

  var rows = csvData.split("\n");
  console.log(`buildMap() found ${rows.length} base rows`);
  for (var i=0;i<rows.length;i++)
  {
    if (i > 0)
    {
      rows[i] = rows[i].trim();
      var cols = rows[i].split(",");
      // now apply 135 degree rotation
      //var theta = -Math.PI * 135 / 180;
      var theta = 0;
      var oldX = parseFloat(cols[1]);
      var oldZ = parseFloat(cols[2]);
      var newX = oldX * Math.cos(theta) - oldZ * Math.sin(theta);
      var newZ = oldZ * Math.cos(theta) + oldX * Math.sin(theta);
      cols[1] = newX.toString();
      cols[2] = newZ.toString(); 
      lightBaseMap.set(cols[0], cols);
    }
  }

  var portalData = loadPortalData();
  console.log(`portalData() ${portalData}`);
  rows = portalData.split("\n");
  console.log(`found ${rows.length} portals`);
  for (var i=0; i<rows.length; i++)
  {
    if (i > 0)
    {
      // store them as strings.   typescript doesnt' like arrays of arrays
      rows[i] = rows[i].trim();
      portalList.push(rows[i]);
    }
  }

  var boothData = loadBoothData();
  console.log(`boothData() ${boothData}`);
  rows = boothData.split("\n");
  console.log(`found ${rows.length} booths`);
  for (var i=0; i<rows.length; i++)
  {
    if (i > 0)
    {
      // store them as strings.   typescript doesnt' like arrays of arrays
      rows[i] = rows[i].trim();
      boothList.push(rows[i]);
    }
  }

  var pathData = loadPathData();
  console.log(`pathData() ${pathData}`);
  rows = pathData.split("\n");
  console.log(`buildMap() found ${rows.length} path rows`);
  for (var i=0;i<rows.length;i++)
  {
    if (i > 0)
    {
      // store them as strings.   typescript doesnt' like arrays of arrays
      rows[i] = rows[i].trim();
      pathList.push(rows[i]);
    }
  }
}

function loadPortalData()
{
  var portalData = `PortalId,x,z,Theta
  1,1680,0,90
  2,0,1680,180
  3,-1680,0,270
  4,0,-1680,0`;
  return portalData;
}

function loadBoothData()
{
  var boothData = `BoothId,x,z,Theta
  1,1357,1357,45
  2,-1357,-1357,225`;
  return boothData;
}

function loadBaseData()
{
  var baseData = `BaseId,x,z,DistFromCtr,Theta,ChannelStart,PathId,NearestTheta5,DistFromCenterOnTheta5,DistFromTheta5
  0,240.0002,0,240.0002,90,1,0,90,240.0002,0
  1,228.2538,74.16415,240.0002,72,337,8,70,239.854,8.375884
  2,194.1643,141.0686,240.0002,54,106,9,55,239.9637,-4.188574
  3,141.0686,194.1643,240.0002,36,232,17,35,239.9637,4.188574
  4,74.16415,228.2538,240.0002,18,43,18,20,239.854,-8.375898
  5,-1.049074E-05,240.0002,240.0002,0,358,19,0,240.0002,-9.094947E-13
  6,-74.16415,228.2538,240.0002,342,400,16,340,239.854,8.375876
  7,-141.0686,194.1643,240.0002,324,64,15,325,239.9637,-4.18858
  8,-194.1643,141.0686,240.0003,306,232,14,305,239.9637,4.188566
  9,-228.2538,74.16411,240.0002,288,400,13,290,239.854,-8.37595
  10,-240.0002,-7.8202E-05,240.0002,270,64,12,270,240.0002,-5.722051E-05
  11,-228.2538,-74.16425,240.0002,252,253,11,250,239.854,8.375787
  12,-194.1642,-141.0687,240.0002,234,442,10,235,239.9637,-4.188748
  13,-141.0685,-194.1644,240.0002,216,22,7,215,239.9637,4.188461
  14,-74.16396,-228.2539,240.0002,198,232,6,200,239.854,-8.37606
  15,0.000231744,-240.0002,240.0002,179.9999,442,5,180,240.0002,-0.0002288821
  16,74.1644,-228.2537,240.0002,161.9999,148,4,160,239.854,8.375604
  17,141.0688,-194.1641,240.0003,143.9999,358,3,145,239.9637,-4.18891
  18,194.1644,-141.0684,240.0002,125.9999,64,2,125,239.9637,4.188244
  19,228.2539,-74.16382,240.0002,107.9999,295,1,110,239.854,-8.376289
  20,-298.381,12.33937,298.636,272.3681,85,12,270,298.381,12.3394
  21,217.8482,-216.7885,307.3354,134.8603,85,2,135,307.3345,-0.7493588
  22,-14.58694,315.4627,315.7998,357.3525,379,19,355,315.5336,12.96296
  23,-207.6204,-248.7982,324.0475,219.8448,43,7,220,324.0464,-0.8779043
  24,329.129,44.28362,332.0948,82.33698,22,0,80,331.8186,13.5418
  25,-279.0555,194.1597,339.9558,304.8292,253,14,305,339.9543,-1.013332
  26,76.30106,-339.1664,347.6431,167.3214,169,4,165,347.3578,14.08156
  27,176.5829,308.1605,355.1681,29.81369,127,9,30,355.1663,-1.154964
  28,-345.3901,-110.1888,362.5409,252.3059,274,11,250,362.2473,14.58673
  29,335.6744,-155.0901,369.7706,114.7981,316,1,115,369.7683,-1.302848
  30,-145.4944,347.6476,376.8653,337.2901,421,16,335,376.5643,15.0595
  31,-129.9075,-361.1808,383.8327,199.7823,253,6,200,383.8299,-1.457925
  32,345.8246,181.7576,390.6795,62.2746,358,8,60,390.3716,15.50557
  33,-384.2851,101.2976,397.4119,284.7673,421,13,285,397.4087,-1.614346
  34,218.5167,-339.846,404.0357,147.2595,379,3,145,403.7216,15.92916
  35,69.53959,404.624,410.5561,9.751709,64,18,10,410.5523,-1.779117
  36,-329.6732,-255.3161,416.9781,232.2439,463,10,230,416.6583,16.32639
  37,421.8605,-34.95137,423.3059,94.73618,43,0,95,423.3014,-1.949321
  38,-291.6937,315.3138,429.5439,317.2284,85,15,315,429.2191,16.70194
  39,2.124461,-435.6907,435.6959,179.7206,463,5,180,435.6907,-2.124456
  40,296.8163,327.1953,441.7654,42.21286,148,9,40,441.436,17.05744
  41,-445.8453,-41.31997,447.7559,264.7051,106,12,265,447.75,-2.304722
  42,361.375,-274.2718,453.6704,127.1973,106,2,125,453.3369,17.39403
  43,-82.24434,452.0919,459.512,349.6895,400,19,350,459.5052,-2.48991
  44,-247.8131,-393.7984,465.2832,212.1818,64,7,210,464.946,17.71326
  45,454.2374,124.487,470.9868,74.67398,379,8,75,470.9792,-2.679899
  46,-424.0466,217.6143,476.6251,297.1662,274,14,295,476.2845,18.01572
  47,167.6206,-452.1292,482.2007,159.6584,190,4,160,482.1921,-2.87454
  48,183.8899,451.7197,487.7153,22.15067,253,17,20,487.3717,18.30271
  49,-445.6572,-211.2048,493.1712,244.6429,295,11,245,493.1616,-3.073707
  50,476.44,-146.8918,498.5702,107.1351,337,1,105,498.2241,18.57477
  51,-254.7901,434.7546,503.9142,329.6273,442,16,330,503.9036,-3.27738
  52,-106.909,-497.8556,509.205,192.1196,274,6,190,508.8567,18.83307
  53,419.3993,297.9215,514.4443,54.61182,169,9,55,514.4325,-3.485443
  54,-515.6443,64.26377,519.6334,277.104,442,13,275,519.2831,19.07779
  55,340.1425,-399.6133,524.7739,139.5963,400,3,140,524.7609,-3.697852
  56,19.30993,529.5154,529.8674,2.088501,421,19,0,529.5154,19.30995
  57,-375.4611,-381.0027,534.915,224.5803,484,10,225,534.9008,-3.918543
  58,539.2135,27.57479,539.9182,87.07251,400,8,85,539.5649,19.52569
  59,-420.0494,347.0598,544.878,309.5647,106,15,310,544.8622,-4.139361
  60,75.97547,-544.521,549.7957,172.0569,484,5,170,549.4415,19.73384
  61,314.5623,456.8503,554.6725,34.54919,274,17,35,554.6553,-4.364182
  62,-545.2617,-125.4598,559.5092,257.0423,127,12,255,559.1537,19.93932
  63,490.9804,-278.174,564.3071,119.5345,127,2,120,564.2885,-4.584614
  64,-175.5987,541.297,569.0671,342.0268,211,20,340,568.7111,20.12564
  65,-238.1197,-522.0479,573.7901,204.519,85,7,205,573.7698,-4.817163
  66,532.535,225.9249,578.477,67.0112,190,9,65,578.1206,20.30155
  67,-549.6697,194.6853,583.1288,289.5034,295,14,290,583.1068,-5.053874
  68,275.9695,-518.9282,587.7462,151.9957,211,4,150,587.3897,20.46746
  69,148.1863,573.4943,592.33,14.48788,85,18,15,592.3063,-5.294271
  70,-500.4737,-325.2585,596.8811,236.9801,316,11,235,596.5247,20.62376
  71,593.2003,-98.97327,601.4002,99.47235,64,0,100,601.3747,-5.538671
  72,-373.317,477.2154,605.8879,321.9646,463,16,320,605.5317,20.77067
  73,-47.42826,-608.4995,610.345,184.4568,295,6,185,610.3177,-5.786421
  74,449.2427,419.6735,614.7722,46.94901,295,17,45,614.4165,20.90855
  75,-619.1406,-6.038096,619.17,269.4412,463,13,270,619.1406,-6.038042
  76,463.8641,-416.6909,623.5392,131.9335,421,3,130,623.1843,21.03754
  77,-60.99007,624.9112,627.8804,354.4257,1,21,355,627.8488,-6.293369
  78,-379.7402,-505.437,632.194,216.9179,1,10,215,631.8398,21.15831
  79,625.64,116.9706,636.4806,79.41016,211,9,80,636.447,-6.55228
  80,-543.9566,338.6146,640.7407,301.9024,127,15,300,640.3876,21.27052
  81,173.505,-621.1995,644.975,164.3946,1,5,165,644.939,-6.814713
  82,293.5804,579.0081,649.184,26.88684,106,18,25,648.832,21.37484
  83,-611.5074,-230.1055,653.3681,249.3791,148,12,250,653.3298,-7.080608
  84,610.2009,-244.9441,657.5278,111.8713,358,1,110,657.1771,21.47103
  85,-286.2752,596.5276,661.6636,334.3635,232,20,335,661.6228,-7.349966
  86,-193.0504,-637.1726,665.7758,196.8557,106,7,195,665.4266,21.56002
  87,576.271,341.5123,669.8649,59.34799,316,17,60,669.8215,-7.622848
  88,-659.5926,138.2791,673.9313,281.8402,316,14,280,673.5839,21.64125
  89,395.315,-550.7966,677.9756,144.3324,232,4,145,677.9295,-7.899203
  90,81.04273,677.1658,681.9982,6.824646,442,19,5,681.6522,21.71541
  91,-520.2112,-447.1856,685.9991,229.3169,337,11,230,685.9503,-8.178739
  92,689.6351,-21.78245,689.9791,91.80911,421,8,90,689.6351,21.78257
  93,-496.6351,484.6686,693.938,314.3013,484,16,315,693.8865,-8.461587
  94,39.03476,-696.7843,697.8768,176.7936,316,6,175,697.5349,21.84253
  95,444.3693,543.1879,701.7957,39.2858,127,18,40,701.7411,-8.74782
  96,-698.4413,-100.9204,705.6948,261.778,484,13,260,705.3549,21.8959
  97,586.386,-399.5594,709.5746,124.2703,148,2,125,709.517,-9.037453
  98,-163.3684,694.4788,713.4353,346.7625,22,21,345,713.0979,21.94258
  99,-350.5283,-625.7928,717.2773,209.2547,22,10,210,717.2167,-9.329902
  100,684.8167,225.8593,721.1008,71.74695,337,17,70,720.7656,21.9827
  101,-660.9982,297.6075,724.9061,294.2392,148,15,295,724.8423,-9.625947
  102,287.8648,-669.4238,728.6936,156.7314,22,5,155,728.3609,22.01653
  103,241.1679,691.622,732.4636,19.22363,463,19,20,732.3964,-9.924948
  104,-648.3181,-348.8522,736.2161,241.7158,169,12,240,735.886,22.04421
  105,717.3171,-181.6166,739.9517,104.2081,85,0,105,739.8809,-10.22734
  106,-408.2889,621.5674,743.6706,326.7003,253,20,325,743.3431,22.06574
  107,-119.3946,-737.7744,747.3728,189.1925,127,7,190,747.2986,-10.53241
  108,589.2894,465.6473,751.0588,51.68475,148,18,50,750.7343,22.08134
  109,-752.724,54.97255,754.7287,274.177,337,14,275,754.6508,-10.84097
  110,520.4178,-551.6429,758.3828,136.6683,442,3,135,758.0614,22.07935
  111,-11.16397,761.9395,762.0212,359.1606,274,22,0,761.9395,-11.16394
  112,-508.8587,-572.0789,765.6445,221.6528,358,11,220,765.326,22.08325
  113,765.2394,78.47222,769.2525,84.14502,232,9,85,769.1667,-11.4786
  114,-620.1542,461.1929,772.8455,306.6372,1,16,305,772.5301,22.08128
  115,146.4261,-762.4916,776.4239,169.1295,337,6,170,776.3343,-11.79626
  116,408.9541,664.1817,779.9877,31.6217,484,19,30,779.6752,22.0738
  117,-753.6122,-214.4741,783.5372,254.1139,1,13,255,783.4436,-12.11685
  118,703.7264,-352.4944,787.0725,116.6061,379,1,115,786.7632,22.0606
  119,-282.0558,738.5684,790.5939,339.0984,43,21,340,790.496,-12.44046
  120,-292.2298,-738.3761,794.1017,201.5923,43,10,200,793.7951,22.06673
  121,717.3895,348.5843,797.5956,64.08459,169,18,65,797.4937,-12.74273
  122,-767.7822,228.5475,801.0765,286.5768,169,15,285,800.7731,22.04319
  123,413.5395,-690.1274,804.5438,149.069,253,4,150,804.4376,-13.07208
  124,161.9355,791.6048,807.9984,11.56128,1,26,10,807.6983,22.01453
  125,-656.9136,-476.3393,811.4398,234.0535,190,12,235,811.3292,-13.40416
  126,809.5566,-92.89175,814.8685,96.54572,442,8,95,814.572,21.98054
  127,-536.434,617.9229,818.2849,319.038,274,20,320,818.1695,-13.7391
  128,-21.94188,-821.3958,821.6888,181.5302,148,7,180,821.3958,21.94189
  129,573.3811,593.2891,825.0804,44.0224,1,19,45,824.9604,-14.07705
  130,-826.9276,-50.36514,828.4599,266.5146,358,14,265,828.1705,21.89805
  131,646.3887,-523.5634,831.8275,129.0069,169,2,130,831.7025,-14.41806
  132,-123.4612,826.0077,835.1835,351.4991,295,22,350,834.8976,21.84923
  133,-468.7933,-695.242,838.5276,213.9913,379,11,215,838.3977,-14.76134
  134,818.543,196.7635,841.8602,76.48352,358,17,75,841.5781,21.79554
  135,-739.3856,409.4393,845.1813,298.9758,22,16,300,845.0463,-15.10799
  136,269.6797,-804.4938,848.4912,161.468,43,5,160,848.2127,21.73704
  137,345.914,778.3895,851.7903,23.96024,190,27,25,851.6501,-15.45702
  138,-783.8746,-341.6122,855.078,246.4524,22,13,245,854.8033,21.6739
  139,811.8601,-278.6693,858.355,108.9447,106,0,110,858.2095,-15.80924
  140,-411.9638,756.7544,861.6213,331.4369,64,21,330,861.3505,21.60614
  141,-208.1946,-839.4446,864.8771,193.9291,64,10,195,864.7259,-16.16368
  142,723.2566,480.1421,868.1224,56.42136,22,19,55,867.8553,21.53358
  143,-860.8339,135.0121,871.3571,278.9136,190,15,280,871.2004,-16.52138
  144,545.5643,-683.559,874.5818,141.4058,463,3,140,874.3184,21.4566
  145,59.6736,875.7654,877.7961,3.898041,22,23,5,877.6338,-16.88152
  146,-637.8925,-607.6635,881.0004,226.3903,211,12,225,880.7411,21.37509
  147,884.0269,17.24438,884.1951,88.88251,253,9,90,884.0269,-17.24438
  148,-665.8921,586.541,887.3796,311.3747,295,20,310,887.1243,21.28929
  149,95.14473,-885.4573,890.5544,173.8669,358,6,175,890.3803,-17.61
  150,529.8375,719.7272,893.7198,36.35919,379,28,35,893.4683,21.19885
  151,-879.9507,-173.4147,896.8757,258.8514,379,14,260,896.6955,-17.97825
  152,768.6756,-468.1642,900.0222,121.3436,400,1,120,899.7747,21.10409
  153,-251.4306,867.4557,903.1594,343.8359,316,22,345,902.9729,-18.34921
  154,-401.948,-812.2773,906.2873,206.3281,400,11,205,906.0438,21.00542
  155,847.9774,328.5629,909.406,68.82031,190,18,70,909.2133,-18.72278
  156,-850.1104,331.6585,912.5157,291.3126,43,16,290,912.2764,20.90219
  157,404.1817,-821.5784,915.6166,153.8048,274,4,155,915.4174,-19.09906
  158,257.8047,881.7951,918.7088,16.297,22,26,15,918.4734,20.79481
  159,-788.3781,-477.6614,921.792,238.7892,43,13,240,921.5861,-19.47789
  160,906.9963,-180.9304,924.8665,101.2815,463,8,100,924.6353,20.68315
  161,-548.3862,748.553,927.9327,323.7737,85,21,325,927.7201,-19.85932
  162,-101.6109,-925.4286,930.9903,186.2659,169,7,185,930.763,20.56785
  163,702.3354,615.7553,934.0394,48.75815,43,29,50,933.82,-20.24339
  164,-936.8572,20.44819,937.0803,271.2504,211,15,270,936.8572,20.44827
  165,679.1879,-650.0126,940.113,133.7426,190,2,135,939.8865,-20.63022
  166,-61.93356,941.1017,943.1373,356.2348,43,23,355,942.9184,20.32456
  167,-591.9243,-738.128,946.1539,218.727,232,12,220,945.9205,-21.0191
  168,938.038,144.8929,949.1624,81.21927,379,17,80,948.9474,20.19692
  169,-792.0497,528.4611,952.1627,303.7115,316,20,305,951.9219,-21.41107
  170,227.7762,-927.5991,955.1555,166.2037,64,5,165,954.9448,20.0653
  171,460.0621,840.4615,958.1403,28.69595,211,27,30,957.8921,-21.80524
  172,-909.7773,-309.9229,961.1175,251.1882,400,14,250,960.9109,19.92988
  173,882.9109,-387.2107,964.087,113.6804,127,0,115,963.8311,-22.20237
  174,-390.6706,884.6243,967.0489,336.1726,337,22,335,966.8464,19.79066
  175,-310.4322,-918.9879,970.0035,198.6649,85,10,200,969.7401,-22.60138
  176,852.2518,469.3609,972.9506,61.1571,43,19,60,972.7521,19.64749
  177,-948.3294,230.2893,975.8902,283.6493,64,16,285,975.6191,-23.00344
  178,545.3444,-812.8307,978.8229,146.1415,484,3,145,978.6286,19.50039
  179,147.3782,970.623,981.7481,8.633789,484,25,10,981.4689,-23.40779
  180,-766.5901,-617.9861,984.6661,231.126,64,13,230,984.476,19.34976
  181,985.6085,-62.32402,987.5771,93.61823,274,9,95,987.2899,-23.81487
  182,-686.6711,713.8176,990.4811,316.1105,106,21,315,990.295,19.19551
  183,24.22392,-993.0825,993.3779,178.6027,379,6,180,993.0825,-24.22391
  184,654.8553,750.8094,996.2681,41.09491,400,28,40,996.0862,19.03719
  185,-992.8998,-111.5973,999.1516,263.5872,232,15,265,998.8479,-24.63565
  186,809.8409,-590.0995,1002.028,126.0794,421,1,125,1001.85,18.87542
  187,-199.1138,984.9736,1004.898,348.5716,64,23,350,1004.585,-25.04992
  188,-519.997,-863.2408,1007.761,211.0638,421,11,210,1007.587,18.71032
  189,969.28,286.0828,1010.617,73.55603,211,18,75,1010.296,-25.46664
  190,-910.5237,445.0421,1013.467,296.0483,337,20,295,1013.298,18.54114
  191,371.8106,-945.8564,1016.311,158.5405,295,4,160,1015.981,-25.88579
  192,365.7733,951.2476,1019.148,21.03271,43,26,20,1018.982,18.36862
  193,-914.8019,-455.6061,1021.978,243.5249,421,14,245,1021.64,-26.30733
  194,985.0187,-282.7693,1024.803,106.0172,484,8,105,1024.641,18.19229
  195,-536.7863,876.2787,1027.621,328.5094,358,22,330,1027.273,-26.73115
  196,-196.6446,-1011.495,1030.432,191.0016,190,7,190,1030.275,18.01299
  197,830.5096,614.6824,1033.238,53.49387,64,29,55,1032.881,-27.1576
  198,-1030.388,108.0453,1036.037,275.9861,85,16,275,1035.884,17.82975
  199,688.6444,-777.7776,1038.831,138.4783,211,2,140,1038.464,-27.5865
  200,17.64337,1041.469,1041.618,0.9705505,190,25,0,1041.469,17.64342
  201,-718.4249,-758.0476,1044.4,223.4628,253,12,225,1044.024,-28.01755
  202,1044.566,73.86764,1047.175,85.95502,400,17,85,1047.029,17.45339
  203,-822.2969,652.8488,1049.945,308.4472,127,21,310,1049.559,-28.45106
  204,165.7785,-1039.573,1052.708,170.9395,85,5,170,1052.567,17.26004
  205,581.501,880.8325,1055.466,33.4317,232,27,35,1055.071,-28.88697
  206,-1026.444,-257.3696,1058.219,255.9239,253,15,255,1058.081,17.0634
  207,933.1343,-504.8835,1060.965,118.4161,148,0,120,1060.56,-29.32538
  208,-347.9168,1005.199,1063.706,340.9084,85,23,340,1063.572,16.86325
  209,-423.545,-978.7269,1066.441,203.4006,106,10,205,1066.026,-29.76568
  210,975.9211,436.6973,1069.171,65.89282,64,19,65,1069.041,16.65993
  211,-1017.184,338.0772,1071.895,288.3851,358,20,290,1071.469,-30.20876
  212,522.995,-938.7602,1074.614,150.8773,1,3,150,1074.488,16.453
  213,249.1105,1048.13,1077.327,13.36951,463,25,15,1076.891,-30.65393
  214,-893.9294,-606.1069,1080.035,235.8617,85,13,235,1079.913,16.24307
  215,1071.249,-157.3088,1082.737,98.35394,295,9,100,1082.291,-31.10182
  216,-685.3483,841.7043,1085.435,320.8462,379,22,320,1085.316,16.02986
  217,-63.33208,-1086.282,1088.127,183.3367,400,6,185,1087.668,-31.5846
  218,782.399,760.0825,1090.813,45.82889,421,28,45,1090.699,15.78017
  219,-1093.025,-32.037,1093.495,268.3211,106,16,270,1093.025,-32.03691
  220,829.6293,-716.4541,1096.171,130.8134,442,1,130,1096.061,15.56001
  221,-128.0966,1091.35,1098.842,353.3056,169,25,355,1098.362,-32.49164
  222,-644.3016,-893.4185,1101.509,215.7978,442,11,215,1101.402,15.33732
  223,1081.189,224.0997,1104.17,78.29004,232,18,80,1103.678,-32.94861
  224,-950.8943,566.4478,1106.826,300.7823,148,21,300,1106.723,15.11097
  225,319.2931,-1062.54,1109.477,163.2745,316,4,165,1108.974,-33.40788
  226,483.4488,1001.546,1112.123,25.76672,64,26,25,1112.024,14.88163
  227,-1035.468,-412.9228,1114.764,248.2589,442,14,250,1114.25,-33.86943
  228,1044.913,-395.9063,1117.401,110.7512,1,8,110,1117.305,14.64879
  229,-504.2402,1000.107,1120.032,333.2434,106,23,335,1119.506,-34.33312
  230,-304.464,-1080.586,1122.659,195.7356,211,7,195,1122.567,14.41355
  231,956.6565,592.5087,1125.281,58.22784,85,29,60,1124.743,-34.79931
  232,-1108.214,209.8014,1127.899,280.7201,379,20,280,1127.81,14.17456
  233,677.0085,-905.3813,1130.511,143.2123,232,2,145,1129.961,-35.26767
  234,112.6303,1127.508,1133.119,5.704529,211,25,5,1133.033,13.93284
  235,-846.6112,-757.0439,1135.723,228.1968,274,12,230,1135.16,-35.73819
  236,1138.238,-13.75752,1138.321,90.69247,421,17,90,1138.238,13.75772
  237,-831.9002,780.7885,1140.916,313.1847,400,22,315,1140.343,-36.14143
  238,86.19758,-1140.252,1143.505,175.6769,106,5,175,1143.426,13.50993
  239,708.2672,901.0444,1146.09,38.16916,253,27,40,1145.505,-36.6161
  240,-1133.447,-186.3935,1148.671,260.6614,274,15,260,1148.594,13.25937
  241,963.8328,-629.6008,1151.248,123.1536,169,0,125,1150.65,-37.0932
  242,-286.0489,1117.799,1153.819,345.6458,43,24,345,1153.746,13.00571
  243,-545.3497,-1019.718,1156.387,208.1381,127,10,210,1155.776,-37.57211
  244,1093.351,384.38,1158.95,70.63031,85,19,70,1158.88,12.74911
  245,-1068.202,456.1231,1161.509,293.1226,169,21,295,1160.885,-38.05369
  246,480.6067,-1060.217,1164.063,155.6147,22,3,155,1163.997,12.48944
  247,362.5745,1108.84,1166.614,18.10699,442,25,20,1165.977,-38.53721
  248,-1018.58,-573.9589,1169.16,240.5992,106,13,240,1169.096,12.22707
  249,1141.249,-265.3972,1171.702,103.0914,316,9,105,1171.052,-39.02323
  250,-663.6826,968.6915,1174.239,325.5837,127,23,325,1174.178,11.96165
  251,-165.3185,-1165.102,1176.773,188.0759,421,6,190,1176.109,-39.51088
  252,910.8698,749.0461,1179.302,50.56812,442,28,50,1179.244,11.69319
  253,-1180.142,63.09511,1181.828,273.0604,127,16,275,1181.15,-40.00131
  254,829.3456,-845.4987,1184.349,135.5526,463,1,135,1184.294,11.42173
  255,-40.4935,1186.175,1186.866,358.0448,148,25,0,1186.175,-40.49345
  256,-773.0243,-903.9115,1189.379,220.537,463,11,220,1189.327,11.14801
  257,1183.078,144.6505,1191.888,83.02927,253,18,85,1191.183,-40.98806
  258,-972.1142,693.9525,1194.394,305.5215,421,22,305,1194.344,10.8708
  259,248.5682,-1170.799,1196.895,168.0137,337,4,170,1196.176,-41.48474
  260,608.8446,1033.368,1199.392,30.50595,85,26,30,1199.345,10.59095
  261,-1149.358,-351.4341,1201.886,252.9982,463,14,255,1201.152,-41.98355
  262,1087.138,-518.3146,1204.375,115.4904,22,8,115,1204.331,10.30788
  263,-452.4376,1118.845,1206.861,337.9826,337,24,340,1206.113,-42.48476
  264,-423.0236,-1132.944,1209.343,200.4749,232,7,200,1209.302,10.02265
  265,1079.424,550.7757,1211.821,62.96707,106,29,65,1211.059,-42.9879
  266,-1170.363,323.6752,1214.296,285.4593,400,20,285,1214.257,9.734011
  267,645.6606,-1031.331,1216.766,147.9515,253,2,150,1215.989,-43.49328
  268,221.0108,1199.035,1219.233,10.44376,232,25,10,1219.197,9.442903
  269,-974.8682,-736.325,1221.697,232.936,295,12,235,1220.904,-44.00074
  270,1218.667,-115.8034,1224.156,95.42822,442,17,95,1224.122,9.148583
  271,-822.0286,910.4098,1226.612,317.9204,148,23,320,1225.804,-44.51026
  272,-8.852164,-1229.033,1229.064,180.4127,127,5,180,1229.033,8.852179
  273,838.3937,902.0646,1231.513,42.90491,274,27,45,1230.69,-45.02217
  274,-1229.979,-99.02387,1233.958,265.3971,295,15,265,1233.929,8.552712
  275,975.7643,-759.3207,1236.4,127.8893,190,0,130,1235.561,-45.5361
  276,-206.9921,1221.423,1238.838,350.3816,22,24,350,1238.81,8.250409
  277,-673.7508,-1042.505,1241.272,212.8738,148,10,215,1240.418,-46.0518
  278,1203.357,314.213,1243.703,75.36603,106,19,75,1243.678,7.94532
  279,-1101.712,582.2993,1246.131,297.8583,190,21,300,1245.26,-46.57002
  280,419.8459,-1175.848,1248.555,160.3505,43,3,160,1248.532,7.637553
  281,485.6321,1152.866,1250.975,22.84271,421,25,25,1250.089,-47.09026
  282,-1139.037,-523.0569,1253.393,245.3349,127,13,245,1253.371,7.32706
  283,1195.508,-384.4611,1255.806,107.8272,337,9,110,1254.904,-47.61292
  284,-623.0244,1093.138,1258.217,330.3194,316,24,330,1258.197,7.014012
  285,-279.5387,-1229.24,1260.624,192.8116,442,6,195,1259.704,-48.13696
  286,1038.439,718.946,1263.028,55.30386,463,28,55,1263.01,6.698121
  287,-1253.732,171.6525,1265.428,277.7961,148,16,280,1264.492,-48.6637
  288,810.045,-975.2989,1267.825,140.2883,484,1,140,1267.809,6.379476
  289,61.61888,1268.724,1270.219,2.780518,127,25,5,1269.266,-49.19222
  290,-904.1446,-895.5767,1272.61,225.2728,484,11,225,1272.595,6.058313
  291,1274.027,49.72285,1274.997,87.76498,274,18,90,1274.027,-49.72285
  292,-974.8347,825.4694,1277.381,310.2572,442,22,310,1277.368,5.734481
  293,161.517,-1269.529,1279.762,172.7495,358,4,175,1278.775,-50.25569
  294,739.8286,1047.156,1282.14,35.24167,106,26,35,1282.129,5.408051
  295,-1255.191,-272.898,1284.514,257.7339,484,14,260,1283.51,-50.79044
  296,1111.927,-647.8362,1286.886,120.2261,43,8,120,1286.876,5.07867
  297,-382.9975,1231.052,1289.254,342.7184,358,24,345,1288.232,-51.32744
  298,-550.1605,-1168.59,1291.619,205.2106,253,7,205,1291.61,4.747193
  299,1197.228,490.9505,1293.981,67.70282,127,29,70,1292.941,-51.86652
  300,-1216.645,447.5185,1296.34,290.195,421,20,290,1296.333,4.41264
  301,595.903,-1153.911,1298.696,152.6873,274,2,155,1297.638,-52.40758
  302,340.6715,1255.656,1301.049,15.1795,253,25,15,1301.043,4.075691
  303,-1101.37,-697.018,1303.399,237.6717,316,12,240,1302.323,-52.95052
  304,1285.255,-230.4189,1305.746,100.1639,463,17,100,1305.741,3.735892
  305,-793.483,1039.944,1308.09,322.6562,169,23,325,1306.995,-53.49577
  306,-117.5924,-1305.144,1310.431,185.1484,148,5,185,1310.426,3.394145
  307,970.0484,884.5153,1312.769,47.64063,295,27,50,1311.656,-54.04296
  308,-1315.1,3.0494,1315.104,270.1329,316,15,270,1315.1,3.049515
  309,969.37,-892.165,1317.436,132.6251,211,0,135,1316.304,-54.59237
  310,-112.333,1314.975,1319.765,355.1173,1,24,355,1319.762,2.702174
  311,-806.8417,-1047.345,1322.091,217.6095,169,10,220,1320.941,-55.14342
  312,1304.7,227.6652,1324.414,80.10175,127,19,80,1324.412,2.352312
  313,-1117.786,714.6888,1326.735,302.594,211,21,305,1325.565,-55.69689
  314,342.0519,-1284.282,1329.052,165.0862,64,3,165,1329.051,1.99993
  315,616.3733,1180.094,1331.367,27.57843,400,25,30,1330.179,-56.25217
  316,-1253.81,-454.599,1333.679,250.0707,148,13,250,1333.679,1.645084
  317,1233.73,-512.6154,1335.989,112.5629,358,9,115,1334.78,-56.80995
  318,-564.4207,1213.451,1338.295,335.0551,295,24,335,1338.294,1.287749
  319,-404.1823,-1278.218,1340.598,197.5474,463,6,200,1339.37,-57.36894
  320,1163.448,670.6461,1342.899,60.03958,484,28,60,1342.899,0.9277034
  321,-1313.149,291.8832,1345.198,282.5318,169,16,285,1343.949,-57.9306
  322,772.4271,-1104.126,1347.493,145.024,1,1,145,1347.493,0.565292
  323,176.5623,1338.188,1349.786,7.516266,106,25,10,1348.517,-58.49402
  324,-1035.879,-868.9439,1352.076,230.0085,1,11,230,1352.076,0.2004181
  325,1353.073,-59.09351,1354.363,92.50073,295,18,95,1353.075,-59.05986
  326,-959.4127,959.1766,1356.647,314.993,463,22,315,1356.647,-0.1669366
  327,59.62694,-1357.621,1358.93,177.4852,379,4,175,1357.652,58.92442
  328,874.5567,1043.091,1361.209,39.97742,127,26,40,1361.209,-0.5370328
  329,-1351.726,-178.6871,1363.485,262.4696,1,14,260,1362.219,58.75245
  330,1119.286,-782.6226,1365.76,124.9619,64,8,125,1365.759,-0.9093955
  331,-297.1664,1335.366,1368.031,347.4541,379,24,345,1366.776,58.57738
  332,-684.0377,-1187.356,1370.3,209.9463,274,7,210,1370.299,-1.283837
  333,1308.596,414.1425,1372.566,72.43854,148,29,70,1371.323,58.39951
  334,-1246.72,579.5223,1374.83,294.9308,442,20,295,1374.829,-1.661347
  335,528.6995,-1271.557,1377.091,157.423,295,2,155,1375.86,58.21866
  336,469.8471,1296.862,1379.35,19.91522,274,25,20,1379.349,-2.040989
  337,-1224.468,-639.9334,1381.606,242.4074,337,12,240,1380.387,58.03514
  338,1337.331,-355.8282,1383.86,104.8997,484,17,105,1383.858,-2.423387
  339,-746.9609,1167.627,1386.111,327.3919,190,23,325,1384.903,57.84872
  340,-238.3206,-1367.752,1388.359,189.8841,169,5,190,1388.357,-2.807574
  341,1101.412,848.9258,1390.606,52.37637,316,27,50,1389.41,57.65935
  342,-1387.824,118.212,1392.849,274.8686,337,15,275,1392.845,-3.19483
  343,945.0054,-1026.276,1395.09,137.3608,232,0,135,1393.906,57.46667
  344,-3.584022,1397.325,1397.329,359.853,484,24,0,1397.325,-3.583961
  345,-942.7427,-1034.418,1399.566,222.3453,190,10,220,1398.393,57.27206
  346,1396.113,126.1351,1401.8,84.83749,148,19,85,1401.794,-3.975842
  347,-1116.428,851.406,1404.031,307.3297,232,21,305,1402.871,57.07417
  348,248.497,-1384.13,1406.26,169.822,85,3,170,1406.253,-4.37009
  349,752.9231,1190.354,1408.487,32.31418,379,25,30,1407.339,56.87347
  350,-1361.401,-369.7211,1410.711,254.8064,169,13,255,1410.703,-4.766564
  351,1255.573,-648.0114,1412.933,117.2986,379,9,115,1411.797,56.66949
  352,-488.8617,1328.034,1415.153,339.7909,274,24,340,1415.144,-5.165501
  353,-537.4429,-1311.524,1417.37,202.2831,484,6,200,1416.246,56.46367
  354,1284.219,604.9836,1419.586,64.77533,1,28,65,1419.575,-5.56681
  355,-1357.717,422.0381,1421.799,287.2675,190,16,285,1420.685,56.2544
  356,717.1688,-1230.232,1424.009,149.7598,22,1,150,1423.996,-5.970585
  357,302.6601,1393.734,1426.218,12.25201,85,25,10,1425.116,56.04262
  358,-1166.427,-824.5251,1428.423,234.7442,22,11,235,1428.409,-6.376638
  359,1419.231,-180.208,1430.627,97.23645,316,18,95,1429.537,55.82772
  360,-926.1916,1093.236,1432.828,319.7287,484,22,320,1432.812,-6.785057
  361,-55.6108,-1433.949,1435.027,182.2209,400,4,180,1433.949,55.61081
  362,1011.17,1021.347,1437.224,44.71313,148,26,45,1437.206,-7.195882
  363,-1437.707,-70.18075,1439.419,267.2054,22,14,265,1438.353,55.39083
  364,1109.214,-920.8083,1441.611,129.6976,85,8,130,1441.591,-7.609126
  365,-196.2006,1430.409,1443.802,352.1898,400,24,350,1442.748,55.16797
  366,-822.7997,-1189.07,1445.99,214.682,295,7,215,1445.968,-8.024123
  367,1412.043,321.4753,1448.176,77.17426,169,29,75,1447.133,54.94248
  368,-1260.248,717.8564,1450.359,299.6665,463,20,300,1450.335,-8.442138
  369,445.0311,-1382.687,1452.541,162.1587,316,2,160,1451.51,54.71423
  370,606.7482,1322.145,1454.72,24.65094,295,25,25,1454.693,-8.862089
  371,-1342.5,-565.9022,1456.898,247.1432,358,12,245,1455.879,54.48331
  372,1374.228,-490.2977,1459.073,109.6354,1,17,110,1459.044,-9.284765
  373,-683.1378,1291.729,1461.246,332.1276,211,23,330,1460.239,54.24977
  374,-369.3736,-1416.034,1463.417,194.6199,190,5,195,1463.385,-9.709017
  375,1230.703,795.8091,1465.586,57.11209,337,27,55,1464.59,54.01363
  376,-1447.18,244.8843,1467.753,279.6043,358,15,280,1467.718,-10.13634
  377,903.0183,-1159.834,1469.917,142.0966,253,0,140,1468.933,53.77463
  378,117.7717,1467.361,1472.08,4.588776,463,24,5,1472.042,-10.56552
  379,-1079.612,-1003.904,1474.24,227.081,211,10,225,1473.268,53.53291
  380,1476.358,10.99697,1476.399,89.57324,169,19,90,1476.358,-10.99697
  381,-1097.65,990.6015,1478.556,312.0655,253,21,310,1477.595,53.28892
  382,140.4358,-1474.035,1480.71,174.5577,106,3,175,1480.666,-11.43081
  383,893.4402,1183.489,1482.862,37.04993,358,25,35,1481.913,53.04216
  384,-1460.345,-269.5481,1485.013,259.5421,190,13,260,1484.965,-11.86683
  385,1260.711,-788.8317,1487.161,122.0344,400,9,120,1486.224,52.79235
  386,-397.334,1435.327,1489.307,344.5266,253,24,345,1489.257,-12.30527
  387,-677.5416,-1328.671,1491.452,207.0188,1,6,205,1490.526,52.54072
  388,1399.109,522.798,1493.594,69.51105,22,28,70,1493.54,-12.74595
  389,-1386.789,560.3914,1495.735,292.0033,211,16,290,1494.821,52.28567
  390,644.9573,-1351.908,1497.873,154.4955,43,1,155,1497.815,-13.18904
  391,438.2532,1434.561,1500.01,16.98773,64,25,15,1499.107,52.02847
  392,-1294.025,-762.8488,1502.145,239.4799,43,11,240,1502.083,-13.63405
  393,1471.557,-312.0424,1504.277,101.9722,337,18,100,1503.386,51.76826
  394,-875.5372,1225.847,1506.408,324.4644,1,22,325,1506.342,-14.08133
  395,-182.7112,-1497.431,1508.537,186.9566,421,4,185,1507.657,51.50625
  396,1147.842,982.1224,1510.664,49.44885,169,26,50,1510.594,-14.53097
  397,-1511.921,51.24118,1512.789,271.9411,43,14,270,1511.921,51.24131
  398,1081.747,-1060.558,1514.912,134.4333,-1,None,135,1514.838,-14.98312
  399,-81.36388,1514.849,1517.033,356.9255,421,24,355,1516.176,50.97359
  400,-964.6166,-1173.601,1519.153,219.4178,316,7,220,1519.074,-15.43685
  401,1506.131,214.0859,1521.27,81.91,190,29,80,1520.425,50.70343
  402,-1256.933,860.7116,1523.386,304.4022,484,20,305,1523.303,-15.89333
  403,345.9002,-1485.766,1525.5,166.8945,337,2,165,1524.666,50.43068
  404,749.601,1331.051,1527.612,29.38669,316,25,30,1527.524,-16.35175
  405,-1453.85,-475.7836,1529.722,251.8789,379,12,250,1528.899,50.15548
  406,1395.331,-632.1031,1531.83,114.3712,22,17,115,1531.738,-16.81276
  407,-602.7222,1410.563,1533.937,336.8634,232,23,335,1533.125,49.87778
  408,-509.0902,-1449.224,1536.041,199.3556,211,5,200,1535.944,-17.27527
  409,1356.178,725.7195,1538.144,61.84781,358,27,60,1537.344,49.59736
  410,-1492.256,381.4822,1540.245,284.3401,379,15,285,1540.143,-17.7408
  411,843.8039,-1291.054,1542.344,146.8323,274,0,145,1541.556,49.31452
  412,250.2396,1524.035,1544.442,9.324524,442,24,10,1544.335,-18.20806
  413,-1215.637,-956.037,1546.538,231.8167,232,10,230,1545.761,49.0293
  414,1544.255,-116.3559,1548.632,94.30896,190,19,95,1548.519,-18.67795
  415,-1061.52,1130.451,1550.724,316.8012,-1,None,315,1549.958,48.74151
  416,19.14921,-1552.697,1552.815,179.2934,127,3,180,1552.697,-19.14919
  417,1036.103,1159.403,1554.904,41.78564,337,25,40,1554.149,48.45119
  418,-1549.232,-155.2383,1556.99,264.2779,211,13,265,1556.867,-19.62299
  419,1248.888,-933.2715,1559.076,126.7701,421,9,125,1558.332,48.15819`;
  return baseData;
}

function loadPathData()
{
  var pathData = `PathId,Host,Universe,ChannelStart,Fixture0,Fixture1,DistanceFt
  0,192.168.0.220,1,1,0,24,8.293639
  0,192.168.0.220,1,1,24,37,10.16438
  0,192.168.0.220,1,1,37,71,15.2425
  0,192.168.0.220,1,1,71,105,12.42615
  0,192.168.0.220,1,1,105,139,11.29084
  0,192.168.0.220,1,1,139,173,10.8107
  0,192.168.0.220,1,1,173,207,10.66186
  0,192.168.0.220,1,1,207,241,10.70332
  0,192.168.0.220,1,1,241,275,10.85561
  0,192.168.0.220,1,1,275,309,11.08317
  0,192.168.0.220,1,1,309,343,11.35884
  0,192.168.0.220,1,1,343,377,11.66686
  0,192.168.0.220,1,1,377,411,11.99686
  1,192.168.0.220,2,295,19,29,11.20771
  1,192.168.0.220,2,295,29,50,11.75033
  1,192.168.0.220,2,295,50,84,13.82083
  1,192.168.0.220,2,295,84,118,11.87728
  1,192.168.0.220,2,295,118,152,11.05475
  1,192.168.0.220,2,295,152,186,10.72471
  1,192.168.0.220,2,295,186,220,10.65789
  1,192.168.0.220,2,295,220,254,10.75373
  1,192.168.0.220,2,295,254,288,10.93561
  1,192.168.0.220,2,295,288,322,11.18391
  1,192.168.0.220,2,295,322,356,11.47344
  1,192.168.0.220,2,295,356,390,11.79086
  2,192.168.0.220,3,64,18,21,6.611465
  2,192.168.0.220,3,64,21,42,12.88416
  2,192.168.0.220,3,64,42,63,10.80534
  2,192.168.0.220,3,64,63,97,12.86592
  2,192.168.0.220,3,64,97,131,11.47985
  2,192.168.0.220,3,64,131,165,10.88614
  2,192.168.0.220,3,64,165,199,10.67621
  2,192.168.0.220,3,64,199,233,10.67775
  2,192.168.0.220,3,64,233,267,10.81599
  2,192.168.0.220,3,64,267,301,11.02454
  2,192.168.0.220,3,64,301,335,11.2906
  2,192.168.0.220,3,64,335,369,11.59209
  2,192.168.0.220,3,64,369,403,11.91764
  3,192.168.0.220,4,358,17,34,13.74908
  3,192.168.0.220,4,358,34,55,11.29311
  3,192.168.0.220,4,358,55,76,10.40788
  3,192.168.0.220,4,358,76,110,12.19356
  3,192.168.0.220,4,358,110,144,11.19095
  3,192.168.0.220,4,358,144,178,10.77266
  3,192.168.0.220,4,358,178,212,10.65811
  3,192.168.0.220,4,358,212,246,10.72011
  3,192.168.0.220,4,358,246,280,10.88523
  3,192.168.0.220,4,358,280,314,11.12114
  3,192.168.0.220,4,358,314,348,11.40242
  3,192.168.0.220,4,358,348,382,11.7142
  3,192.168.0.220,4,358,382,416,12.0468
  4,192.168.0.220,5,148,16,26,9.244439
  4,192.168.0.220,5,148,26,47,12.10481
  4,192.168.0.220,5,148,47,68,10.60712
  4,192.168.0.220,5,148,68,89,10.29393
  4,192.168.0.220,5,148,89,123,11.7098
  4,192.168.0.220,5,148,123,157,10.98196
  4,192.168.0.220,5,148,157,191,10.70206
  4,192.168.0.220,5,148,191,225,10.66312
  4,192.168.0.220,5,148,225,259,10.77616
  4,192.168.0.220,5,148,259,293,10.96883
  4,192.168.0.220,5,148,293,327,11.22429
  4,192.168.0.220,5,148,327,361,11.51863
  4,192.168.0.220,5,148,361,395,11.83932
  5,192.168.0.221,1,442,15,39,16.30849
  5,192.168.0.221,1,442,39,60,10.96015
  5,192.168.0.221,1,442,60,81,10.33857
  5,192.168.0.221,1,442,81,102,10.34265
  5,192.168.0.221,1,442,102,136,11.35738
  5,192.168.0.221,1,442,136,170,10.83679
  5,192.168.0.221,1,442,170,204,10.66599
  5,192.168.0.221,1,442,204,238,10.6944
  5,192.168.0.221,1,442,238,272,10.83859
  5,192.168.0.221,1,442,272,306,11.06086
  5,192.168.0.221,1,442,306,340,11.33304
  5,192.168.0.221,1,442,340,374,11.63867
  5,192.168.0.221,1,442,374,408,11.96705
  6,192.168.0.221,2,232,14,31,12.01183
  6,192.168.0.221,2,232,31,52,11.54969
  6,192.168.0.221,2,232,52,73,10.46821
  6,192.168.0.221,2,232,73,94,10.29767
  6,192.168.0.221,2,232,94,115,10.49151
  6,192.168.0.221,2,232,115,149,11.10253
  6,192.168.0.221,2,232,149,183,10.74093
  6,192.168.0.221,2,232,183,217,10.6563
  6,192.168.0.221,2,232,217,251,10.74123
  6,192.168.0.221,2,232,251,285,10.9163
  6,192.168.0.221,2,232,285,319,11.16009
  6,192.168.0.221,2,232,319,353,11.44663
  6,192.168.0.221,2,232,353,387,11.762
  7,192.168.0.221,3,22,13,23,7.175389
  7,192.168.0.221,3,22,23,44,12.53896
  7,192.168.0.221,3,22,44,65,10.71794
  7,192.168.0.221,3,22,65,86,10.30268
  7,192.168.0.221,3,22,86,107,10.39026
  7,192.168.0.221,3,22,107,128,10.70097
  7,192.168.0.221,3,22,128,162,10.91952
  7,192.168.0.221,3,22,162,196,10.68448
  7,192.168.0.221,3,22,196,230,10.6714
  7,192.168.0.221,3,22,230,264,10.80051
  7,192.168.0.221,3,22,264,298,11.0033
  7,192.168.0.221,3,22,298,332,11.2655
  7,192.168.0.221,3,22,332,366,11.56438
  7,192.168.0.221,3,22,366,400,11.88817
  8,192.168.0.221,4,337,1,32,13.28094
  8,192.168.0.221,4,337,32,45,10.21751
  8,192.168.0.221,4,337,45,58,10.74092
  8,192.168.0.221,4,337,58,92,13.19269
  8,192.168.0.221,4,337,92,126,11.61825
  8,192.168.0.221,4,337,126,160,10.94344
  8,192.168.0.221,4,337,160,194,10.69093
  8,192.168.0.221,4,337,194,228,10.66773
  8,192.168.0.221,4,337,228,262,10.79054
  8,192.168.0.221,4,337,262,296,10.98937
  8,192.168.0.221,4,337,296,330,11.24891
  8,192.168.0.221,4,337,330,364,11.54602
  9,192.168.0.222,1,106,2,27,14.00118
  9,192.168.0.222,1,106,27,40,10.14424
  9,192.168.0.222,1,106,40,53,10.50248
  9,192.168.0.222,1,106,53,66,11.17512
  9,192.168.0.222,1,106,66,79,11.94302
  9,192.168.0.222,1,106,79,113,12.06755
  9,192.168.0.222,1,106,113,147,11.13655
  9,192.168.0.222,1,106,147,181,10.75289
  9,192.168.0.222,1,106,181,215,10.65767
  9,192.168.0.222,1,106,215,249,10.73127
  9,192.168.0.222,1,106,249,283,10.9037
  9,192.168.0.222,1,106,283,317,11.1444
  9,192.168.0.222,1,106,317,351,11.42886
  9,192.168.0.222,1,106,351,385,11.74283
  9,192.168.0.222,1,106,385,419,12.07691
  10,192.168.0.222,2,442,12,36,14.77026
  10,192.168.0.222,2,442,36,57,11.14726
  10,192.168.0.222,2,442,57,78,10.37564
  10,192.168.0.222,2,442,78,99,10.32084
  10,192.168.0.222,2,442,99,120,10.56518
  10,192.168.0.222,2,442,120,141,10.95342
  10,192.168.0.222,2,442,141,175,10.79469
  10,192.168.0.222,2,442,175,209,10.65991
  10,192.168.0.222,2,442,209,243,10.70975
  10,192.168.0.222,2,442,243,277,10.86728
  10,192.168.0.222,2,442,277,311,11.09824
  10,192.168.0.222,2,442,311,345,11.37619
  10,192.168.0.222,2,442,345,379,11.68574
  10,192.168.0.222,2,442,379,413,12.0168
  11,192.168.0.222,3,253,11,28,10.21256
  11,192.168.0.222,3,253,28,49,11.8608
  11,192.168.0.222,3,253,49,70,10.54523
  11,192.168.0.222,3,253,70,91,10.29286
  11,192.168.0.222,3,253,91,112,10.45068
  11,192.168.0.222,3,253,112,133,10.79299
  11,192.168.0.222,3,253,133,154,11.23164
  11,192.168.0.222,3,253,154,188,10.715
  11,192.168.0.222,3,253,188,222,10.6596
  11,192.168.0.222,3,253,222,256,10.76247
  11,192.168.0.222,3,253,256,290,10.94874
  11,192.168.0.222,3,253,290,324,11.19996
  11,192.168.0.222,3,253,324,358,11.49146
  11,192.168.0.222,3,253,358,392,11.8102
  12,192.168.0.222,4,64,10,20,4.972544
  12,192.168.0.222,4,64,20,41,13.07697
  12,192.168.0.222,4,64,41,62,10.85354
  12,192.168.0.222,4,64,62,83,10.32096
  12,192.168.0.222,4,64,83,104,10.36011
  12,192.168.0.222,4,64,104,125,10.64804
  12,192.168.0.222,4,64,125,146,11.05788
  12,192.168.0.222,4,64,146,167,11.52715
  12,192.168.0.222,4,64,167,201,10.67161
  12,192.168.0.222,4,64,201,235,10.68251
  12,192.168.0.222,4,64,235,269,10.82664
  12,192.168.0.222,4,64,269,303,11.03895
  12,192.168.0.222,4,64,303,337,11.30749
  12,192.168.0.222,4,64,337,371,11.61065
  12,192.168.0.222,4,64,371,405,11.93737
  13,192.168.0.223,1,400,9,33,13.19774
  13,192.168.0.223,1,400,33,54,11.37332
  13,192.168.0.223,1,400,54,75,10.42627
  13,192.168.0.223,1,400,75,96,10.30481
  13,192.168.0.223,1,400,96,117,10.52057
  13,192.168.0.223,1,400,117,138,10.89084
  13,192.168.0.223,1,400,138,159,11.34364
  13,192.168.0.223,1,400,159,180,11.83383
  13,192.168.0.223,1,400,180,214,10.65767
  13,192.168.0.223,1,400,214,248,10.72746
  13,192.168.0.223,1,400,248,282,10.89748
  13,192.168.0.223,1,400,282,316,11.13662
  13,192.168.0.223,1,400,316,350,11.42001
  13,192.168.0.223,1,400,350,384,11.73327
  13,192.168.0.223,1,400,384,418,12.06686
  14,192.168.0.223,2,232,8,25,8.34381
  14,192.168.0.223,2,232,25,46,12.23966
  14,192.168.0.223,2,232,46,67,10.64154
  14,192.168.0.223,2,232,67,88,10.29585
  14,192.168.0.223,2,232,88,109,10.41281
  14,192.168.0.223,2,232,109,130,10.73745
  14,192.168.0.223,2,232,130,151,11.16562
  14,192.168.0.223,2,232,151,172,11.64405
  14,192.168.0.223,2,232,172,193,12.14748
  14,192.168.0.223,2,232,193,227,10.66608
  14,192.168.0.223,2,232,227,261,10.78568
  14,192.168.0.223,2,232,261,295,10.98246
  14,192.168.0.223,2,232,295,329,11.24068
  14,192.168.0.223,2,232,329,363,11.53687
  14,192.168.0.223,2,232,363,397,11.85882
  15,192.168.0.223,3,64,7,38,16.10837
  15,192.168.0.223,3,64,38,59,11.01861
  15,192.168.0.223,3,64,59,80,10.34955
  15,192.168.0.223,3,64,80,101,10.33477
  15,192.168.0.223,3,64,101,122,10.59747
  15,192.168.0.223,3,64,122,143,10.99478
  15,192.168.0.223,3,64,143,164,11.45778
  15,192.168.0.223,3,64,164,185,11.95383
  15,192.168.0.223,3,64,185,206,12.46516
  15,192.168.0.223,3,64,206,240,10.70023
  15,192.168.0.223,3,64,240,274,10.84989
  15,192.168.0.223,3,64,274,308,11.07569
  15,192.168.0.223,3,64,308,342,11.35022
  15,192.168.0.223,3,64,342,376,11.65744
  15,192.168.0.223,3,64,376,410,11.98691
  16,192.168.0.223,4,400,6,30,11.58989
  16,192.168.0.223,4,400,30,51,11.64676
  16,192.168.0.223,4,400,51,72,10.49191
  16,192.168.0.223,4,400,72,93,10.29525
  16,192.168.0.223,4,400,93,114,10.47751
  16,192.168.0.223,4,400,114,135,10.83158
  16,192.168.0.223,4,400,135,156,11.27615
  16,192.168.0.223,4,400,156,177,11.76231
  16,192.168.0.223,4,400,177,198,12.26932
  16,192.168.0.223,4,400,198,219,12.78738
  16,192.168.0.223,4,400,219,253,10.74949
  16,192.168.0.223,4,400,253,287,10.9291
  16,192.168.0.223,4,400,287,321,11.17594
  16,192.168.0.223,4,400,321,355,11.46449
  16,192.168.0.223,4,400,355,389,11.78123
  17,192.168.0.224,1,232,3,48,21.75757
  17,192.168.0.224,1,232,48,61,10.89775
  17,192.168.0.224,1,232,61,74,11.6431
  17,192.168.0.224,1,232,74,87,12.42906
  17,192.168.0.224,1,232,87,100,13.21766
  17,192.168.0.224,1,232,100,134,11.40458
  17,192.168.0.224,1,232,134,168,10.85561
  17,192.168.0.224,1,232,168,202,10.66956
  17,192.168.0.224,1,232,202,236,10.68897
  17,192.168.0.224,1,232,236,270,10.82758
  17,192.168.0.224,1,232,270,304,11.0462
  17,192.168.0.224,1,232,304,338,11.31597
  17,192.168.0.224,1,232,338,372,11.61998
  17,192.168.0.224,1,232,372,406,11.94725
  18,192.168.0.224,2,43,4,35,14.70256
  18,192.168.0.224,2,43,35,69,15.52383
  18,192.168.0.224,2,43,69,82,12.12488
  18,192.168.0.224,2,43,82,95,12.91542
  18,192.168.0.224,2,43,95,108,13.6967
  18,192.168.0.224,2,43,108,121,14.46101
  18,192.168.0.224,2,43,121,155,11.00948
  18,192.168.0.224,2,43,155,189,10.71048
  18,192.168.0.224,2,43,189,223,10.66065
  18,192.168.0.224,2,43,223,257,10.76695
  18,192.168.0.224,2,43,257,291,10.95539
  18,192.168.0.224,2,43,291,325,11.20804
  18,192.168.0.224,2,43,325,359,11.50048
  18,192.168.0.224,2,43,359,393,11.81989
  19,192.168.0.224,3,358,5,22,6.404947
  19,192.168.0.224,3,358,22,43,12.70527
  19,192.168.0.224,3,358,43,56,10.64179
  19,192.168.0.224,3,358,56,90,13.33634
  19,192.168.0.224,3,358,90,103,13.39803
  19,192.168.0.224,3,358,103,116,14.16792
  19,192.168.0.224,3,358,116,129,14.92155
  19,192.168.0.224,3,358,129,142,15.64912
  19,192.168.0.224,3,358,142,176,10.78708
  19,192.168.0.224,3,358,176,210,10.65917
  19,192.168.0.224,3,358,210,244,10.71311
  19,192.168.0.224,3,358,244,278,10.8732
  19,192.168.0.224,3,358,278,312,11.10583
  19,192.168.0.224,3,358,312,346,11.3849
  19,192.168.0.224,3,358,346,380,11.69522
  19,192.168.0.224,3,358,380,414,12.02678
  20,192.168.0.224,4,211,64,85,10.30766
  20,192.168.0.224,4,211,85,106,10.37971
  20,192.168.0.224,4,211,106,127,10.68307
  20,192.168.0.224,4,211,127,148,11.10061
  20,192.168.0.224,4,211,148,169,11.57373
  20,192.168.0.224,4,211,169,190,12.07466
  20,192.168.0.224,4,211,190,211,12.58798
  20,192.168.0.224,4,211,211,232,13.10778
  20,192.168.0.224,4,211,232,266,10.81076
  20,192.168.0.224,4,211,266,300,11.01742
  20,192.168.0.224,4,211,300,334,11.2822
  20,192.168.0.224,4,211,334,368,11.58283
  20,192.168.0.224,4,211,368,402,11.9078
  21,192.168.0.225,1,1,77,98,10.31482
  21,192.168.0.225,1,1,98,119,10.55099
  21,192.168.0.225,1,1,119,140,10.93123
  21,192.168.0.225,1,1,140,161,11.38905
  21,192.168.0.225,1,1,161,182,11.88172
  21,192.168.0.225,1,1,182,203,12.39162
  21,192.168.0.225,1,1,203,224,12.9106
  21,192.168.0.225,1,1,224,245,13.41964
  21,192.168.0.225,1,1,245,279,10.87919
  21,192.168.0.225,1,1,279,313,11.11348
  21,192.168.0.225,1,1,313,347,11.39365
  21,192.168.0.225,1,1,347,381,11.7047
  22,192.168.0.225,2,274,111,132,10.774
  22,192.168.0.225,2,274,132,153,11.20952
  22,192.168.0.225,2,274,153,174,11.6912
  22,192.168.0.225,2,274,174,195,12.19615
  22,192.168.0.225,2,274,195,216,12.711
  22,192.168.0.225,2,274,216,237,13.22565
  22,192.168.0.225,2,274,237,258,13.74379
  22,192.168.0.225,2,274,258,292,10.96208
  22,192.168.0.225,2,274,292,326,11.21614
  22,192.168.0.225,2,274,326,360,11.50956
  22,192.168.0.225,2,274,360,394,11.82961
  23,192.168.0.225,3,22,145,166,11.50396
  23,192.168.0.225,3,22,166,187,12.00207
  23,192.168.0.225,3,22,187,208,12.51426
  23,192.168.0.225,3,22,208,229,13.03385
  23,192.168.0.225,3,22,229,250,13.54233
  23,192.168.0.225,3,22,250,271,14.06092
  23,192.168.0.225,3,22,271,305,11.05351
  23,192.168.0.225,3,22,305,339,11.3245
  23,192.168.0.225,3,22,339,373,11.62931
  23,192.168.0.225,3,22,373,407,11.95714
  24,192.168.0.225,4,253,386,352,11.7524
  24,192.168.0.225,4,253,352,318,11.43774
  24,192.168.0.225,4,253,318,284,11.15223
  24,192.168.0.225,4,253,284,263,14.37607
  24,192.168.0.225,4,253,263,297,10.99632
  24,192.168.0.225,4,253,297,331,11.25718
  24,192.168.0.225,4,253,331,365,11.55519
  24,192.168.0.225,4,253,365,399,11.87835
  24,192.168.0.225,4,253,399,412,27.64421
  24,192.168.0.225,4,253,412,378,12.00682
  24,192.168.0.225,4,253,378,344,11.67629
  24,192.168.0.225,4,253,344,310,11.3675
  24,192.168.0.225,4,253,310,276,11.09068
  24,192.168.0.225,4,253,276,242,10.86143
  25,192.168.0.226,1,64,391,357,11.80052
  25,192.168.0.226,1,64,357,323,11.48246
  25,192.168.0.226,1,64,323,289,11.19191
  25,192.168.0.226,1,64,289,255,10.94215
  25,192.168.0.226,1,64,255,221,10.75806
  25,192.168.0.226,1,64,221,200,12.83666
  25,192.168.0.226,1,64,200,234,10.68006
  25,192.168.0.226,1,64,234,268,10.82128
  25,192.168.0.226,1,64,268,302,11.03173
  25,192.168.0.226,1,64,302,336,11.29903
  25,192.168.0.226,1,64,336,370,11.60135
  25,192.168.0.226,1,64,370,404,11.9275
  25,192.168.0.226,1,64,404,417,27.83213
  25,192.168.0.226,1,64,417,383,12.05683
  25,192.168.0.226,1,64,383,349,11.72372
  25,192.168.0.226,1,64,349,315,11.41122
  25,192.168.0.226,1,64,315,281,11.12885
  25,192.168.0.226,1,64,281,247,10.89134
  25,192.168.0.226,1,64,247,213,10.72373
  25,192.168.0.226,1,64,213,179,10.65783
  26,192.168.0.226,2,1,124,158,10.96876
  26,192.168.0.226,2,1,158,192,10.69815
  26,192.168.0.226,2,1,192,226,10.66454
  26,192.168.0.226,2,1,226,260,10.78087
  26,192.168.0.226,2,1,260,294,10.97564
  26,192.168.0.226,2,1,294,328,11.23245
  26,192.168.0.226,2,1,328,362,11.52775
  26,192.168.0.226,2,1,362,396,11.84907
  27,192.168.0.226,3,190,137,171,10.82779
  27,192.168.0.226,3,190,171,205,10.66446
  27,192.168.0.226,3,190,205,239,10.69727
  27,192.168.0.226,3,190,239,273,10.8442
  27,192.168.0.226,3,190,273,307,11.06826
  27,192.168.0.226,3,190,307,341,11.34162
  27,192.168.0.226,3,190,341,375,11.64803
  27,192.168.0.226,3,190,375,409,11.97696
  28,192.168.0.226,4,379,150,184,10.7353
  28,192.168.0.226,4,379,184,218,10.65669
  28,192.168.0.226,4,379,218,252,10.74533
  28,192.168.0.226,4,379,252,286,10.92267
  28,192.168.0.226,4,379,286,320,11.16799
  28,192.168.0.226,4,379,320,354,11.45556
  28,192.168.0.226,4,379,354,388,11.77159
  29,192.168.0.227,1,43,163,197,10.68155
  29,192.168.0.227,1,43,197,231,10.6734
  29,192.168.0.227,1,43,231,265,10.80559
  29,192.168.0.227,1,43,265,299,11.01034
  29,192.168.0.227,1,43,299,333,11.27382
  29,192.168.0.227,1,43,333,367,11.57361
  29,192.168.0.227,1,43,367,401,11.89797`;
  return pathData;
}

async function importCSV() {

  const nodes: SceneNode[] = [];
  const lines: SceneNode[] = [];
  const portals: SceneNode[] = [];
  const booths: SceneNode[] = [];
  const pageNode = figma.currentPage;

  // make sure we are on the right page
  if (pageNode.name != "Assets")
  {
    console.error(`need to be on the Assets page to run`);
    return;
  }

  // import the CSV data
  buildMaps();
  
  console.log(`finding node 'Wiring Plan'`);
  const planNode = pageNode.findOne(node => node.type === "FRAME" && node.name === "Base Layout") as FrameNode;
  if (planNode == null)
  {
    console.log(`planNode is null !`);
    return;
  }

  console.log(`finding node 'Map'`);
  const mapNode = planNode.findOne(node => node.type === "FRAME" && node.name === "Map") as FrameNode;

  if (mapNode == null)
  {
    console.log(`mapNode is null !`);
    return;
  }

  // first get rid of old lights & wiring path data
  console.log(`finding and deleting node 'Lights'`);
  const lightsGroup = mapNode.findOne(node => node.type === "GROUP" && node.name === "Lights") as FrameNode;
  if (lightsGroup != null)
  {
    lightsGroup.remove();
  }

  console.log(`finding and deleting node 'Wiring Paths'`);
  const pathsGroup = mapNode.findOne(node => node.type === "GROUP" && node.name === "Wiring Paths") as FrameNode;
  if (pathsGroup != null)
  {
    pathsGroup.remove();
  }

  console.log(`finding and deleting node 'Portals'`);
  const portalsGroup = mapNode.findOne(node => node.type === "GROUP" && node.name === "Portals") as FrameNode;
  if (portalsGroup != null)
  {
    portalsGroup.remove();
  }

  console.log(`finding and deleting node 'Booths'`);
  const boothsGroup = mapNode.findOne(node => node.type === "GROUP" && node.name === "Booths") as FrameNode;
  if (boothsGroup != null)
  {
    boothsGroup.remove();
  }

  // now we draw the wiring path lines

  var testLoopMax = 500;
  for (let path of pathList) {

    var cols = path.split(",");
    console.log(`path = ${path} cols.length = ${cols.length}`);

    const line = figma.createLine();
    var startNodeId = cols[4];
    var endNodeId = cols[5];

    console.log(`startNodeId = ${startNodeId} endNodeId = ${endNodeId}`);

    console.log(`(lightBaseMap.get(startNodeId) = ${lightBaseMap.get(startNodeId)} lightBaseMap.get(endNodeId) = ${lightBaseMap.get(endNodeId)}`);

    var startX = parseFloat(lightBaseMap.get(startNodeId)[1]);
    var startZ = -parseFloat(lightBaseMap.get(startNodeId)[2]);
    var endX = parseFloat(lightBaseMap.get(endNodeId)[1]);
    var endZ = -parseFloat(lightBaseMap.get(endNodeId)[2]);

    console.log(`processing path from node ${cols[4]} to ${cols[5]}`);

    var length = Math.sqrt((endX - startX)*(endX - startX) + (endZ - startZ)*(endZ - startZ));
    var rot = -Math.atan2(endZ - startZ, endX - startX) * 180 / Math.PI;

    line.resize(length,0);
    line.x = startX;
    line.y = startZ;
    line.rotation = rot;

    // add the length of the line
    var lineLength = figma.createText();
    lineLength.fontSize = 8;
    lineLength.characters = parseFloat(cols[6]).toFixed(2) + " (ft)";
    lineLength.x = ((startX + endX) / 2) + 10;
    lineLength.y = (startZ + endZ) / 2;

    // for now just put node in the main page; group later
    pageNode.appendChild(lineLength);
    lines.push(lineLength);

    // for now just put node in the main page; group later
    pageNode.appendChild(line);
    lines.push(line);

    testLoopMax -=1;
    if (testLoopMax == 0)
      break;
  }

  console.log(`done processing paths`);

  // and now we group the new lines together
  figma.currentPage.selection = lines;
  figma.viewport.scrollAndZoomIntoView(lines);
  console.log(`figma.group()`);
  const newLines = figma.group(lines,mapNode);
  newLines.name = "Wiring Paths";

  // now add new lights and group together
  console.log(`finding node 'Light Base'`);
  const base = pageNode.findOne(node => node.type === "COMPONENT" && node.name === "Light Base") as ComponentNode;
  var testLoopMax = 500;
  for (let key of lightBaseMap.keys()) {
    const light = base.createInstance();
    console.log(`processing lightbase ${key}`);
    console.log(`    ${lightBaseMap.get(key)}`);
    console.log(`    ${lightBaseMap.get(key)[1]}`);
    console.log(`    ${lightBaseMap.get(key)[2]}`);

    light.x = parseFloat(lightBaseMap.get(key)[1]);
    light.y = -parseFloat(lightBaseMap.get(key)[2]);  // need to invert y because in unity, y axis runs bottom-to-top, and in figma, it runs top-to-bottom
    const id = light.findOne(node => node.type === "TEXT" && node.name === "#ID") as TextNode;
    id.characters = key;

    const univ = light.findOne(node => node.type === "TEXT" && node.name === "#Universe") as TextNode;
    univ.characters = `P${lightBaseMap.get(key)[6]}`;

    var chanStart = parseInt(lightBaseMap.get(key)[5]);
    var chanEnd = chanStart+20;

    const range = light.findOne(node => node.type === "TEXT" && node.name === "#Range") as TextNode;
    range.characters = `${chanStart}-${chanEnd}`;


    const angle = light.findOne(node => node.type === "TEXT" && node.name === "#A") as TextNode;
    angle.characters = `A=${parseFloat(lightBaseMap.get(key)[7]).toFixed(1)}°`;

    const radius1 = light.findOne(node => node.type === "TEXT" && node.name === "#R1") as TextNode;
    var R1I = Math.round(lightBaseMap.get(key)[8]);
    var R1F = Math.floor(R1I/12);
    R1I = R1I - (R1F*12);
    radius1.characters = `R1=${R1F}'-${R1I}"`;

    const radius2 = light.findOne(node => node.type === "TEXT" && node.name === "#R2") as TextNode;
    var R2I = Math.round(lightBaseMap.get(key)[9]);
    radius2.characters = `R2=${R2I}"`;

    light.name = `Light ${key}`;

    // for now just put light in the main page; group later
    pageNode.appendChild(light);
    nodes.push(light);

    testLoopMax -=1;
    if (testLoopMax == 0)
      break;
  }

  console.log(`done adding lights`);

  // and now we group the new lights together
  figma.currentPage.selection = nodes;
  figma.viewport.scrollAndZoomIntoView(nodes);
  const newLights = figma.group(nodes,mapNode);
  newLights.name = "Lights";

  // now we add the portals
  console.log(`finding node 'Portal Base'`);
  const portalBase = pageNode.findOne(node => node.type === "COMPONENT" && node.name === "Portal Base") as ComponentNode;
  for (let portal of portalList) {
    var cols = portal.split(",");
    console.log(`portal = ${portal} cols.length = ${cols.length}`);

    const portalInstance = portalBase.createInstance();
    var portalId = parseInt(cols[0]);
    var portalX = parseFloat(cols[1]);
    var portalZ = parseFloat(cols[2]);
    var portalA = parseFloat(cols[3]);

    console.log(`processing portal ${portalId} (${portalX},${portalZ}) angle ${portalA}`);

    portalInstance.x = portalX;
    portalInstance.y = -portalZ;
    portalInstance.rotation = portalA;

    const id = portalInstance.findOne(node => node.type === "TEXT" && node.name === "#ID") as TextNode;
    id.characters = `Portal ${portalId}`;
    portalInstance.name = `Portal ${portalId}`;

    // for now just put node in the main page; group later
    pageNode.appendChild(portalInstance);
    portals.push(portalInstance);
  }

  console.log(`done processing portals`);

  // and now we group the new portals together
  figma.currentPage.selection = portals;
  const newPortals = figma.group(portals,mapNode);
  newPortals.name = "Portals";

  // now we add the booths
  console.log(`finding node 'Booth Base'`);
  const boothBase = pageNode.findOne(node => node.type === "COMPONENT" && node.name === "Booth Base") as ComponentNode;
  for (let booth of boothList) {
    var cols = booth.split(",");
    console.log(`booth = ${booth} cols.length = ${cols.length}`);

    const boothInstance = boothBase.createInstance();
    var boothId = parseInt(cols[0]);
    var boothX = parseFloat(cols[1]);
    var boothZ = parseFloat(cols[2]);
    var boothA = parseFloat(cols[3]);

    console.log(`processing booth ${boothId} (${boothX},${boothZ}) angle ${boothA}`);

    boothInstance.x = boothX;
    boothInstance.y = -boothZ;
    boothInstance.rotation = boothA;

    const id = boothInstance.findOne(node => node.type === "TEXT" && node.name === "#ID") as TextNode;
    id.characters = `Booth ${boothId}`;
    boothInstance.name = `Booth ${boothId}`;

    // for now just put node in the main page; group later
    pageNode.appendChild(boothInstance);
    booths.push(boothInstance);
  }

  console.log(`done processing booths`);

  // and now we group the new booths together
  figma.currentPage.selection = booths;
  const newBooths = figma.group(booths,mapNode);
  newBooths.name = "Booths";
}


async function exportTags() 
{

  const pageNode = figma.currentPage;

  // make sure we are on the right page
  if (pageNode.name != "Landmarks")
  {
    console.error(`need to be on the Landmarks page to run`);
    return;
  }

  var tagNode = pageNode.findOne(node => node.type === "FRAME" && node.name === "Arms / direction A") as FrameNode;
  console.log(`found tagNode '${tagNode.name}'`);
  tagNode = tagNode.findOne(node => node.type === "FRAME" && node.name === "Map") as FrameNode;
  console.log(`found tagNode '${tagNode.name}'`);
  tagNode = tagNode.findOne(node => node.type === "GROUP" && node.name === "Lights") as FrameNode;
  console.log(`found tagNode '${tagNode.name}'`);

  for (let child of tagNode.children)
  {
    if (child.name.startsWith("CWArm"))
    {
      //console.log(`found child '${child.name}'`);
      // find the child lights
      var childGroup = child as FrameNode;
      var csvLightNumbers = "";
      for (let light of childGroup.children)
      {
        if (csvLightNumbers != "")
        {
          csvLightNumbers += ",";
        }
        csvLightNumbers += light.name.substring(6);
      }
      //var groupNum = child.name.substring(6);
      console.log(`${child.name},${csvLightNumbers}`);
    }
  }

  var tagNode = pageNode.findOne(node => node.type === "FRAME" && node.name === "Portal Placemen / Aisles") as FrameNode;
  console.log(`found tagNode '${tagNode.name}'`);
  tagNode = tagNode.findOne(node => node.type === "FRAME" && node.name === "Map") as FrameNode;
  console.log(`found tagNode '${tagNode.name}'`);
  tagNode = tagNode.findOne(node => node.type === "GROUP" && node.name === "Lights") as FrameNode;
  console.log(`found tagNode '${tagNode.name}'`);

  for (let child of tagNode.children)
  {
    if (child.name.startsWith("Portal"))
    {
      //console.log(`found child '${child.name}'`);
      // find the child lights
      var childGroup = child as FrameNode;
      var csvLightNumbers = "";
      for (let light of childGroup.children)
      {
        if (csvLightNumbers != "")
        {
          csvLightNumbers += ",";
        }
        csvLightNumbers += light.name.substring(6);
      }
      //var groupNum = child.name.substring(6);
      console.log(`${child.name},${csvLightNumbers}`);
    }
  }

  var tagNode = pageNode.findOne(node => node.type === "FRAME" && node.name === "Arms / direction B") as FrameNode;
  console.log(`found tagNode '${tagNode.name}'`);
  tagNode = tagNode.findOne(node => node.type === "FRAME" && node.name === "Map") as FrameNode;
  console.log(`found tagNode '${tagNode.name}'`);
  tagNode = tagNode.findOne(node => node.type === "GROUP" && node.name === "Lights") as FrameNode;
  console.log(`found tagNode '${tagNode.name}'`);

  console.log('exporting direction B!');
  for (let child of tagNode.children)
  {
    if (child.name.startsWith("Arm"))
    {
      //console.log(`found child '${child.name}'`);
      // find the child lights
      var childGroup = child as FrameNode;
      if (childGroup != null)
      {
        var csvLightNumbers = "";
        for (let light of childGroup.children)
        {
          if (csvLightNumbers != "")
          {
            csvLightNumbers += ",";
          }
          csvLightNumbers += light.name.substring(6);
        }
        //var groupNum = child.name.substring(6);
        console.log(`${child.name},${csvLightNumbers}`);
      }
    }
  }
  console.log('finished exporting direction B!');

}

async function numberRadials() {

  const pageNode = figma.currentPage;
  const nodes: SceneNode[] = [];

  // make sure we are on the right page
  if (pageNode.name != "Assets")
  {
    console.error(`need to be on the Assets page to run`);
    return;
  }
  
  console.log(`finding node 'Map'`);
  const mapNode = pageNode.findOne(node => node.type === "FRAME" && node.name === "Map") as FrameNode;
  if (mapNode == null)
  {
    console.log(`mapNode is null !`);
    return;
  }

  // first get rid of old numbers
  console.log(`finding and deleting node 'Numbers'`);
  const numbers = pageNode.findOne(node => node.type === "GROUP" && node.name === "Numbers") as GroupNode;
  if (numbers != null)
  {
    numbers.remove();
  }

  // now we draw the numbers
  for (let i=0; i < 360; i+=5) {
    const text = figma.createText();
    var x = 1560 * Math.cos((i-90) * Math.PI / 180);
    var y = 1560 * Math.sin((i-90) * Math.PI / 180);
    text.x = x;
    text.y = y;
    text.fontSize = 20;
    text.characters = i.toString() + "°";
    
    // for now just put node in the main page; group later
    pageNode.appendChild(text);
    nodes.push(text);
  }

  console.log(`done drawing numbers`);

  // and now we group the new lines together
  figma.currentPage.selection = nodes;
  figma.viewport.scrollAndZoomIntoView(nodes);
  console.log(`figma.group()`);
  const numberGroup = figma.group(nodes,mapNode);
  numberGroup.name = "Numbers";
}


// This file holds the main code for the plugins. It has access to the *document*.
// You can access browser APIs such as the network by creating a UI which contains
// a full browser environment (see documentation).

(async() => {
  await loadFonts();

  console.log(`figma.command = ${figma.command}`)
  console.log(`figma.currentPage.name = '${figma.currentPage.name}'`);

  if (figma.command == "import")
  {    
    await importCSV();
  }
  else if (figma.command == "export")
  {
    await exportTags();
  }
  else if (figma.command == "radials")
  {
    await numberRadials();
  }

  // Make sure to close the plugin when you're done. Otherwise the plugin will
  // keep running, which shows the cancel button at the bottom of the screen.
  figma.closePlugin();

})();


