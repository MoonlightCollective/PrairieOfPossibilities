async function loadFonts() {

  await figma.loadFontAsync({ family: "Inter", style: "Regular" });
  console.log("Awaiting the fonts.");
};


var lightBaseMap = new Map();
var pathList = [];
var portalList = [];
var boothList = [];

function buildMaps() {

  var csvData = loadBaseData();
  console.log(`csvData() ${csvData}`);

  var rows = csvData.split("\n");
  console.log(`buildMap() found ${rows.length} base rows`);
  for (var i=0;i<rows.length;i++)
  {
    if (i > 0)
    {
      rows[i] = rows[i].trim();
      var cols = rows[i].split(",");
      // now apply 135 degree rotation
      //var theta = -Math.PI * 135 / 180;
      var theta = 0;
      var oldX = parseFloat(cols[1]);
      var oldZ = parseFloat(cols[2]);
      var newX = oldX * Math.cos(theta) - oldZ * Math.sin(theta);
      var newZ = oldZ * Math.cos(theta) + oldX * Math.sin(theta);
      cols[1] = newX.toString();
      cols[2] = newZ.toString(); 
      lightBaseMap.set(cols[0], cols);
    }
  }

  var portalData = loadPortalData();
  console.log(`portalData() ${portalData}`);
  rows = portalData.split("\n");
  console.log(`found ${rows.length} portals`);
  for (var i=0; i<rows.length; i++)
  {
    if (i > 0)
    {
      // store them as strings.   typescript doesnt' like arrays of arrays
      rows[i] = rows[i].trim();
      portalList.push(rows[i]);
    }
  }

  var boothData = loadBoothData();
  console.log(`boothData() ${boothData}`);
  rows = boothData.split("\n");
  console.log(`found ${rows.length} booths`);
  for (var i=0; i<rows.length; i++)
  {
    if (i > 0)
    {
      // store them as strings.   typescript doesnt' like arrays of arrays
      rows[i] = rows[i].trim();
      boothList.push(rows[i]);
    }
  }

  var pathData = loadPathData();
  console.log(`pathData() ${pathData}`);
  rows = pathData.split("\n");
  console.log(`buildMap() found ${rows.length} path rows`);
  for (var i=0;i<rows.length;i++)
  {
    if (i > 0)
    {
      // store them as strings.   typescript doesnt' like arrays of arrays
      rows[i] = rows[i].trim();
      pathList.push(rows[i]);
    }
  }
}

function loadPortalData()
{
  var portalData = `PortalId,x,z,Theta
  1,1260,0,90
  2,0,1260,180
  3,-1260,0,270
  4,0,-1260,0`;
  return portalData;
}

function loadBoothData()
{
  var boothData = `BoothId,x,z,Theta
  1,1103,1103,45
  2,-1103,-1103,225`;
  return boothData;
}

function loadBaseData()
{
  var baseData = `BaseId,x,z,DistFromCtr,Theta,ChannelStart,PathId,NearestTheta5,DistFromCenterOnTheta5,DistFromTheta5
  0,257.2384,59.36794,264.0003,77.00427,189,23,75,263.8388,9.233173
  1,230.9046,127.9813,264.0002,61.00214,168,23,60,263.9599,4.617286
  2,186.6764,186.6764,264.0003,45,147,23,45,264.0002,-2.157919E-05
  3,127.9812,230.9046,264.0003,28.99786,126,23,30,263.9599,-4.617284
  4,59.36794,257.2384,264.0003,12.99573,105,23,15,263.8388,-9.233181
  5,-59.36796,257.2384,264.0002,347.0043,105,7,345,263.8387,9.233148
  6,-127.9813,230.9046,264.0002,331.0021,126,7,330,263.9599,4.617299
  7,-186.6764,186.6764,264.0003,315,147,7,315,264.0002,-2.157919E-05
  8,-230.9046,127.9813,264.0002,298.9979,168,7,300,263.9599,-4.617299
  9,-257.2384,59.36795,264.0002,282.9957,189,7,285,263.8387,-9.233173
  10,-257.2384,-59.36794,264.0003,257.0043,189,15,255,263.8388,9.233181
  11,-230.9046,-127.9812,264.0003,241.0021,168,15,240,263.9599,4.617293
  12,-186.6764,-186.6764,264.0003,225,147,15,225,264.0002,-2.157919E-05
  13,-127.9813,-230.9046,264.0002,208.9979,126,15,210,263.9599,-4.617238
  14,-59.36792,-257.2384,264.0003,192.9957,105,15,195,263.8388,-9.233177
  15,59.36792,-257.2384,264.0003,167.0043,105,31,165,263.8387,9.233186
  16,127.9813,-230.9046,264.0002,151.0021,126,31,150,263.9599,4.617218
  17,186.6765,-186.6763,264.0003,135,147,31,135,264.0003,-0.0001406791
  18,230.9047,-127.9811,264.0003,118.9978,168,31,120,263.9599,-4.617483
  19,257.2384,-59.36775,264.0003,102.9957,189,31,105,263.8387,-9.233429
  20,361.5858,59.61396,366.467,80.63797,0,23,80,366.4443,4.080425
  21,325.9973,167.4033,366.467,62.81897,21,23,65,366.2016,-13.94651
  22,259.1313,259.1313,366.4671,45,42,23,45,366.4671,0
  23,167.4033,325.9973,366.467,27.18103,63,23,25,366.2016,13.94654
  24,59.61396,361.5858,366.467,9.36203,84,23,10,366.4443,-4.080437
  25,-59.61399,361.5858,366.467,350.638,84,7,350,366.4443,4.080395
  26,-167.4033,325.9973,366.4671,332.819,63,7,335,366.2016,-13.94652
  27,-259.1313,259.1313,366.4671,315,42,7,315,366.4671,0
  28,-325.9973,167.4033,366.4671,297.181,21,7,295,366.2016,13.94652
  29,-361.5858,59.61404,366.467,279.3621,0,7,280,366.4443,-4.080384
  30,-361.5858,-59.61393,366.467,260.638,0,15,260,366.4443,4.080467
  31,-325.9973,-167.4032,366.467,242.819,21,15,245,366.2015,-13.94644
  32,-259.1314,-259.1313,366.467,225,42,15,225,366.467,8.631674E-05
  33,-167.4035,-325.9972,366.467,207.181,63,15,205,366.2015,13.94673
  34,-59.61414,-361.5858,366.4671,189.3621,84,15,190,366.4444,-4.080221
  35,59.61382,-361.5858,366.467,170.638,84,31,170,366.4443,4.080549
  36,167.4032,-325.9974,366.4671,152.819,63,31,155,366.2016,-13.94636
  37,259.1312,-259.1315,366.4671,135,42,31,135,366.4671,0.0001726335
  38,325.9971,-167.4035,366.467,117.1811,21,31,115,366.2015,13.94673
  39,361.5858,-59.61426,366.4671,99.36206,0,31,100,366.4444,-4.080217
  40,465.1159,59.71746,468.9338,82.68365,294,22,85,468.5507,-18.9527
  41,440.9954,159.4427,468.9338,70.12244,273,22,70,468.9327,1.002126
  42,395.7638,251.5352,468.9338,57.56122,252,22,60,468.5091,-19.95402
  43,331.5863,331.5863,468.9338,45,231,22,45,468.9338,0
  44,251.5352,395.7638,468.9338,32.43878,210,22,30,468.5091,19.95398
  45,159.4427,440.9954,468.9338,19.87756,189,22,20,468.9327,-1.002198
  46,59.71743,465.1159,468.9338,7.316345,168,22,5,468.5507,18.95264
  47,-59.71746,465.1159,468.9338,352.6837,168,6,355,468.5507,-18.95268
  48,-159.4427,440.9954,468.9338,340.1224,189,6,340,468.9327,1.00214
  49,-251.5352,395.7638,468.9339,327.5612,210,6,330,468.5092,-19.95395
  50,-331.5863,331.5863,468.9338,315,231,6,315,468.9338,0
  51,-395.7638,251.5352,468.9339,302.4388,252,6,300,468.5092,19.95395
  52,-440.9954,159.4427,468.9338,289.8776,273,6,290,468.9327,-1.002183
  53,-465.1159,59.71746,468.9338,277.3163,294,6,275,468.5507,18.95263
  54,-465.1159,-59.71743,468.9338,262.6837,294,14,265,468.5507,-18.95263
  55,-440.9954,-159.4427,468.9338,250.1224,273,14,250,468.9327,1.002183
  56,-395.7638,-251.5352,468.9338,237.5612,252,14,240,468.5091,-19.95397
  57,-331.5863,-331.5863,468.9338,225,231,14,225,468.9338,-3.051758E-05
  58,-251.5352,-395.7638,468.9338,212.4388,210,14,210,468.5091,19.95407
  59,-159.4427,-440.9954,468.9338,199.8775,189,14,200,468.9327,-1.002159
  60,-59.71727,-465.1159,468.9339,187.3163,168,14,185,468.5508,18.95252
  61,59.71773,-465.1159,468.9339,172.6837,168,30,175,468.5508,-18.95297
  62,159.4431,-440.9952,468.9338,160.1224,189,30,160,468.9327,1.001719
  63,251.5356,-395.7635,468.9339,147.5612,210,30,150,468.5091,-19.95453
  64,331.5868,-331.5859,468.9339,134.9999,231,30,135,468.9339,-0.0006693028
  65,395.7642,-251.5346,468.9338,122.4387,252,30,120,468.5092,19.95316
  66,440.9957,-159.442,468.9339,109.8774,273,30,110,468.9328,-1.003105
  67,465.116,-59.71653,468.9339,97.31622,294,30,95,468.5508,18.95162
  68,568.2659,59.77052,571.4006,83.99567,0,22,85,571.3127,-10.01545
  69,546.0059,168.4527,571.4007,72.85406,21,22,75,571,-21.39614
  70,503.1641,270.7852,571.4006,61.71243,42,22,60,571.1454,17.07521
  71,441.3556,362.9103,571.4006,50.5708,63,22,50,571.3723,5.692497
  72,362.9103,441.3557,571.4006,39.4292,84,22,40,571.3723,-5.692563
  73,270.7851,503.1641,571.4006,28.28757,105,22,30,571.1454,-17.07528
  74,168.4526,546.0059,571.4007,17.14594,126,22,15,571,21.39601
  75,59.77042,568.266,571.4007,6.004333,147,22,5,571.3129,10.0153
  76,-59.7706,568.2659,571.4006,353.9957,147,6,355,571.3128,-10.01552
  77,-168.4528,546.0058,571.4006,342.8541,126,6,345,570.9998,-21.39621
  78,-270.7852,503.164,571.4006,331.7124,105,6,330,571.1454,17.07517
  79,-362.9104,441.3556,571.4006,320.5708,84,6,320,571.3723,5.692371
  80,-441.3557,362.9102,571.4006,309.4292,63,6,310,571.3723,-5.692676
  81,-503.1642,270.785,571.4006,298.2875,42,6,300,571.1454,-17.07544
  82,-546.0059,168.4526,571.4006,287.1459,21,6,285,570.9998,21.39591
  83,-568.266,59.77032,571.4007,276.0043,0,6,275,571.313,10.01516
  84,-568.2659,-59.77069,571.4006,263.9957,0,14,265,571.3129,-10.01558
  85,-546.0058,-168.4529,571.4006,252.854,21,14,255,570.9998,-21.39628
  86,-503.164,-270.7853,571.4006,241.7124,42,14,240,571.1454,17.07501
  87,-441.3555,-362.9105,571.4006,230.5708,63,14,230,571.3723,5.692262
  88,-362.91,-441.3558,571.4006,219.4291,84,14,220,571.3723,-5.692805
  89,-270.7848,-503.1643,571.4007,208.2875,105,14,210,571.1454,-17.07558
  90,-168.4523,-546.0059,571.4006,197.1459,126,14,195,570.9999,21.39577
  91,-59.7701,-568.266,571.4007,186.0043,147,14,185,571.313,10.01504
  92,59.77092,-568.2659,571.4006,173.9956,147,30,175,571.3129,-10.01585
  93,168.4532,-546.0057,571.4006,162.854,126,30,165,570.9998,-21.3966
  94,270.7855,-503.1639,571.4007,151.7124,105,30,150,571.1455,17.07474
  95,362.9106,-441.3553,571.4006,140.5708,84,30,140,571.3723,5.69202
  96,441.356,-362.91,571.4007,129.4291,63,30,130,571.3723,-5.693083
  97,503.1643,-270.7847,571.4006,118.2875,42,30,120,571.1454,-17.07585
  98,546.006,-168.4523,571.4007,107.1459,21,30,105,570.9999,21.39548
  99,568.266,-59.77001,571.4007,96.00427,0,30,95,571.3129,10.01476
  100,671.2086,59.80128,673.8674,84.90869,0,21,85,673.8665,-1.074039
  101,653.9645,162.5658,673.8674,76.0401,21,21,75,673.7563,12.23196
  102,621.0835,261.4432,673.8674,67.17148,42,21,65,673.3836,25.53318
  103,573.3517,354.0693,673.8674,58.30289,63,21,60,673.5718,-19.95714
  104,511.9106,438.2292,673.8674,49.4343,84,21,50,673.8345,-6.653216
  105,438.2292,511.9107,673.8674,40.5657,105,21,40,673.8346,6.65317
  106,354.0692,573.3518,673.8674,31.69708,126,21,30,673.5719,19.95706
  107,261.4431,621.0836,673.8674,22.82849,147,21,25,673.3835,-25.53327
  108,162.5657,653.9645,673.8674,13.9599,168,21,15,673.7563,-12.23207
  109,59.80116,671.2086,673.8674,5.091309,189,21,5,673.8665,1.073872
  110,-59.80138,671.2086,673.8674,354.9087,189,5,355,673.8665,-1.074115
  111,-162.5659,653.9645,673.8674,346.0401,168,5,345,673.7564,12.23187
  112,-261.4433,621.0835,673.8674,337.1715,147,5,335,673.3835,25.53316
  113,-354.0693,573.3517,673.8674,328.3029,126,5,330,673.5718,-19.95714
  114,-438.2292,511.9106,673.8674,319.4343,105,5,320,673.8346,-6.653255
  115,-511.9106,438.2292,673.8674,310.5657,84,5,310,673.8346,6.653255
  116,-573.3517,354.0693,673.8674,301.6971,63,5,300,673.5718,19.95714
  117,-621.0835,261.4433,673.8674,292.8285,42,5,295,673.3835,-25.53316
  118,-653.9645,162.566,673.8674,283.9599,21,5,285,673.7564,-12.23184
  119,-671.2086,59.80153,673.8674,275.0913,0,5,275,673.8665,1.074191
  120,-671.2086,-59.801,673.8674,264.9087,0,13,265,673.8665,-1.073708
  121,-653.9648,-162.5655,673.8675,256.0401,21,13,255,673.7565,12.23237
  122,-621.0837,-261.4428,673.8675,247.1715,42,13,245,673.3837,25.53365
  123,-573.3521,-354.0689,673.8674,238.3029,63,13,240,673.5718,-19.95664
  124,-511.9109,-438.2288,673.8674,229.4343,84,13,230,673.8345,-6.652743
  125,-438.2296,-511.9102,673.8674,220.5658,105,13,220,673.8345,6.653884
  126,-354.0698,-573.3514,673.8674,211.6971,126,13,210,673.5718,19.95782
  127,-261.4438,-621.0833,673.8674,202.8286,147,13,205,673.3835,-25.53253
  128,-162.5665,-653.9645,673.8675,193.96,168,13,195,673.7566,-12.23123
  129,-59.80206,-671.2086,673.8674,185.0914,189,13,185,673.8666,1.074831
  130,59.80048,-671.2089,673.8675,174.9088,189,29,175,673.8667,-1.073213
  131,162.565,-653.9648,673.8674,166.0402,168,29,165,673.7563,12.23283
  132,261.4424,-621.0839,673.8675,157.1716,147,29,155,673.3835,25.53408
  133,354.0685,-573.3523,673.8675,148.303,126,29,150,673.5719,-19.95624
  134,438.2284,-511.9113,673.8674,139.4344,105,29,140,673.8347,-6.652256
  135,511.9099,-438.23,673.8674,130.5658,84,29,130,673.8346,6.654186
  136,573.3511,-354.0703,673.8674,121.6972,63,29,120,673.5718,19.95815
  137,621.0831,-261.4443,673.8674,112.8286,42,29,115,673.3837,-25.53217
  138,653.9642,-162.567,673.8674,103.96,21,29,105,673.7565,-12.23088
  139,671.2086,-59.80259,673.8674,95.09143,0,29,95,673.8666,1.075155
  140,774.0259,59.8207,776.3342,85.58069,0,20,85,776.2943,7.867743
  141,757.8278,168.4986,776.3342,77.46454,21,20,75,775.616,33.38316
  142,726.4488,273.801,776.3342,69.34839,42,20,70,776.284,-8.828622
  143,680.5173,373.6187,776.3342,61.23227,63,20,60,776.1547,16.69547
  144,620.9537,465.9519,776.3342,53.11612,84,20,55,775.9146,-25.521
  145,548.951,548.9512,776.3342,45,105,20,45,776.3342,-0.0001220703
  146,465.9518,620.9539,776.3342,36.88385,126,20,35,775.9146,25.52089
  147,373.6185,680.5174,776.3342,28.76773,147,20,30,776.1547,-16.69552
  148,273.8009,726.4488,776.3342,20.65158,168,20,20,776.284,8.828536
  149,168.4984,757.8278,776.3342,12.53546,189,20,15,775.616,-33.38333
  150,59.82053,774.0261,776.3342,4.419312,210,20,5,776.2944,-7.867975
  151,-59.82087,774.0259,776.3342,355.5807,210,4,355,776.2943,7.867593
  152,-168.4987,757.8278,776.3342,347.4645,189,4,345,775.6161,33.38299
  153,-273.8012,726.4486,776.3342,339.3484,168,4,340,776.2839,-8.828921
  154,-373.6188,680.5173,776.3342,331.2323,147,4,330,776.1547,16.69538
  155,-465.952,620.9537,776.3342,323.1161,126,4,325,775.9146,-25.52112
  156,-548.9512,548.951,776.3342,315,105,4,315,776.3342,-0.0001930101
  157,-620.9539,465.9517,776.3342,306.8839,84,4,305,775.9146,25.52078
  158,-680.5175,373.6184,776.3342,298.7677,63,4,300,776.1546,-16.69575
  159,-726.4489,273.8007,776.3342,290.6516,42,4,290,776.2839,8.828351
  160,-757.8279,168.4983,776.3342,282.5355,21,4,285,775.6161,-33.38353
  161,-774.0261,59.8204,776.3342,274.4193,0,4,275,776.2943,-7.868163
  162,-774.0259,-59.82091,776.3342,265.5806,0,12,265,776.2943,7.867579
  163,-757.8278,-168.4987,776.3342,257.4645,21,12,255,775.6161,33.38298
  164,-726.4486,-273.8012,776.3342,249.3484,42,12,250,776.2839,-8.828893
  165,-680.5172,-373.6189,776.3342,241.2322,63,12,240,776.1546,16.69514
  166,-620.9536,-465.9521,776.3342,233.1161,84,12,235,775.9145,-25.52127
  167,-548.9509,-548.9514,776.3342,225,105,12,225,776.3343,-0.0004401308
  168,-465.9516,-620.954,776.3342,216.8838,126,12,215,775.9146,25.52072
  169,-373.6185,-680.5174,776.3342,208.7677,147,12,210,776.1546,-16.69555
  170,-273.801,-726.4488,776.3342,200.6516,168,12,200,776.2839,8.828679
  171,-168.4987,-757.8278,776.3342,192.5355,189,12,195,775.616,-33.38297
  172,-59.82101,-774.0259,776.3342,184.4193,210,12,185,776.2943,-7.867407
  173,59.82029,-774.0261,776.3342,175.5807,210,28,175,776.2944,7.868161
  174,168.498,-757.8279,776.3342,167.4646,189,28,165,775.616,33.38371
  175,273.8003,-726.4489,776.3341,159.3484,168,28,160,776.2838,-8.827993
  176,373.6179,-680.5178,776.3342,151.2323,147,28,150,776.1546,16.69626
  177,465.951,-620.9543,776.3341,143.1162,126,28,145,775.9146,-25.52006
  178,548.9503,-548.952,776.3342,135.0001,105,28,135,776.3342,0.001079822
  179,620.9529,-465.953,776.3341,126.884,84,28,125,775.9145,25.52227
  180,680.5167,-373.62,776.3342,118.7679,63,28,120,776.1547,-16.69411
  181,726.4482,-273.8026,776.3342,110.6517,42,28,110,776.2841,8.830178
  182,757.8274,-168.5004,776.3342,102.5356,21,28,105,775.6161,-33.3815
  183,774.0259,-59.82274,776.3342,94.41946,0,28,95,776.2944,-7.86593
  184,876.7617,59.83373,878.801,86.09595,0,19,85,878.6403,16.80876
  185,863.3686,163.9682,878.8009,79.24664,21,19,80,878.7249,-11.55481
  186,837.6523,265.7623,878.8009,72.39731,42,19,70,878.0317,36.75904
  187,799.9797,363.763,878.8009,65.54797,63,19,65,878.7608,8.40477
  188,750.8884,456.5715,878.8009,58.69867,84,19,60,878.5742,-19.95829
  189,691.0793,542.8631,878.8009,51.84933,105,19,50,878.3431,28.3599
  190,621.4061,621.4061,878.8009,45,126,19,45,878.8008,-8.631674E-05
  191,542.863,691.0793,878.8008,38.15067,147,19,40,878.3431,-28.36
  192,456.5715,750.8884,878.8009,31.30136,168,19,30,878.5742,19.95834
  193,363.7631,799.9797,878.8009,24.45203,189,19,25,878.7607,-8.404659
  194,265.7623,837.6523,878.8009,17.60269,210,19,20,878.0317,-36.7591
  195,163.9682,863.3686,878.8009,10.75336,231,19,10,878.7249,11.55475
  196,59.83369,876.7617,878.801,3.904053,252,19,5,878.6401,-16.80886
  197,-59.83377,876.7617,878.801,356.0959,252,3,355,878.6401,16.80875
  198,-163.9683,863.3686,878.8009,349.2466,231,3,350,878.7249,-11.55484
  199,-265.7624,837.6523,878.8009,342.3973,210,3,340,878.0317,36.75902
  200,-363.7631,799.9797,878.8009,335.548,189,3,335,878.7607,8.404768
  201,-456.5715,750.8884,878.8009,328.6987,168,3,330,878.5742,-19.95823
  202,-542.8631,691.0793,878.8009,321.8493,147,3,320,878.3431,28.3599
  203,-621.4061,621.4061,878.8009,315,126,3,315,878.8008,-8.631674E-05
  204,-691.0793,542.863,878.8008,308.1507,105,3,310,878.3431,-28.36
  205,-750.8884,456.5715,878.8009,301.3013,84,3,300,878.5742,19.95823
  206,-799.9797,363.7629,878.8009,294.452,63,3,295,878.7607,-8.404904
  207,-837.6523,265.7623,878.801,287.6027,42,3,290,878.0319,-36.75916
  208,-863.3686,163.9682,878.8009,280.7534,21,3,280,878.725,11.55463
  209,-876.7617,59.83365,878.801,273.9041,0,3,275,878.6401,-16.80896
  210,-876.7617,-59.83381,878.801,266.0959,0,11,265,878.6401,16.80875
  211,-863.3686,-163.9683,878.8009,259.2466,21,11,260,878.7249,-11.55484
  212,-837.6523,-265.7624,878.8009,252.3973,42,11,250,878.0317,36.75902
  213,-799.9797,-363.7631,878.8009,245.548,63,11,245,878.7607,8.404687
  214,-750.8884,-456.5716,878.8009,238.6986,84,11,240,878.5742,-19.95848
  215,-691.0792,-542.8632,878.8009,231.8493,105,11,230,878.3431,28.35982
  216,-621.4059,-621.4062,878.8009,225,126,11,225,878.8008,-0.0002729575
  217,-542.8631,-691.0793,878.8009,218.1507,147,11,220,878.343,-28.35986
  218,-456.5717,-750.8884,878.801,211.3014,168,11,210,878.5743,19.95862
  219,-363.7634,-799.9795,878.8009,204.452,189,11,205,878.7607,-8.404276
  220,-265.7629,-837.6522,878.8009,197.6027,210,11,200,878.0318,-36.75835
  221,-163.9691,-863.3685,878.801,190.7534,231,11,190,878.725,11.55566
  222,-59.83477,-876.7616,878.801,183.9041,252,11,185,878.6403,-16.8077
  223,59.83269,-876.7617,878.8009,176.096,252,27,175,878.64,16.8098
  224,163.967,-863.3689,878.801,169.2467,231,27,170,878.725,-11.55358
  225,265.7609,-837.6527,878.8009,162.3974,210,27,160,878.0316,36.76047
  226,363.7615,-799.9803,878.8009,155.5481,189,27,155,878.7607,8.406323
  227,456.57,-750.8894,878.801,148.6988,168,27,150,878.5744,-19.95662
  228,542.8615,-691.0806,878.8009,141.8495,147,27,140,878.343,28.36189
  229,621.4045,-621.4077,878.8009,135.0002,126,27,135,878.8008,0.002115201
  230,691.0779,-542.865,878.8009,128.1508,105,27,130,878.3433,-28.35778
  231,750.8871,-456.5737,878.8009,121.3015,84,27,120,878.5742,19.96075
  232,799.9785,-363.7656,878.801,114.4522,63,27,115,878.7609,-8.402095
  233,837.6514,-265.7652,878.8009,107.6029,42,27,110,878.0319,-36.75628
  234,863.368,-163.9714,878.8009,100.7536,21,27,100,878.7249,11.55777
  235,876.7614,-59.83713,878.801,93.90427,0,27,95,878.6402,-16.80561
  236,979.4411,59.8429,981.2676,86.50363,0,18,85,980.9297,25.74874
  237,966.7101,168.3971,981.2676,80.11847,21,18,80,981.2654,2.028713
  238,941.9857,274.8621,981.2677,73.73328,42,18,75,981.0278,-21.69251
  239,905.5745,377.9169,981.2677,67.34811,63,18,65,980.4438,40.2033
  240,857.9282,476.2831,981.2677,60.96295,84,18,60,981.1292,16.49082
  241,799.6378,568.7404,981.2677,54.57776,105,18,55,981.241,-7.231377
  242,731.4268,654.1415,981.2677,48.1926,126,18,50,980.7795,-30.94938
  243,654.1413,731.4269,981.2677,41.8074,147,18,40,980.7795,30.94912
  244,568.7402,799.6379,981.2677,35.42224,168,18,35,981.2411,7.231242
  245,476.283,857.9282,981.2677,29.03705,189,18,30,981.1291,-16.49088
  246,377.9167,905.5746,981.2678,22.65189,210,18,25,980.4438,-40.20343
  247,274.8618,941.9857,981.2676,16.26672,231,18,15,981.0278,21.69227
  248,168.3969,966.7103,981.2678,9.881531,252,18,10,981.2657,-2.028947
  249,59.8427,979.4411,981.2676,3.496368,273,18,5,980.9297,-25.749
  250,-59.84313,979.4411,981.2676,356.5036,273,2,355,980.9297,25.74853
  251,-168.3973,966.7101,981.2677,350.1184,252,2,350,981.2656,2.028471
  252,-274.8623,941.9857,981.2677,343.7333,231,2,345,981.0278,-21.69276
  253,-377.9172,905.5743,981.2677,337.3481,210,2,335,980.4438,40.20305
  254,-476.2834,857.9279,981.2677,330.9629,189,2,330,981.1291,16.49055
  255,-568.7405,799.6377,981.2677,324.5778,168,2,325,981.241,-7.231612
  256,-654.1417,731.4266,981.2677,318.1926,147,2,320,980.7794,-30.94964
  257,-731.4271,654.1412,981.2677,311.8074,126,2,310,980.7796,30.9489
  258,-799.6381,568.7399,981.2677,305.4222,105,2,305,981.241,7.230852
  259,-857.9282,476.2827,981.2676,299.037,84,2,300,981.129,-16.49126
  260,-905.5746,377.9165,981.2677,292.6519,63,2,295,980.4437,-40.20376
  261,-941.9858,274.8616,981.2676,286.2667,42,2,285,981.0279,21.69196
  262,-966.7103,168.3966,981.2677,279.8815,21,2,280,981.2654,-2.029315
  263,-979.4411,59.84242,981.2676,273.4963,0,2,275,980.9296,-25.74935
  264,-979.4411,-59.84329,981.2676,266.5036,0,10,265,980.9297,25.74842
  265,-966.7101,-168.3975,981.2676,260.1184,21,10,260,981.2655,2.028346
  266,-941.9855,-274.8625,981.2676,253.7332,42,10,255,981.0278,-21.69292
  267,-905.5743,-377.9173,981.2677,247.3481,63,10,245,980.4438,40.20284
  268,-857.9279,-476.2835,981.2677,240.9629,84,10,240,981.129,16.49031
  269,-799.6375,-568.7407,981.2676,234.5777,105,10,235,981.241,-7.231952
  270,-731.4265,-654.1418,981.2677,228.1926,126,10,230,980.7795,-30.9499
  271,-654.141,-731.4272,981.2677,221.8074,147,10,220,980.7795,30.94882
  272,-568.7399,-799.6381,981.2676,215.4222,168,10,215,981.241,7.230987
  273,-476.2828,-857.9282,981.2676,209.037,189,10,210,981.129,-16.49101
  274,-377.9167,-905.5745,981.2676,202.6519,210,10,205,980.4437,-40.20332
  275,-274.8622,-941.9857,981.2677,196.2667,231,10,195,981.0279,21.69267
  276,-168.3974,-966.7101,981.2676,189.8816,252,10,190,981.2654,-2.028342
  277,-59.84342,-979.441,981.2675,183.4964,273,10,185,980.9297,-25.74819
  278,59.84251,-979.4411,981.2676,176.5037,273,26,175,980.9297,25.74912
  279,168.3965,-966.7103,981.2677,170.1185,252,26,170,981.2657,2.029273
  280,274.8612,-941.9859,981.2676,163.7333,231,26,165,981.0278,-21.69169
  281,377.9159,-905.5748,981.2677,157.3482,210,26,155,980.4437,40.20425
  282,476.282,-857.9288,981.2677,150.963,189,26,150,981.1291,16.49197
  283,568.7391,-799.6387,981.2676,144.5779,168,26,145,981.241,-7.230022
  284,654.1402,-731.4279,981.2677,138.1927,147,26,140,980.7795,-30.94778
  285,731.4256,-654.1428,981.2677,131.8075,126,26,130,980.7794,30.95098
  286,799.6367,-568.742,981.2677,125.4224,105,26,125,981.241,7.233272
  287,857.9269,-476.2851,981.2676,119.0372,84,26,120,981.1291,-16.4886
  288,905.5735,-377.9193,981.2677,112.652,63,26,115,980.4438,-40.20095
  289,941.9849,-274.8647,981.2676,106.2669,42,26,105,981.0278,21.69501
  290,966.7097,-168.4,981.2677,99.88171,21,26,100,981.2655,-2.026013
  291,979.441,-59.84607,981.2677,93.49655,0,26,95,980.9299,-25.74586
  292,1082.081,59.84959,1083.734,86.83423,0,17,85,1083.179,34.68768
  293,1071.14,164.7433,1083.734,81.25632,21,17,80,1083.474,23.76097
  294,1050.055,268.0768,1083.734,75.67841,42,17,75,1083.658,12.83184
  295,1019.026,368.8717,1083.734,70.10052,63,17,70,1083.733,1.901386
  296,978.3469,466.1734,1083.734,64.52264,84,17,65,1083.697,-9.029257
  297,928.4028,559.0602,1083.734,58.94473,105,17,60,1083.551,-19.95889
  298,869.6669,646.6528,1083.734,53.36685,126,17,55,1083.294,-30.88651
  299,802.695,728.1215,1083.734,47.78894,147,17,50,1082.928,-41.81107
  300,728.1215,802.695,1083.734,42.21106,168,17,40,1082.928,41.81103
  301,646.6527,869.6669,1083.734,36.63315,189,17,35,1083.294,30.88643
  302,559.0602,928.4028,1083.734,31.05527,210,17,30,1083.551,19.95897
  303,466.1732,978.3469,1083.734,25.47736,231,17,25,1083.697,9.0292
  304,368.8717,1019.026,1083.734,19.89948,252,17,20,1083.733,-1.901415
  305,268.0768,1050.055,1083.734,14.32159,273,17,15,1083.658,-12.8319
  306,164.7433,1071.14,1083.734,8.743683,294,17,10,1083.474,-23.76101
  307,59.84962,1082.081,1083.734,3.165802,315,17,5,1083.179,-34.68773
  308,-59.84958,1082.081,1083.734,356.8342,315,1,355,1083.179,34.68773
  309,-164.7432,1071.14,1083.734,351.2563,294,1,350,1083.474,23.76103
  310,-268.0768,1050.055,1083.734,345.6784,273,1,345,1083.658,12.8319
  311,-368.8716,1019.026,1083.734,340.1005,252,1,340,1083.733,1.901444
  312,-466.1732,978.3469,1083.734,334.5226,231,1,335,1083.697,-9.029091
  313,-559.0602,928.4028,1083.734,328.9447,210,1,330,1083.551,-19.95889
  314,-646.653,869.6667,1083.734,323.3668,189,1,325,1083.294,-30.88678
  315,-728.1218,802.6948,1083.734,317.7889,168,1,320,1082.928,-41.81142
  316,-802.6953,728.1212,1083.734,312.211,147,1,310,1082.927,41.8106
  317,-869.6671,646.6523,1083.734,306.6331,126,1,305,1083.294,30.88604
  318,-928.4033,559.0596,1083.734,301.0552,105,1,300,1083.551,19.95807
  319,-978.3472,466.1725,1083.734,295.4773,84,1,295,1083.697,9.028298
  320,-1019.026,368.8708,1083.734,289.8994,63,1,290,1083.733,-1.902388
  321,-1050.055,268.0758,1083.734,284.3215,42,1,285,1083.658,-12.83302
  322,-1071.14,164.7421,1083.734,278.7436,21,1,280,1083.474,-23.76229
  323,-1082.081,59.84827,1083.734,273.1657,0,1,275,1083.179,-34.68916
  324,-1082.08,-59.85078,1083.734,266.8341,0,9,265,1083.179,34.68657
  325,-1071.139,-164.7446,1083.734,261.2562,21,9,260,1083.474,23.75973
  326,-1050.054,-268.0782,1083.734,255.6783,42,9,255,1083.658,12.83048
  327,-1019.025,-368.8731,1083.734,250.1004,63,9,250,1083.733,1.899879
  328,-978.3462,-466.1748,1083.734,244.5225,84,9,245,1083.697,-9.030921
  329,-928.402,-559.0618,1083.734,238.9446,105,9,240,1083.551,-19.9608
  330,-869.6657,-646.6544,1083.734,233.3667,126,9,235,1083.294,-30.88853
  331,-802.6936,-728.1231,1083.734,227.7888,147,9,230,1082.927,-41.8132
  332,-728.1201,-802.6964,1083.734,222.2109,168,9,220,1082.928,41.8092
  333,-646.651,-869.6682,1083.734,216.633,189,9,215,1083.294,30.88446
  334,-559.0584,-928.404,1083.734,211.0551,210,9,210,1083.551,19.95692
  335,-466.1714,-978.3478,1083.734,205.4773,231,9,205,1083.697,9.027208
  336,-368.8699,-1019.027,1083.734,199.8994,252,9,200,1083.733,-1.903238
  337,-268.0751,-1050.055,1083.734,194.3215,273,9,195,1083.658,-12.83356
  338,-164.7417,-1071.14,1083.734,188.7436,294,9,190,1083.474,-23.7626
  339,-59.84811,-1082.081,1083.734,183.1657,315,9,185,1083.179,-34.68914
  340,59.85122,-1082.08,1083.734,176.8341,315,25,175,1083.179,34.68604
  341,164.7448,-1071.139,1083.734,171.2562,294,25,170,1083.474,23.75945
  342,268.0781,-1050.054,1083.734,165.6783,273,25,165,1083.658,12.83048
  343,368.8728,-1019.026,1083.734,160.1005,252,25,160,1083.733,1.900151
  344,466.1743,-978.3464,1083.734,154.5226,231,25,155,1083.697,-9.030374
  345,559.061,-928.4024,1083.734,148.9447,210,25,150,1083.551,-19.95992
  346,646.6534,-869.6663,1083.734,143.3668,189,25,145,1083.294,-30.88754
  347,728.1221,-802.6945,1083.734,137.7889,168,25,140,1082.927,-41.81195
  348,802.6953,-728.1212,1083.734,132.211,147,25,130,1082.927,41.81034
  349,869.6671,-646.6524,1083.734,126.6331,126,25,125,1083.294,30.88592
  350,928.4031,-559.0599,1083.734,121.0552,105,25,120,1083.551,19.95837
  351,978.347,-466.1732,1083.734,115.4774,84,25,115,1083.697,9.028792
  352,1019.026,-368.8716,1083.734,109.8995,63,25,110,1083.733,-1.901723
  353,1050.055,-268.0769,1083.734,104.3216,42,25,105,1083.658,-12.83205
  354,1071.14,-164.7435,1083.734,98.74368,21,25,100,1083.474,-23.761
  355,1082.08,-59.84999,1083.734,93.1658,0,25,95,1083.179,-34.68761
  356,1184.69,59.85463,1186.201,87.10767,0,16,85,1185.398,43.62567
  357,1175.096,161.9328,1186.201,82.15384,21,16,80,1185.363,44.58058
  358,1156.723,262.8013,1186.201,77.19998,42,16,75,1185.327,45.53543
  359,1129.709,361.7064,1186.201,72.24615,63,16,70,1185.29,46.49028
  360,1094.254,457.9093,1186.201,67.2923,84,16,65,1185.252,47.4451
  361,1050.625,550.6912,1186.201,62.33844,105,16,60,1185.213,48.39989
  362,999.1462,639.3589,1186.201,57.38461,126,16,55,1185.174,49.35457
  363,940.2034,723.2501,1186.201,52.43076,147,16,50,1185.134,50.30931
  364,874.2363,801.738,1186.201,47.47693,168,16,45,1185.093,51.26403
  365,801.738,874.2363,1186.201,42.52307,189,16,45,1185.093,-51.26403
  366,723.2501,940.2034,1186.201,37.56924,210,16,40,1185.134,-50.30941
  367,639.3589,999.1464,1186.201,32.61539,231,16,35,1185.174,-49.35474
  368,550.691,1050.625,1186.201,27.66153,252,16,30,1185.213,-48.39994
  369,457.9091,1094.254,1186.201,22.7077,273,16,25,1185.252,-47.44532
  370,361.7062,1129.709,1186.201,17.75385,294,16,20,1185.29,-46.49058
  371,262.801,1156.723,1186.201,12.79999,315,16,15,1185.327,-45.53579
  372,161.9325,1175.096,1186.201,7.846161,336,16,10,1185.363,-44.58097
  373,59.85424,1184.69,1186.201,2.892303,357,16,5,1185.399,-43.62613
  374,-59.85506,1184.69,1186.201,357.1077,357,0,355,1185.399,43.62527
  375,-161.9333,1175.096,1186.201,352.1538,336,0,350,1185.363,44.58011
  376,-262.8018,1156.723,1186.201,347.2,315,0,345,1185.327,45.53493
  377,-361.707,1129.708,1186.201,342.2461,294,0,340,1185.29,46.48962
  378,-457.9099,1094.254,1186.201,337.2923,273,0,335,1185.252,47.44458
  379,-550.6917,1050.624,1186.201,332.3384,252,0,330,1185.213,48.39925
  380,-639.3594,999.1461,1186.201,327.3846,231,0,325,1185.174,49.35408
  381,-723.2505,940.2031,1186.201,322.4307,210,0,320,1185.134,50.30893
  382,-801.7384,874.2359,1186.201,317.4769,189,0,315,1185.093,51.26347
  383,-874.2366,801.7378,1186.201,312.5231,168,0,315,1185.093,-51.26442
  384,-940.2036,723.2498,1186.201,307.5692,147,0,310,1185.134,-50.30975
  385,-999.1464,639.3586,1186.201,302.6154,126,0,305,1185.174,-49.35487
  386,-1050.625,550.691,1186.201,297.6616,105,0,300,1185.213,-48.40017
  387,-1094.254,457.9092,1186.201,292.7077,84,0,295,1185.252,-47.44525
  388,-1129.709,361.7064,1186.201,287.7538,63,0,290,1185.29,-46.4904
  389,-1156.723,262.8014,1186.201,282.8,42,0,285,1185.327,-45.53543
  390,-1175.096,161.933,1186.201,277.8462,21,0,280,1185.363,-44.58049
  391,-1184.69,59.8549,1186.201,272.8923,0,0,275,1185.399,-43.62557
  392,-1184.69,-59.85426,1186.201,267.1077,0,8,265,1185.399,43.62612
  393,-1175.096,-161.9324,1186.201,262.1539,21,8,260,1185.363,44.58107
  394,-1156.723,-262.8008,1186.201,257.2,42,8,255,1185.327,45.53605
  395,-1129.709,-361.7058,1186.201,252.2462,63,8,250,1185.29,46.49097
  396,-1094.254,-457.9086,1186.201,247.2923,84,8,245,1185.252,47.44581
  397,-1050.625,-550.6904,1186.201,242.3385,105,8,240,1185.213,48.40065
  398,-999.1467,-639.3582,1186.201,237.3846,126,8,235,1185.174,49.35542
  399,-940.204,-723.2494,1186.201,232.4308,147,8,230,1185.134,50.31028
  400,-874.2371,-801.7374,1186.201,227.477,168,8,225,1185.093,51.2649
  401,-801.7388,-874.2355,1186.201,222.5231,189,8,225,1185.093,-51.263
  402,-723.2511,-940.2026,1186.201,217.5693,210,8,220,1185.134,-50.30798
  403,-639.3598,-999.1458,1186.201,212.6154,231,8,215,1185.174,-49.3534
  404,-550.6918,-1050.624,1186.201,207.6616,252,8,210,1185.213,-48.39896
  405,-457.9098,-1094.254,1186.201,202.7077,273,8,205,1185.252,-47.44447
  406,-361.7067,-1129.709,1186.201,197.7539,294,8,200,1185.29,-46.48987
  407,-262.8015,-1156.723,1186.201,192.8,315,8,195,1185.327,-45.53516
  408,-161.9328,-1175.096,1186.201,187.8462,336,8,190,1185.363,-44.58051
  409,-59.85442,-1184.69,1186.201,182.8923,357,8,185,1185.398,-43.62584
  410,59.85502,-1184.69,1186.201,177.1077,357,24,175,1185.399,43.62527
  411,161.9334,-1175.096,1186.201,172.1538,336,24,170,1185.363,44.57992
  412,262.8021,-1156.723,1186.201,167.2,315,24,165,1185.327,45.53463
  413,361.7073,-1129.708,1186.201,162.2461,294,24,160,1185.29,46.4893
  414,457.9103,-1094.254,1186.201,157.2922,273,24,155,1185.252,47.44387
  415,550.6923,-1050.624,1186.201,152.3384,252,24,150,1185.213,48.39841
  416,639.3602,-999.1454,1186.201,147.3845,231,24,145,1185.174,49.35288
  417,723.2515,-940.2023,1186.201,142.4307,210,24,140,1185.134,50.30745
  418,801.7395,-874.2351,1186.201,137.4768,189,24,135,1185.093,51.26196
  419,874.2379,-801.7365,1186.201,132.523,168,24,135,1185.093,-51.26641
  420,940.2048,-723.2482,1186.201,127.5691,147,24,130,1185.134,-50.31201
  421,999.1477,-639.3567,1186.201,122.6153,126,24,125,1185.174,-49.35745
  422,1050.626,-550.6887,1186.201,117.6614,105,24,120,1185.213,-48.40284
  423,1094.255,-457.9065,1186.201,112.7076,84,24,115,1185.252,-47.44833
  424,1129.71,-361.7033,1186.201,107.7537,63,24,110,1185.29,-46.49379
  425,1156.724,-262.798,1186.201,102.7998,42,24,105,1185.327,-45.53913
  426,1175.097,-161.9293,1186.201,97.84598,21,24,100,1185.363,-44.58449
  427,1184.69,-59.85085,1186.201,92.89215,0,24,95,1185.399,-43.62981`;
  return baseData;
}

function loadPathData()
{
  var pathData = `PathId,Host,Universe,ChannelStart,Fixture0,Fixture1,DistanceFt
  0,192.168.0.220,1,1,391,390,8.544001
  0,192.168.0.220,1,1,390,389,8.543998
  0,192.168.0.220,1,1,389,388,8.543998
  0,192.168.0.220,1,1,388,387,8.543996
  0,192.168.0.220,1,1,387,386,8.544003
  0,192.168.0.220,1,1,386,385,8.543999
  0,192.168.0.220,1,1,385,384,8.543996
  0,192.168.0.220,1,1,384,383,8.544004
  0,192.168.0.220,1,1,383,382,8.543991
  0,192.168.0.220,1,1,382,381,8.544015
  0,192.168.0.220,1,1,381,380,8.543994
  0,192.168.0.220,1,1,380,379,8.543998
  0,192.168.0.220,1,1,379,378,8.54401
  0,192.168.0.220,1,1,378,377,8.544002
  0,192.168.0.220,1,1,377,376,8.544019
  0,192.168.0.220,1,1,376,375,8.544009
  0,192.168.0.220,1,1,375,374,8.544011
  1,192.168.0.220,2,379,323,322,8.788572
  1,192.168.0.220,2,379,322,321,8.788569
  1,192.168.0.220,2,379,321,320,8.788577
  1,192.168.0.220,2,379,320,319,8.788568
  1,192.168.0.220,2,379,319,318,8.788566
  1,192.168.0.220,2,379,318,317,8.788581
  1,192.168.0.220,2,379,317,316,8.788566
  1,192.168.0.220,2,379,316,315,8.788571
  1,192.168.0.220,2,379,315,314,8.788565
  1,192.168.0.220,2,379,314,313,8.78858
  1,192.168.0.220,2,379,313,312,8.788567
  1,192.168.0.220,2,379,312,311,8.788561
  1,192.168.0.220,2,379,311,310,8.788564
  1,192.168.0.220,2,379,310,309,8.78856
  1,192.168.0.220,2,379,309,308,8.788561
  2,192.168.0.220,3,211,263,262,9.108179
  2,192.168.0.220,3,211,262,261,9.108183
  2,192.168.0.220,3,211,261,260,9.108181
  2,192.168.0.220,3,211,260,259,9.108181
  2,192.168.0.220,3,211,259,258,9.108173
  2,192.168.0.220,3,211,258,257,9.108187
  2,192.168.0.220,3,211,257,256,9.10818
  2,192.168.0.220,3,211,256,255,9.108185
  2,192.168.0.220,3,211,255,254,9.108178
  2,192.168.0.220,3,211,254,253,9.108181
  2,192.168.0.220,3,211,253,252,9.10818
  2,192.168.0.220,3,211,252,251,9.108183
  2,192.168.0.220,3,211,251,250,9.10818
  3,192.168.0.220,4,1,209,208,8.749353
  3,192.168.0.220,4,1,208,207,8.749354
  3,192.168.0.220,4,1,207,206,8.749347
  3,192.168.0.220,4,1,206,205,8.749359
  3,192.168.0.220,4,1,205,204,8.749349
  3,192.168.0.220,4,1,204,203,8.749351
  3,192.168.0.220,4,1,203,202,8.749346
  3,192.168.0.220,4,1,202,201,8.749354
  3,192.168.0.220,4,1,201,200,8.749347
  3,192.168.0.220,4,1,200,199,8.749352
  3,192.168.0.220,4,1,199,198,8.749352
  3,192.168.0.220,4,1,198,197,8.749352
  4,192.168.0.221,1,274,161,160,9.156531
  4,192.168.0.221,1,274,160,159,9.156529
  4,192.168.0.221,1,274,159,158,9.156537
  4,192.168.0.221,1,274,158,157,9.156529
  4,192.168.0.221,1,274,157,156,9.15653
  4,192.168.0.221,1,274,156,155,9.156532
  4,192.168.0.221,1,274,155,154,9.156533
  4,192.168.0.221,1,274,154,153,9.156518
  4,192.168.0.221,1,274,153,152,9.156536
  4,192.168.0.221,1,274,152,151,9.156529
  5,192.168.0.221,2,1,119,118,8.683434
  5,192.168.0.221,2,1,118,117,8.683434
  5,192.168.0.221,2,1,117,116,8.683437
  5,192.168.0.221,2,1,116,115,8.683437
  5,192.168.0.221,2,1,115,114,8.683433
  5,192.168.0.221,2,1,114,113,8.683437
  5,192.168.0.221,2,1,113,112,8.683437
  5,192.168.0.221,2,1,112,111,8.683438
  5,192.168.0.221,2,1,111,110,8.683441
  6,192.168.0.221,3,211,83,82,9.244874
  6,192.168.0.221,3,211,82,81,9.244866
  6,192.168.0.221,3,211,81,80,9.24487
  6,192.168.0.221,3,211,80,79,9.24487
  6,192.168.0.221,3,211,79,78,9.244871
  6,192.168.0.221,3,211,78,77,9.24487
  6,192.168.0.221,3,211,77,76,9.24487
  6,192.168.0.221,3,211,76,47,8.595836
  6,192.168.0.221,3,211,47,48,8.550068
  6,192.168.0.221,3,211,48,49,8.550067
  6,192.168.0.221,3,211,49,50,8.550067
  6,192.168.0.221,3,211,50,51,8.550067
  6,192.168.0.221,3,211,51,52,8.550067
  6,192.168.0.221,3,211,52,53,8.550068
  7,192.168.0.221,4,22,29,28,9.459371
  7,192.168.0.221,4,22,28,27,9.459373
  7,192.168.0.221,4,22,27,26,9.459373
  7,192.168.0.221,4,22,26,25,9.459373
  7,192.168.0.221,4,22,25,5,8.695642
  7,192.168.0.221,4,22,5,6,6.124434
  7,192.168.0.221,4,22,6,7,6.124435
  7,192.168.0.221,4,22,7,8,6.124435
  7,192.168.0.221,4,22,8,9,6.124434
  8,192.168.0.222,1,232,392,393,8.543999
  8,192.168.0.222,1,232,393,394,8.543998
  8,192.168.0.222,1,232,394,395,8.543998
  8,192.168.0.222,1,232,395,396,8.544005
  8,192.168.0.222,1,232,396,397,8.543997
  8,192.168.0.222,1,232,397,398,8.543998
  8,192.168.0.222,1,232,398,399,8.543999
  8,192.168.0.222,1,232,399,400,8.544004
  8,192.168.0.222,1,232,400,401,8.543991
  8,192.168.0.222,1,232,401,402,8.544003
  8,192.168.0.222,1,232,402,403,8.544017
  8,192.168.0.222,1,232,403,404,8.544027
  8,192.168.0.222,1,232,404,405,8.544024
  8,192.168.0.222,1,232,405,406,8.54403
  8,192.168.0.222,1,232,406,407,8.544015
  8,192.168.0.222,1,232,407,408,8.544024
  8,192.168.0.222,1,232,408,409,8.544022
  9,192.168.0.222,2,106,324,325,8.788571
  9,192.168.0.222,2,106,325,326,8.788569
  9,192.168.0.222,2,106,326,327,8.788572
  9,192.168.0.222,2,106,327,328,8.788574
  9,192.168.0.222,2,106,328,329,8.788575
  9,192.168.0.222,2,106,329,330,8.788565
  9,192.168.0.222,2,106,330,331,8.788573
  9,192.168.0.222,2,106,331,332,8.788563
  9,192.168.0.222,2,106,332,333,8.788577
  9,192.168.0.222,2,106,333,334,8.788547
  9,192.168.0.222,2,106,334,335,8.78856
  9,192.168.0.222,2,106,335,336,8.788548
  9,192.168.0.222,2,106,336,337,8.78855
  9,192.168.0.222,2,106,337,338,8.78855
  9,192.168.0.222,2,106,338,339,8.788547
  10,192.168.0.222,3,442,264,265,9.108182
  10,192.168.0.222,3,442,265,266,9.108183
  10,192.168.0.222,3,442,266,267,9.108175
  10,192.168.0.222,3,442,267,268,9.108184
  10,192.168.0.222,3,442,268,269,9.108184
  10,192.168.0.222,3,442,269,270,9.108179
  10,192.168.0.222,3,442,270,271,9.10818
  10,192.168.0.222,3,442,271,272,9.108177
  10,192.168.0.222,3,442,272,273,9.108163
  10,192.168.0.222,3,442,273,274,9.108165
  10,192.168.0.222,3,442,274,275,9.108157
  10,192.168.0.222,3,442,275,276,9.108162
  10,192.168.0.222,3,442,276,277,9.108162
  11,192.168.0.222,4,232,210,211,8.749352
  11,192.168.0.222,4,232,211,212,8.749352
  11,192.168.0.222,4,232,212,213,8.749349
  11,192.168.0.222,4,232,213,214,8.749355
  11,192.168.0.222,4,232,214,215,8.749352
  11,192.168.0.222,4,232,215,216,8.749355
  11,192.168.0.222,4,232,216,217,8.74933
  11,192.168.0.222,4,232,217,218,8.749342
  11,192.168.0.222,4,232,218,219,8.749331
  11,192.168.0.222,4,232,219,220,8.749335
  11,192.168.0.222,4,232,220,221,8.749334
  11,192.168.0.222,4,232,221,222,8.749335
  12,192.168.0.223,1,1,162,163,9.156529
  12,192.168.0.223,1,1,163,164,9.156533
  12,192.168.0.223,1,1,164,165,9.156531
  12,192.168.0.223,1,1,165,166,9.156526
  12,192.168.0.223,1,1,166,167,9.156538
  12,192.168.0.223,1,1,167,168,9.156531
  12,192.168.0.223,1,1,168,169,9.156511
  12,192.168.0.223,1,1,169,170,9.156521
  12,192.168.0.223,1,1,170,171,9.156515
  12,192.168.0.223,1,1,171,172,9.156515
  13,192.168.0.223,2,232,120,121,8.683434
  13,192.168.0.223,2,232,121,122,8.683434
  13,192.168.0.223,2,232,122,123,8.683436
  13,192.168.0.223,2,232,123,124,8.683435
  13,192.168.0.223,2,232,124,125,8.683438
  13,192.168.0.223,2,232,125,126,8.683431
  13,192.168.0.223,2,232,126,127,8.683442
  13,192.168.0.223,2,232,127,128,8.683434
  13,192.168.0.223,2,232,128,129,8.683434
  14,192.168.0.223,3,442,84,85,9.244868
  14,192.168.0.223,3,442,85,86,9.244873
  14,192.168.0.223,3,442,86,87,9.24487
  14,192.168.0.223,3,442,87,88,9.244882
  14,192.168.0.223,3,442,88,89,9.244872
  14,192.168.0.223,3,442,89,90,9.244868
  14,192.168.0.223,3,442,90,91,9.24487
  14,192.168.0.223,3,442,91,60,8.595841
  14,192.168.0.223,3,442,60,59,8.550079
  14,192.168.0.223,3,442,59,58,8.550074
  14,192.168.0.223,3,442,58,57,8.550067
  14,192.168.0.223,3,442,57,56,8.550067
  14,192.168.0.223,3,442,56,55,8.550067
  14,192.168.0.223,3,442,55,54,8.550069
  15,192.168.0.223,4,253,30,31,9.459369
  15,192.168.0.223,4,253,31,32,9.459373
  15,192.168.0.223,4,253,32,33,9.45937
  15,192.168.0.223,4,253,33,34,9.459373
  15,192.168.0.223,4,253,34,14,8.695638
  15,192.168.0.223,4,253,14,13,6.12444
  15,192.168.0.223,4,253,13,12,6.124435
  15,192.168.0.223,4,253,12,11,6.124435
  15,192.168.0.223,4,253,11,10,6.124434
  16,192.168.0.224,1,463,356,357,8.544007
  16,192.168.0.224,1,463,357,358,8.544005
  16,192.168.0.224,1,463,358,359,8.544006
  16,192.168.0.224,1,463,359,360,8.544008
  16,192.168.0.224,1,463,360,361,8.544005
  16,192.168.0.224,1,463,361,362,8.544004
  16,192.168.0.224,1,463,362,363,8.544002
  16,192.168.0.224,1,463,363,364,8.544007
  16,192.168.0.224,1,463,364,365,8.544009
  16,192.168.0.224,1,463,365,366,8.544007
  16,192.168.0.224,1,463,366,367,8.544008
  16,192.168.0.224,1,463,367,368,8.54401
  16,192.168.0.224,1,463,368,369,8.544016
  16,192.168.0.224,1,463,369,370,8.544008
  16,192.168.0.224,1,463,370,371,8.544012
  16,192.168.0.224,1,463,371,372,8.544011
  16,192.168.0.224,1,463,372,373,8.54401
  17,192.168.0.224,2,337,292,293,8.788563
  17,192.168.0.224,2,337,293,294,8.788561
  17,192.168.0.224,2,337,294,295,8.78856
  17,192.168.0.224,2,337,295,296,8.788568
  17,192.168.0.224,2,337,296,297,8.788555
  17,192.168.0.224,2,337,297,298,8.788558
  17,192.168.0.224,2,337,298,299,8.78856
  17,192.168.0.224,2,337,299,300,8.788571
  17,192.168.0.224,2,337,300,301,8.788568
  17,192.168.0.224,2,337,301,302,8.788548
  17,192.168.0.224,2,337,302,303,8.788564
  17,192.168.0.224,2,337,303,304,8.788559
  17,192.168.0.224,2,337,304,305,8.788562
  17,192.168.0.224,2,337,305,306,8.78856
  17,192.168.0.224,2,337,306,307,8.788561
  18,192.168.0.224,3,169,236,237,9.10818
  18,192.168.0.224,3,169,237,238,9.108181
  18,192.168.0.224,3,169,238,239,9.108179
  18,192.168.0.224,3,169,239,240,9.108175
  18,192.168.0.224,3,169,240,241,9.108187
  18,192.168.0.224,3,169,241,242,9.108184
  18,192.168.0.224,3,169,242,243,9.10818
  18,192.168.0.224,3,169,243,244,9.10818
  18,192.168.0.224,3,169,244,245,9.10818
  18,192.168.0.224,3,169,245,246,9.108187
  18,192.168.0.224,3,169,246,247,9.108178
  18,192.168.0.224,3,169,247,248,9.10818
  18,192.168.0.224,3,169,248,249,9.10818
  19,192.168.0.224,4,463,184,185,8.749352
  19,192.168.0.224,4,463,185,186,8.749352
  19,192.168.0.224,4,463,186,187,8.749352
  19,192.168.0.224,4,463,187,188,8.749351
  19,192.168.0.224,4,463,188,189,8.749354
  19,192.168.0.224,4,463,189,190,8.749346
  19,192.168.0.224,4,463,190,191,8.749351
  19,192.168.0.224,4,463,191,192,8.749349
  19,192.168.0.224,4,463,192,193,8.749347
  19,192.168.0.224,4,463,193,194,8.749356
  19,192.168.0.224,4,463,194,195,8.749352
  19,192.168.0.224,4,463,195,196,8.749354
  20,192.168.0.225,1,232,140,141,9.156532
  20,192.168.0.225,1,232,141,142,9.156524
  20,192.168.0.225,1,232,142,143,9.156535
  20,192.168.0.225,1,232,143,144,9.15653
  20,192.168.0.225,1,232,144,145,9.156533
  20,192.168.0.225,1,232,145,146,9.156532
  20,192.168.0.225,1,232,146,147,9.156529
  20,192.168.0.225,1,232,147,148,9.156531
  20,192.168.0.225,1,232,148,149,9.156531
  20,192.168.0.225,1,232,149,150,9.156532
  21,192.168.0.225,2,463,100,101,8.683439
  21,192.168.0.225,2,463,101,102,8.683442
  21,192.168.0.225,2,463,102,103,8.68344
  21,192.168.0.225,2,463,103,104,8.683434
  21,192.168.0.225,2,463,104,105,8.683446
  21,192.168.0.225,2,463,105,106,8.683445
  21,192.168.0.225,2,463,106,107,8.683436
  21,192.168.0.225,2,463,107,108,8.683438
  21,192.168.0.225,2,463,108,109,8.683443
  22,192.168.0.225,3,169,68,69,9.244868
  22,192.168.0.225,3,169,69,70,9.244873
  22,192.168.0.225,3,169,70,71,9.244864
  22,192.168.0.225,3,169,71,72,9.244873
  22,192.168.0.225,3,169,72,73,9.244874
  22,192.168.0.225,3,169,73,74,9.244872
  22,192.168.0.225,3,169,74,75,9.244868
  22,192.168.0.225,3,169,75,46,8.595845
  22,192.168.0.225,3,169,46,45,8.550067
  22,192.168.0.225,3,169,45,44,8.550068
  22,192.168.0.225,3,169,44,43,8.550069
  22,192.168.0.225,3,169,43,42,8.550066
  22,192.168.0.225,3,169,42,41,8.550067
  22,192.168.0.225,3,169,41,40,8.55007
  23,192.168.0.225,4,484,20,21,9.459373
  23,192.168.0.225,4,484,21,22,9.459374
  23,192.168.0.225,4,484,22,23,9.459373
  23,192.168.0.225,4,484,23,24,9.459374
  23,192.168.0.225,4,484,24,4,8.695638
  23,192.168.0.225,4,484,4,3,6.124434
  23,192.168.0.225,4,484,3,2,6.124437
  23,192.168.0.225,4,484,2,1,6.124435
  23,192.168.0.225,4,484,1,0,6.124436
  24,192.168.0.226,1,190,427,426,8.544022
  24,192.168.0.226,1,190,426,425,8.544024
  24,192.168.0.226,1,190,425,424,8.544018
  24,192.168.0.226,1,190,424,423,8.544028
  24,192.168.0.226,1,190,423,422,8.544028
  24,192.168.0.226,1,190,422,421,8.544017
  24,192.168.0.226,1,190,421,420,8.544017
  24,192.168.0.226,1,190,420,419,8.544028
  24,192.168.0.226,1,190,419,418,8.544031
  24,192.168.0.226,1,190,418,417,8.544022
  24,192.168.0.226,1,190,417,416,8.544015
  24,192.168.0.226,1,190,416,415,8.544024
  24,192.168.0.226,1,190,415,414,8.544024
  24,192.168.0.226,1,190,414,413,8.54402
  24,192.168.0.226,1,190,413,412,8.544026
  24,192.168.0.226,1,190,412,411,8.544019
  24,192.168.0.226,1,190,411,410,8.544024
  25,192.168.0.226,2,64,355,354,8.788548
  25,192.168.0.226,2,64,354,353,8.788549
  25,192.168.0.226,2,64,353,352,8.78855
  25,192.168.0.226,2,64,352,351,8.788552
  25,192.168.0.226,2,64,351,350,8.788544
  25,192.168.0.226,2,64,350,349,8.788551
  25,192.168.0.226,2,64,349,348,8.788557
  25,192.168.0.226,2,64,348,347,8.788536
  25,192.168.0.226,2,64,347,346,8.78856
  25,192.168.0.226,2,64,346,345,8.788551
  25,192.168.0.226,2,64,345,344,8.788544
  25,192.168.0.226,2,64,344,343,8.788549
  25,192.168.0.226,2,64,343,342,8.788553
  25,192.168.0.226,2,64,342,341,8.788548
  25,192.168.0.226,2,64,341,340,8.788549
  26,192.168.0.226,3,400,291,290,9.108163
  26,192.168.0.226,3,400,290,289,9.108164
  26,192.168.0.226,3,400,289,288,9.108159
  26,192.168.0.226,3,400,288,287,9.108164
  26,192.168.0.226,3,400,287,286,9.108157
  26,192.168.0.226,3,400,286,285,9.108159
  26,192.168.0.226,3,400,285,284,9.108158
  26,192.168.0.226,3,400,284,283,9.108167
  26,192.168.0.226,3,400,283,282,9.108167
  26,192.168.0.226,3,400,282,281,9.108156
  26,192.168.0.226,3,400,281,280,9.108161
  26,192.168.0.226,3,400,280,279,9.10816
  26,192.168.0.226,3,400,279,278,9.108162
  27,192.168.0.226,4,190,235,234,8.749334
  27,192.168.0.226,4,190,234,233,8.749334
  27,192.168.0.226,4,190,233,232,8.749338
  27,192.168.0.226,4,190,232,231,8.749329
  27,192.168.0.226,4,190,231,230,8.749338
  27,192.168.0.226,4,190,230,229,8.749338
  27,192.168.0.226,4,190,229,228,8.74933
  27,192.168.0.226,4,190,228,227,8.749334
  27,192.168.0.226,4,190,227,226,8.749336
  27,192.168.0.226,4,190,226,225,8.749336
  27,192.168.0.226,4,190,225,224,8.749334
  27,192.168.0.226,4,190,224,223,8.749334
  28,192.168.0.227,1,463,183,182,9.156516
  28,192.168.0.227,1,463,182,181,9.156514
  28,192.168.0.227,1,463,181,180,9.156516
  28,192.168.0.227,1,463,180,179,9.15652
  28,192.168.0.227,1,463,179,178,9.156516
  28,192.168.0.227,1,463,178,177,9.156514
  28,192.168.0.227,1,463,177,176,9.156513
  28,192.168.0.227,1,463,176,175,9.156516
  28,192.168.0.227,1,463,175,174,9.156518
  28,192.168.0.227,1,463,174,173,9.156516
  29,192.168.0.227,2,190,139,138,8.683435
  29,192.168.0.227,2,190,138,137,8.683429
  29,192.168.0.227,2,190,137,136,8.683445
  29,192.168.0.227,2,190,136,135,8.683431
  29,192.168.0.227,2,190,135,134,8.683438
  29,192.168.0.227,2,190,134,133,8.683431
  29,192.168.0.227,2,190,133,132,8.683438
  29,192.168.0.227,2,190,132,131,8.683434
  29,192.168.0.227,2,190,131,130,8.683436
  30,192.168.0.227,3,400,99,98,9.24487
  30,192.168.0.227,3,400,98,97,9.244869
  30,192.168.0.227,3,400,97,96,9.244873
  30,192.168.0.227,3,400,96,95,9.244873
  30,192.168.0.227,3,400,95,94,9.244869
  30,192.168.0.227,3,400,94,93,9.244867
  30,192.168.0.227,3,400,93,92,9.244873
  30,192.168.0.227,3,400,92,61,8.595836
  30,192.168.0.227,3,400,61,62,8.55008
  30,192.168.0.227,3,400,62,63,8.550074
  30,192.168.0.227,3,400,63,64,8.550074
  30,192.168.0.227,3,400,64,65,8.550083
  30,192.168.0.227,3,400,65,66,8.550076
  30,192.168.0.227,3,400,66,67,8.550076
  31,192.168.0.227,4,211,39,38,9.459373
  31,192.168.0.227,4,211,38,37,9.45937
  31,192.168.0.227,4,211,37,36,9.459373
  31,192.168.0.227,4,211,36,35,9.459369
  31,192.168.0.227,4,211,35,15,8.695638
  31,192.168.0.227,4,211,15,16,6.124441
  31,192.168.0.227,4,211,16,17,6.12444
  31,192.168.0.227,4,211,17,18,6.12444
  31,192.168.0.227,4,211,18,19,6.12444`;
  return pathData;
}

async function importCSV() {

  const nodes: SceneNode[] = [];
  const lines: SceneNode[] = [];
  const portals: SceneNode[] = [];
  const booths: SceneNode[] = [];
  const pageNode = figma.currentPage;

  // make sure we are on the right page
  if (pageNode.name != "Assets")
  {
    console.error(`need to be on the Assets page to run`);
    return;
  }

  // import the CSV data
  buildMaps();
  
  console.log(`finding node 'Wiring Plan'`);
  const planNode = pageNode.findOne(node => node.type === "FRAME" && node.name === "Base Layout") as FrameNode;
  if (planNode == null)
  {
    console.log(`planNode is null !`);
    return;
  }

  console.log(`finding node 'Map'`);
  const mapNode = planNode.findOne(node => node.type === "FRAME" && node.name === "Map") as FrameNode;

  if (mapNode == null)
  {
    console.log(`mapNode is null !`);
    return;
  }

  // first get rid of old lights & wiring path data
  console.log(`finding and deleting node 'Lights'`);
  const lightsGroup = mapNode.findOne(node => node.type === "GROUP" && node.name === "Lights") as FrameNode;
  if (lightsGroup != null)
  {
    lightsGroup.remove();
  }

  console.log(`finding and deleting node 'Wiring Paths'`);
  const pathsGroup = mapNode.findOne(node => node.type === "GROUP" && node.name === "Wiring Paths") as FrameNode;
  if (pathsGroup != null)
  {
    pathsGroup.remove();
  }

  console.log(`finding and deleting node 'Portals'`);
  const portalsGroup = mapNode.findOne(node => node.type === "GROUP" && node.name === "Portals") as FrameNode;
  if (portalsGroup != null)
  {
    portalsGroup.remove();
  }

  console.log(`finding and deleting node 'Booths'`);
  const boothsGroup = mapNode.findOne(node => node.type === "GROUP" && node.name === "Booths") as FrameNode;
  if (boothsGroup != null)
  {
    boothsGroup.remove();
  }

  // now we draw the wiring path lines

  var testLoopMax = 500;
  for (let path of pathList) {

    var cols = path.split(",");
    console.log(`path = ${path} cols.length = ${cols.length}`);

    const line = figma.createLine();
    var startNodeId = cols[4];
    var endNodeId = cols[5];

    console.log(`startNodeId = ${startNodeId} endNodeId = ${endNodeId}`);

    console.log(`(lightBaseMap.get(startNodeId) = ${lightBaseMap.get(startNodeId)} lightBaseMap.get(endNodeId) = ${lightBaseMap.get(endNodeId)}`);

    var startX = parseFloat(lightBaseMap.get(startNodeId)[1]);
    var startZ = -parseFloat(lightBaseMap.get(startNodeId)[2]);
    var endX = parseFloat(lightBaseMap.get(endNodeId)[1]);
    var endZ = -parseFloat(lightBaseMap.get(endNodeId)[2]);

    console.log(`processing path from node ${cols[4]} to ${cols[5]}`);

    var length = Math.sqrt((endX - startX)*(endX - startX) + (endZ - startZ)*(endZ - startZ));
    var rot = -Math.atan2(endZ - startZ, endX - startX) * 180 / Math.PI;

    line.resize(length,0);
    line.x = startX;
    line.y = startZ;
    line.rotation = rot;

    // add the length of the line
    var lineLength = figma.createText();
    lineLength.fontSize = 8;
    lineLength.characters = parseFloat(cols[6]).toFixed(2) + " (ft)";
    lineLength.x = ((startX + endX) / 2) + 10;
    lineLength.y = (startZ + endZ) / 2;

    // for now just put node in the main page; group later
    pageNode.appendChild(lineLength);
    lines.push(lineLength);

    // for now just put node in the main page; group later
    pageNode.appendChild(line);
    lines.push(line);

    testLoopMax -=1;
    if (testLoopMax == 0)
      break;
  }

  console.log(`done processing paths`);

  // and now we group the new lines together
  figma.currentPage.selection = lines;
  figma.viewport.scrollAndZoomIntoView(lines);
  console.log(`figma.group()`);
  const newLines = figma.group(lines,mapNode);
  newLines.name = "Wiring Paths";

  // now add new lights and group together
  console.log(`finding node 'Light Base'`);
  const base = pageNode.findOne(node => node.type === "COMPONENT" && node.name === "Light Base") as ComponentNode;
  var testLoopMax = 500;
  for (let key of lightBaseMap.keys()) {
    const light = base.createInstance();
    console.log(`processing lightbase ${key}`);
    console.log(`    ${lightBaseMap.get(key)}`);
    console.log(`    ${lightBaseMap.get(key)[1]}`);
    console.log(`    ${lightBaseMap.get(key)[2]}`);

    light.x = parseFloat(lightBaseMap.get(key)[1]);
    light.y = -parseFloat(lightBaseMap.get(key)[2]);  // need to invert y because in unity, y axis runs bottom-to-top, and in figma, it runs top-to-bottom
    const id = light.findOne(node => node.type === "TEXT" && node.name === "#ID") as TextNode;
    id.characters = key;

    const univ = light.findOne(node => node.type === "TEXT" && node.name === "#Universe") as TextNode;
    univ.characters = `P${lightBaseMap.get(key)[6]}`;

    var chanStart = parseInt(lightBaseMap.get(key)[5]);
    var chanEnd = chanStart+20;

    const range = light.findOne(node => node.type === "TEXT" && node.name === "#Range") as TextNode;
    range.characters = `${chanStart}-${chanEnd}`;


    const angle = light.findOne(node => node.type === "TEXT" && node.name === "#A") as TextNode;
    angle.characters = `A=${parseFloat(lightBaseMap.get(key)[7]).toFixed(1)}°`;

    const radius1 = light.findOne(node => node.type === "TEXT" && node.name === "#R1") as TextNode;
    var R1I = Math.round(lightBaseMap.get(key)[8]);
    var R1F = Math.floor(R1I/12);
    R1I = R1I - (R1F*12);
    radius1.characters = `R1=${R1F}'-${R1I}"`;

    const radius2 = light.findOne(node => node.type === "TEXT" && node.name === "#R2") as TextNode;
    var R2I = Math.round(lightBaseMap.get(key)[9]);
    radius2.characters = `R2=${R2I}"`;

    light.name = `Light ${key}`;

    // for now just put light in the main page; group later
    pageNode.appendChild(light);
    nodes.push(light);

    testLoopMax -=1;
    if (testLoopMax == 0)
      break;
  }

  console.log(`done adding lights`);

  // and now we group the new lights together
  figma.currentPage.selection = nodes;
  figma.viewport.scrollAndZoomIntoView(nodes);
  const newLights = figma.group(nodes,mapNode);
  newLights.name = "Lights";

  // now we add the portals
  console.log(`finding node 'Portal Base'`);
  const portalBase = pageNode.findOne(node => node.type === "COMPONENT" && node.name === "Portal Base") as ComponentNode;
  for (let portal of portalList) {
    var cols = portal.split(",");
    console.log(`portal = ${portal} cols.length = ${cols.length}`);

    const portalInstance = portalBase.createInstance();
    var portalId = parseInt(cols[0]);
    var portalX = parseFloat(cols[1]);
    var portalZ = parseFloat(cols[2]);
    var portalA = parseFloat(cols[3]);

    console.log(`processing portal ${portalId} (${portalX},${portalZ}) angle ${portalA}`);

    portalInstance.x = portalX;
    portalInstance.y = -portalZ;
    portalInstance.rotation = portalA;

    const id = portalInstance.findOne(node => node.type === "TEXT" && node.name === "#ID") as TextNode;
    id.characters = `Portal ${portalId}`;
    portalInstance.name = `Portal ${portalId}`;

    // for now just put node in the main page; group later
    pageNode.appendChild(portalInstance);
    portals.push(portalInstance);
  }

  console.log(`done processing portals`);

  // and now we group the new portals together
  figma.currentPage.selection = portals;
  const newPortals = figma.group(portals,mapNode);
  newPortals.name = "Portals";

  // now we add the booths
  console.log(`finding node 'Booth Base'`);
  const boothBase = pageNode.findOne(node => node.type === "COMPONENT" && node.name === "Booth Base") as ComponentNode;
  for (let booth of boothList) {
    var cols = booth.split(",");
    console.log(`booth = ${booth} cols.length = ${cols.length}`);

    const boothInstance = boothBase.createInstance();
    var boothId = parseInt(cols[0]);
    var boothX = parseFloat(cols[1]);
    var boothZ = parseFloat(cols[2]);
    var boothA = parseFloat(cols[3]);

    console.log(`processing booth ${boothId} (${boothX},${boothZ}) angle ${boothA}`);

    boothInstance.x = boothX;
    boothInstance.y = -boothZ;
    boothInstance.rotation = boothA;

    const id = boothInstance.findOne(node => node.type === "TEXT" && node.name === "#ID") as TextNode;
    id.characters = `Booth ${boothId}`;
    boothInstance.name = `Booth ${boothId}`;

    // for now just put node in the main page; group later
    pageNode.appendChild(boothInstance);
    booths.push(boothInstance);
  }

  console.log(`done processing booths`);

  // and now we group the new booths together
  figma.currentPage.selection = booths;
  const newBooths = figma.group(booths,mapNode);
  newBooths.name = "Booths";
}


async function exportTags() 
{

  const pageNode = figma.currentPage;

  // make sure we are on the right page
  if (pageNode.name != "Landmarks")
  {
    console.error(`need to be on the Landmarks page to run`);
    return;
  }

  var tagNode = pageNode.findOne(node => node.type === "FRAME" && node.name === "Arms / direction A") as FrameNode;
  console.log(`found tagNode '${tagNode.name}'`);
  tagNode = tagNode.findOne(node => node.type === "FRAME" && node.name === "Map") as FrameNode;
  console.log(`found tagNode '${tagNode.name}'`);
  tagNode = tagNode.findOne(node => node.type === "GROUP" && node.name === "Lights") as FrameNode;
  console.log(`found tagNode '${tagNode.name}'`);

  for (let child of tagNode.children)
  {
    if (child.name.startsWith("CWArm"))
    {
      //console.log(`found child '${child.name}'`);
      // find the child lights
      var childGroup = child as FrameNode;
      var csvLightNumbers = "";
      for (let light of childGroup.children)
      {
        if (csvLightNumbers != "")
        {
          csvLightNumbers += ",";
        }
        csvLightNumbers += light.name.substring(6);
      }
      //var groupNum = child.name.substring(6);
      console.log(`${child.name},${csvLightNumbers}`);
    }
  }

  var tagNode = pageNode.findOne(node => node.type === "FRAME" && node.name === "Portal Placemen / Aisles") as FrameNode;
  console.log(`found tagNode '${tagNode.name}'`);
  tagNode = tagNode.findOne(node => node.type === "FRAME" && node.name === "Map") as FrameNode;
  console.log(`found tagNode '${tagNode.name}'`);
  tagNode = tagNode.findOne(node => node.type === "GROUP" && node.name === "Lights") as FrameNode;
  console.log(`found tagNode '${tagNode.name}'`);

  for (let child of tagNode.children)
  {
    if (child.name.startsWith("Portal"))
    {
      //console.log(`found child '${child.name}'`);
      // find the child lights
      var childGroup = child as FrameNode;
      var csvLightNumbers = "";
      for (let light of childGroup.children)
      {
        if (csvLightNumbers != "")
        {
          csvLightNumbers += ",";
        }
        csvLightNumbers += light.name.substring(6);
      }
      //var groupNum = child.name.substring(6);
      console.log(`${child.name},${csvLightNumbers}`);
    }
  }

  var tagNode = pageNode.findOne(node => node.type === "FRAME" && node.name === "Arms / direction B") as FrameNode;
  console.log(`found tagNode '${tagNode.name}'`);
  tagNode = tagNode.findOne(node => node.type === "FRAME" && node.name === "Map") as FrameNode;
  console.log(`found tagNode '${tagNode.name}'`);
  tagNode = tagNode.findOne(node => node.type === "GROUP" && node.name === "Lights") as FrameNode;
  console.log(`found tagNode '${tagNode.name}'`);

  console.log('exporting direction B!');
  for (let child of tagNode.children)
  {
    if (child.name.startsWith("Arm"))
    {
      //console.log(`found child '${child.name}'`);
      // find the child lights
      var childGroup = child as FrameNode;
      if (childGroup != null)
      {
        var csvLightNumbers = "";
        for (let light of childGroup.children)
        {
          if (csvLightNumbers != "")
          {
            csvLightNumbers += ",";
          }
          csvLightNumbers += light.name.substring(6);
        }
        //var groupNum = child.name.substring(6);
        console.log(`${child.name},${csvLightNumbers}`);
      }
    }
  }
  console.log('finished exporting direction B!');

}

async function numberRadials() {

  const pageNode = figma.currentPage;
  const nodes: SceneNode[] = [];

  // make sure we are on the right page
  if (pageNode.name != "Assets")
  {
    console.error(`need to be on the Assets page to run`);
    return;
  }
  
  console.log(`finding node 'Map'`);
  const mapNode = pageNode.findOne(node => node.type === "FRAME" && node.name === "Map") as FrameNode;
  if (mapNode == null)
  {
    console.log(`mapNode is null !`);
    return;
  }

  // first get rid of old numbers
  console.log(`finding and deleting node 'Numbers'`);
  const numbers = pageNode.findOne(node => node.type === "GROUP" && node.name === "Numbers") as GroupNode;
  if (numbers != null)
  {
    numbers.remove();
  }

  // now we draw the numbers
  for (let i=0; i < 360; i+=5) {
    const text = figma.createText();
    var x = 1560 * Math.cos((i-90) * Math.PI / 180);
    var y = 1560 * Math.sin((i-90) * Math.PI / 180);
    text.x = x;
    text.y = y;
    text.fontSize = 20;
    text.characters = i.toString() + "°";
    
    // for now just put node in the main page; group later
    pageNode.appendChild(text);
    nodes.push(text);
  }

  console.log(`done drawing numbers`);

  // and now we group the new lines together
  figma.currentPage.selection = nodes;
  figma.viewport.scrollAndZoomIntoView(nodes);
  console.log(`figma.group()`);
  const numberGroup = figma.group(nodes,mapNode);
  numberGroup.name = "Numbers";
}


// This file holds the main code for the plugins. It has access to the *document*.
// You can access browser APIs such as the network by creating a UI which contains
// a full browser environment (see documentation).

(async() => {
  await loadFonts();

  console.log(`figma.command = ${figma.command}`)
  console.log(`figma.currentPage.name = '${figma.currentPage.name}'`);

  if (figma.command == "import")
  {    
    await importCSV();
  }
  else if (figma.command == "export")
  {
    await exportTags();
  }
  else if (figma.command == "radials")
  {
    await numberRadials();
  }

  // Make sure to close the plugin when you're done. Otherwise the plugin will
  // keep running, which shows the cancel button at the bottom of the screen.
  figma.closePlugin();

})();


